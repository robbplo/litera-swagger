{
  "openapi": "3.0.1",
  "info": {
    "title": "CE Manager API",
    "description": "## Introduction\r\n\r\nCE Manager is the market leader in continuing education compliance tracking software. For almost 20 years, firms in over 400 jurisdictions have relied on CE Manager for its CLE, CPE, and CPD tracking and professional development capabilities.\r\n\r\nCE Manager's API is organized around **REST**. Our API has predictable resource-oriented URLs, accepts **form-encoded** request bodies, returns **JSON-encoded** responses, and uses standard HTTP response codes, authentication, and verbs.\r\n\r\n**Features**\r\n\r\n- Retrieve, create and update users, courses, and sessions.\r\n- Register attendees, instructors and clients.\r\n- Upload attendance certificates.\r\n- Manage system tables.\r\n\r\n## Authentication\r\n\r\nFirms using the CE Manger API will be given a **client_id** and **client_secret**, both of which can be retrieved from the API Client screen. The **client_id** and **client_secret** are then used to generate an **access_token**, which is used in a request’s authorization header. \r\n\r\nTo generate an **access_token**, make a POST request to the Token URL with the following:\r\n\r\n\r\n**Request Header**\r\n\r\n|Parameter|Value|Description|\r\n|------|------|------|\r\n|Authorization|Basic BASE64(client_id:client_secret)|*Base64* representation of the app **client_id** and app **client_secret**, concatenated with a colon|\r\n|Content-Type|application/x-www-form-urlencoded|\r\n\r\n**Request Body**\r\n\r\n| Parameter| Value |Description |\r\n| ------ | ------ |------ |\r\n|grant_type|```client_credentials``` |Default grant type used to obtain an access token|\r\n|client_id| ```client_id``` |The provided **client_id**|\r\n|scope| ```cem/api``` |Defines the actions that can be executed on a user's behalf|\r\n\r\nAll API requests must be made over  [HTTPS](http://en.wikipedia.org/wiki/HTTP_Secure). Calls made over plain HTTP will fail. API requests without authentication will also fail.\r\n### Sample request to get the access token\r\n```\r\n\r\nvar myHeaders = new Headers();\r\nmyHeaders.append(\"Authorization\", \"Basic [Base64 representation of the client_id and client_secret]\");\r\nmyHeaders.append(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n\r\nvar urlencoded = new URLSearchParams();\r\nurlencoded.append(\"scope\", \"cem/api\");\r\nurlencoded.append(\"client_id\", \"[client_id]\");\r\n\r\nvar requestOptions = {\r\n  method: 'POST',\r\n  headers: myHeaders,\r\n  body: urlencoded,\r\n  redirect: 'follow'\r\n};\r\n\r\nfetch(\"https://[Auth URL provided by Micron]/oauth2/token?grant_type=client_credentials\", requestOptions)\r\n  .then(response => response.text())\r\n  .then(result => console.log(result))\r\n  .catch(error => console.log('error', error));\r\n\r\n```\r\n### Sample request using the access token\r\n```\r\n\r\nvar myHeaders = new Headers();\r\nmyHeaders.append(\"Content-Type\", \"application/json\");\r\nmyHeaders.append(\"Authorization\", \"Bearer [ACCESS TOKEN GOES HERE]\");\r\n\r\nvar raw = JSON.stringify({\r\n  page: 1,\r\n  pageSize: 10,\r\n  sortBy: \"name\",\r\n});\r\n\r\nvar requestOptions = {\r\n  method: \"POST\",\r\n  headers: myHeaders,\r\n  body: raw\r\n};\r\n\r\nfetch(\r\n  https://api.cem.micronapps.com/api/Maintenance/Affiliation/GetAll,\r\n  requestOptions\r\n)\r\n  .then((response) => response.text())\r\n  .then((result) => console.log(result))\r\n  .catch((error) => console.log(\"error\", error));\r\n\r\n  ```\r\n## Responses\r\nAll endpoints return the response data as a **JSON** object. See each endpoint for a description of all retrievable objects.\r\n\r\n### Response codes\r\nThe CE Manager API uses the following response status codes, as defined in the RFC 2616 and RFC 6585:\r\n\r\n| Response Code| Description |\r\n| ------ | ------ |\r\n|200|OK - The request has succeeded.|\r\n|400|Bad Request - The request could not be understood by the server due to malformed syntax. The message body will contain more information; see Response Schema. |\r\n|401|Unauthorized - The request did not include valid authorization credentials for the target resource. |\r\n|403|Forbidden - The client lacked permission to access the requested resource. |\r\n|404|Not Found - The requested resource could not be found. This error can be due to a temporary or permanent condition. |\r\n|429|Too Many Requests - The user has sent too many requests within a set period of time. |\r\n|500|Internal Server Error. The request could not be completed due to an internal error on the server side. |\r\n|502|Bad Gateway - The server was acting as a gateway or proxy and received an invalid response from the upstream server. |\r\n|503|Service Unavailable - The server is temporarily unable to handle the request. You can choose to resend the request. |\r\n\r\n## Filtering & Pagination\r\n\r\n| Property| Type |Description |\r\n| ------ | ------ |------ |\r\n|FilterBy|string[]| Set a property that will filter the result set. The set will only include results matching the value of the property <ColumnName>[contains]:<wordFilter> (e.g. Title[contains]:2021)|\r\n|SearchCriteria|string[]| Search within a result set using a defined property (more than 1) <ColumnName>: <value> (e.g. SessionFormat: 13)|\r\n|SortBy|string|Choose a property that will sort the result set (e.g. title), add '-' before the property to display results in descending order (e.g. -title)|\r\n|Page|int|Indicates the page number of result set.|\r\n|PageSize|int|Indicates the number of rows that will be returned per page. The default is 10 records.|\r\n\r\n## Policies\r\n\r\n**Deprecation Policy** The current API version is v1. Once a new version of the API is made publicly available, earlier versions will be deprecated and will cease functioning after one year. Once the older API is removed, any requests using that version will result in a 404 error.\r\n\r\n> Note: No API will be removed until similar functionality is present in the newest version.\r\n\r\n**Breaking Change** Policy changes that do not break an API, such as the inclusion of new attributes, can be made at any time. Changes that break a production level API (such as removing attributes or making large-scale changes to the API’s behavior) will typically only occur after 60 days advance notice. In the rare occasions where breaking changes must be made immediately (due to legal, performance, or security concerns), advance notice may not be given.",
    "version": "1.0"
  },
  "servers": [
    {
      "url": "https://api.cem.micronapps.com"
    }
  ],
  "paths": {
    "/api/Maintenance/Affiliation/GetAll": {
      "post": {
        "tags": [
          "Affiliation"
        ],
        "summary": "List affiliations.",
        "description": "Retrieve affiliations based on the given parameters.\r\n___\r\n### SearchCriteria Parameters:\r\n| Parameter| Description | Example |\r\n| ------ | ------ |------ |\r\n| **Active** | Return records flagged as active. | ```searchCriteria: [\"Active\"]``` |\r\n| **Archived** | Return records flagged as archived. | ```searchCriteria: [\"Archived\"]``` |\r\n\r\n### SortBy Options:\r\n| Parameter | Example |\r\n| ------ | ------ |\r\n| **name** | ```sortBy: \"name\"``` |\r\n| **city** | ```sortBy: \"city\"``` |\r\n| **stateId** | ```sortBy: \"stateId\"``` |\r\n| **countryId** | ```sortBy: \"countryId\"``` |\r\n| **isActive**  | ```sortBy: \"isActive\"``` |",
        "operationId": "Affiliation-GetAll",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllAffiliationQuery"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllAffiliationQuery"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllAffiliationQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AffiliationInfoList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AffiliationInfoList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/Affiliation/GetById/{affiliationId}": {
      "get": {
        "tags": [
          "Affiliation"
        ],
        "summary": "Find affiliation by Id.",
        "description": "View specific details of a client affiliation based on the supplied id.",
        "operationId": "Affiliation-GetById",
        "parameters": [
          {
            "name": "affiliationId",
            "in": "path",
            "description": "Affiliation Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AffiliationInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AffiliationInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/Affiliation/GetByCode/{affiliationCode}": {
      "get": {
        "tags": [
          "Affiliation"
        ],
        "summary": "Find affiliation by code.",
        "description": "View specific details of a client affiliation based on the supplied code.",
        "operationId": "Affiliation-GetByCode",
        "parameters": [
          {
            "name": "affiliationCode",
            "in": "path",
            "description": "Affiliation code",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AffiliationInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AffiliationInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/Affiliation/Create": {
      "post": {
        "tags": [
          "Affiliation"
        ],
        "summary": "Add a new affiliation.",
        "description": "Create a new affiliation.",
        "operationId": "Affiliation-Create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAffiliationCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAffiliationCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAffiliationCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AffiliationInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AffiliationInfo"
                }
              }
            }
          },
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AffiliationInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AffiliationInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/Affiliation/Update": {
      "put": {
        "tags": [
          "Affiliation"
        ],
        "summary": "Update an affiliation.",
        "description": "Update an affiliation based on the specified Id.",
        "operationId": "Affiliation-Update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAffiliationCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAffiliationCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAffiliationCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AffiliationInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AffiliationInfo"
                }
              }
            }
          },
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AffiliationInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AffiliationInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/Affiliation/Delete": {
      "delete": {
        "tags": [
          "Affiliation"
        ],
        "summary": "Delete affiliations.",
        "description": "Delete affiliations based on the specified Ids. Returns a list of invalid records for deletion.",
        "operationId": "Affiliation-Delete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteAffiliationCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteAffiliationCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteAffiliationCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AffiliationInfo"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AffiliationInfo"
                  }
                }
              }
            }
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/ClassYear/GetAll": {
      "post": {
        "tags": [
          "ClassYear"
        ],
        "summary": "List class years.",
        "description": "List all availabe class years within the firm.\r\n___\r\n### SearchCriteria Parameters:\r\n| Parameter| Description | Example |\r\n| ------ | ------ |------ |\r\n| **Active** | Return records flagged as active. | ```searchCriteria: [\"Active\"]``` |\r\n| **Archived** | Return records flagged as archived. | ```searchCriteria: [\"Archived\"]``` |\r\n\r\n### SortBy Options:\r\n| Parameter | Example |\r\n| ------ | ------ |\r\n| **name** | ```sortBy: \"name\"``` |\r\n| **userCount** | ```sortBy: \"userCount\"``` |\r\n| **courseCount** | ```sortBy: \"courseCount\"``` |\r\n| **isActive** | ```sortBy: \"isActive\"``` |",
        "operationId": "ClassYear-GetAll",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllClassYearQuery"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllClassYearQuery"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllClassYearQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClassYearInfoList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClassYearInfoList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/ClassYear/GetById/{classYearId}": {
      "get": {
        "tags": [
          "ClassYear"
        ],
        "summary": "Find class year by Id.",
        "description": "View specific details of a class year based on the supplied id.",
        "operationId": "ClassYear-GetById",
        "parameters": [
          {
            "name": "classYearId",
            "in": "path",
            "description": "Class Year Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClassYearInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClassYearInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/ClassYear/GetByCode/{classYearCode}": {
      "get": {
        "tags": [
          "ClassYear"
        ],
        "summary": "Find class year by code.",
        "description": "View specific details of a class year based on the supplied code.",
        "operationId": "ClassYear-GetByCode",
        "parameters": [
          {
            "name": "classYearCode",
            "in": "path",
            "description": "Class Year Code",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClassYearInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClassYearInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/ClassYear/Create": {
      "post": {
        "tags": [
          "ClassYear"
        ],
        "summary": "Add a new class year.",
        "description": "Create a new class year.",
        "operationId": "ClassYear-Create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateClassYearCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateClassYearCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateClassYearCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClassYearInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClassYearInfo"
                }
              }
            }
          },
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClassYearInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClassYearInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/ClassYear/Update": {
      "put": {
        "tags": [
          "ClassYear"
        ],
        "summary": "Update a class year.",
        "description": "Update information of an existing class year. The request allows multiple updating of class years.",
        "operationId": "ClassYear-Update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateClassYearCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateClassYearCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateClassYearCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClassYearInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClassYearInfo"
                }
              }
            }
          },
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClassYearInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClassYearInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/ClassYear/Delete": {
      "delete": {
        "tags": [
          "ClassYear"
        ],
        "summary": "Delete class years.",
        "description": "Delete a class years based on the provided class year Id.",
        "operationId": "ClassYear-Delete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteClassYearCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteClassYearCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteClassYearCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ClassYearInfo"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ClassYearInfo"
                  }
                }
              }
            }
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/Competency/GetAll": {
      "post": {
        "tags": [
          "Competency"
        ],
        "summary": "List competencies.",
        "description": "List all available competency.\r\n___\r\n### SearchCriteria Parameters:\r\n| Parameter| Description | Example |\r\n| ------ | ------ |------ |\r\n| **Active** | Return records flagged as active. | ```searchCriteria: [\"Active\"]``` |\r\n| **Archived** | Return records flagged as archived. | ```searchCriteria: [\"Archived\"]``` |\r\n\r\n### SortBy Options:\r\n| Parameter | Example |\r\n| ------ | ------ |\r\n| **name** | ```sortBy: \"name\"``` |\r\n| **location** | ```sortBy: \"location\"``` |\r\n| **sessionCount** | ```sortBy: \"sessionCount\"``` |\r\n| **isActive**  | ```sortBy: \"isActive\"``` |",
        "operationId": "Competency-GetAll",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllCompetenciesQuery"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllCompetenciesQuery"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllCompetenciesQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompetencyInfoList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompetencyInfoList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/Competency/GetById/{competencyId}": {
      "get": {
        "tags": [
          "Competency"
        ],
        "summary": "Find a competency by id.",
        "description": "View specific details of a competency based on the supplied id.",
        "operationId": "Competency-GetById",
        "parameters": [
          {
            "name": "competencyId",
            "in": "path",
            "description": "Competency Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompetencyInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompetencyInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/Competency/GetByCode/{competencyCode}": {
      "get": {
        "tags": [
          "Competency"
        ],
        "summary": "Find competency by code.",
        "description": "View specific details of a competency based on the supplied code.",
        "operationId": "Competency-GetByCode",
        "parameters": [
          {
            "name": "competencyCode",
            "in": "path",
            "description": "Competency Code",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompetencyInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompetencyInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/Competency/Create": {
      "post": {
        "tags": [
          "Competency"
        ],
        "summary": "Add a new competency.",
        "description": "Create a new competency.",
        "operationId": "Competency-Create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCompetencyCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCompetencyCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCompetencyCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompetencyInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompetencyInfo"
                }
              }
            }
          },
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompetencyInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompetencyInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/Competency/Update": {
      "put": {
        "tags": [
          "Competency"
        ],
        "summary": "Update a competency.",
        "description": "Update a competency based on the specified Id.",
        "operationId": "Competency-Update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCompetencyCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCompetencyCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCompetencyCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompetencyInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompetencyInfo"
                }
              }
            }
          },
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompetencyInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompetencyInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/Competency/Delete": {
      "delete": {
        "tags": [
          "Competency"
        ],
        "summary": "Delete competencies.",
        "description": "Delete competencies based on the specified Ids. Returns a list of invalid records for deletion.",
        "operationId": "Competency-Delete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteCompetencyCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteCompetencyCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteCompetencyCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CompetencyInfo"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CompetencyInfo"
                  }
                }
              }
            }
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Core/Compliance/GetStatuses": {
      "get": {
        "tags": [
          "Compliance"
        ],
        "summary": "List compliance statuses",
        "description": "Get list of all compliance statuses.",
        "operationId": "Compliance-GetStatuses",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ComplianceStatusInfo"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ComplianceStatusInfo"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Core/Compliance/Get": {
      "post": {
        "tags": [
          "Compliance"
        ],
        "summary": "Get a compliance report of user",
        "description": "View a compliance report of a specific license of user based on the supplied id.",
        "operationId": "Compliance-Get",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetUserLicenseComplianceReportQuery"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetUserLicenseComplianceReportQuery"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetUserLicenseComplianceReportQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserLicenseComplianceInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserLicenseComplianceInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Core/Compliance/GetAll": {
      "post": {
        "tags": [
          "Compliance"
        ],
        "summary": "List compliance reports of users",
        "description": "List all compliance report of users within the firm based on the given parameters.\r\n___\r\n\r\n### FilterBy Parameters:\r\n| Parameter| Description | Example |\r\n| ------ | ------ |------ |\r\n| **Keyword** | Search for the keyword in LastName, FirstName, Middlename, and Login Id fields. | ```filterBy: [\"keyword[contains]:jane\"]``` |\r\n| **LastName** | Search by Lastname. | ```filterBy: [\"lastName[contains]:Smith\"]``` |\r\n| **FirstName** | Search by Firstname. | ```filterBy: [\"firstName[contains]:Jane\"]``` |\r\n| **Email** | Search by Email. | ```filterBy: [\"email[contains]:j.smith@example.net\"]``` |\r\n\r\n### SearchCriteria Parameters:\r\n| Parameter| Description | Example |\r\n| ------ | ------ |------ |\r\n| **License** | Search by License Ids. | ```searchCriteria: [\"UserLicense: 200, 201\"]``` |\r\n| **ComplianceStatus** | Search by Compliance Status Ids.| ```searchCriteria: [\"ComplianceStatus: 1, 2\"]``` |\r\n| **UserStatus** | Search by Status. 1 = Active; 2 = Inactive| ```searchCriteria: [\"UserStatus: 1, 2\"]``` |\r\n| **UserClassYear** | Search by User Class Year Ids. | ```searchCriteria: [\"UserClassYear: 1\"]``` |\r\n| **UserGroup** | Search by User Group Ids. | ```searchCriteria: [\"UserGroup: 1\"]``` |\r\n| **UserDepartment** | Search by User Department Ids. | ```searchCriteria: [\"UserDepartment: 2\"]``` |\r\n| **UserLevel** | Search by User Level Ids. | ```searchCriteria: [\"UserLevel: 3\"]``` |\r\n| **UserLocation** | Search by User Location Ids. | ```searchCriteria: [\"UserLocation: 3\"]``` |\r\n| **UserPosition** | Search by User Position Ids. | ```searchCriteria: [\"UserPosition: 3\"]``` |\r\n| **UserPracticeArea** | Search by User Practice Area Ids. | ```searchCriteria: [\"UserPracticeArea: 1,2\"]``` |\r\n\r\n### SortBy Options:\r\n| Parameter | Example |\r\n| ------ | ------ |\r\n| **lastName** | ```sortBy: \"lastName\"``` |\r\n| **firstName** | ```sortBy: \"firstName\"``` |",
        "operationId": "Compliance-GetAll",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllUsersWithLicensesCurrentPeriodQuery"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllUsersWithLicensesCurrentPeriodQuery"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllUsersWithLicensesCurrentPeriodQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComplianceLicenseeInfoList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComplianceLicenseeInfoList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Core/Compliance/GetStatistics": {
      "post": {
        "tags": [
          "Compliance"
        ],
        "summary": "Get compliance statistics",
        "description": "Get the statistics of all licenses in the firm, the next reporting date, and the number of users for each compliance status.\r\n___\r\n\r\n### FilterBy Parameters:\r\n| Parameter| Description | Example |\r\n| ------ | ------ |------ |\r\n| **LicenseName** | Search by LicenseName. | ```filterBy: [\"licenseName[contains]:New York\"]``` |",
        "operationId": "Compliance-GetStatistics",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetComplianceStatisticsQuery"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetComplianceStatisticsQuery"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetComplianceStatisticsQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComplianceStatisticsInfoList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComplianceStatisticsInfoList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/Country/GetAll": {
      "get": {
        "tags": [
          "Country"
        ],
        "summary": "List all Countries.",
        "description": "List all available countries within the firm.",
        "operationId": "Country-GetAll",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CountryInfoList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CountryInfoList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/Country/GetById/{countryId}": {
      "get": {
        "tags": [
          "Country"
        ],
        "summary": "Find country by Id.",
        "description": "View a specific details of a country based on the supplied id.",
        "operationId": "Country-GetById",
        "parameters": [
          {
            "name": "CountryId",
            "in": "path",
            "description": "Country Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CountryInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CountryInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/County/GetAll": {
      "get": {
        "tags": [
          "County"
        ],
        "summary": "List all Counties.",
        "description": "List all available counties within the firm.",
        "operationId": "County-GetAll",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CountyInfoList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CountyInfoList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Core/Course/GetAll": {
      "post": {
        "tags": [
          "Course"
        ],
        "summary": "List courses.",
        "description": "List all courses based on the given filters.\r\n___\r\n\r\n### FilterBy Parameters:\r\n| Parameter| Description | Example |\r\n| ------ | ------ |------ |\r\n| **Title** | Search by Course Title. | ```filterBy: [\"Title[contains]:Ethics\"]``` |\r\n| **Description** | Search by Course Description. | ```filterBy: [\"Description[contains]:Intermediate\"]``` |\r\n\r\n\r\n### SearchCriteria Parameters:\r\n| Parameter| Description | Example |\r\n| ------ | ------ |------ |\r\n| **ProviderIds** | Search by Provider | ```searchCriteria: [\"ProviderIds: 1, 2\"]``` |\r\n| **SessionFormat** | Search by Session Format| ```searchCriteria: [\"SessionFormat: 1, 2\"]``` |\r\n| **ExcludeArchived** | Do not included archived courses| ```searchCriteria: [\"ExcludeArchived\"]``` |\r\n| **ExcludeActive** | Do not included active courses| ```searchCriteria: [\"ExcludeActive\"]``` |\r\n| **SessionInstructor** | Search by instructor name| ```searchCriteria: [\"SessionInstructor:Joe\"]``` |\r\n| **License** | Search by License| ```searchCriteria: [\"License:14\"]``` |\r\n| **CourseClassYear** | Search by Class Year| ```searchCriteria: [\"CourseClassYear: 1, 2\"]``` |\r\n| **CourseCompetency** | Search by Competency| ```searchCriteria: [\"CourseCompetency: 1, 2\"]``` |\r\n| **CourseDepartment** | Search by Department| ```searchCriteria: [\"CourseDepartment: 1, 2\"]``` |\r\n| **CourseLevel** | Search by Level| ```searchCriteria: [\"CourseLevel: 1, 2\"]``` |\r\n| **CoursePracticeArea** | Search by Practice Area| ```searchCriteria: [\"CoursePracticeArea: 1, 2\"]``` |\r\n| **CourseTag** | Search by Tag| ```searchCriteria: [\"CourseTag: 1, 2\"]``` |\r\n\r\n\r\n### SortBy Options:\r\n| Parameter | Example |\r\n| ------ | ------ |\r\n| **title** | ```sortBy: \"title\"``` |\r\n| **providerName** | ```sortBy: \"providerName\"``` |",
        "operationId": "Course-GetAll",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllCoursesV2Query"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllCoursesV2Query"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllCoursesV2Query"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CourseInfoList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CourseInfoList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Core/Course/GetById/{courseId}": {
      "get": {
        "tags": [
          "Course"
        ],
        "summary": "Find course by Id.",
        "description": "View course information based on the supplied id.",
        "operationId": "Course-GetById",
        "parameters": [
          {
            "name": "courseId",
            "in": "path",
            "description": "Course Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CourseInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CourseInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Core/Course/GetByCode/{courseCode}": {
      "get": {
        "tags": [
          "Course"
        ],
        "summary": "Find course by code.",
        "description": "View course information based on the supplied course code.",
        "operationId": "Course-GetByCode",
        "parameters": [
          {
            "name": "courseCode",
            "in": "path",
            "description": "Course Code",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CourseInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CourseInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Core/Course/GetSessions": {
      "post": {
        "tags": [
          "Course"
        ],
        "summary": "List all sessions by course Id.",
        "description": "List all sessions associated to the course.\r\n___\r\n\r\n### SearchCriteria Parameters:\r\n| Parameter| Description | Example |\r\n| ------ | ------ |------ |\r\n| **PreviousSessionsOnly** | Retrieve sessions prior to today. | ```searchCriteria: [\"PreviousSessionsOnly\"]``` |\r\n| **UpcomingSessionsOnly** | Retrieve upcoming sessions| ```searchCriteria: [\"UpcomingSessionsOnly\"]``` |\r\n\r\n### SortBy Options:\r\n| Parameter | Example |\r\n| ------ | ------ |\r\n| **title** | ```sortBy: \"title\"``` |\r\n| **startDate** | ```sortBy: \"startDate\"``` |\r\n| **endDate** | ```sortBy: \"endDate\"``` |\r\n| **courseFormat** | ```sortBy: \"courseFormat\"``` |",
        "operationId": "Course-GetSessions",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllSessionByCourseIdQuery"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllSessionByCourseIdQuery"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllSessionByCourseIdQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionInfoList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionInfoList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Core/Course/Create": {
      "post": {
        "tags": [
          "Course"
        ],
        "summary": "Add a new course.",
        "description": "Create a new course.",
        "operationId": "Course-Create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCourseCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCourseCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCourseCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CourseInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CourseInfo"
                }
              }
            }
          },
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CourseInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CourseInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Core/Course/Update": {
      "put": {
        "tags": [
          "Course"
        ],
        "summary": "Update a course.",
        "description": "Update an existing course.",
        "operationId": "Course-Update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCourseCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCourseCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCourseCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CourseInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CourseInfo"
                }
              }
            }
          },
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CourseInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CourseInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Core/Course/Delete": {
      "delete": {
        "tags": [
          "Course"
        ],
        "summary": "Delete Courses.",
        "description": "Delete courses based on the supplied course Ids.",
        "operationId": "Course-Delete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteCourseCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteCourseCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteCourseCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CourseDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CourseDto"
                  }
                }
              }
            }
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/CourseFormat/GetAll": {
      "get": {
        "tags": [
          "CourseFormat"
        ],
        "summary": "List all Course Formats.",
        "description": "List all available course formats within the firm.",
        "operationId": "CourseFormat-GetAll",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CourseFormatInfoList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CourseFormatInfoList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/CourseFormat/GetById/{courseFormatId}": {
      "get": {
        "tags": [
          "CourseFormat"
        ],
        "summary": "Find course format by Id.",
        "description": "View a specific details of a course format based on supplied id.",
        "operationId": "CourseFormat-GetById",
        "parameters": [
          {
            "name": "CourseFormatId",
            "in": "path",
            "description": "Course Format Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CourseFormatInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CourseFormatInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/Department/GetAll": {
      "post": {
        "tags": [
          "Department"
        ],
        "summary": "List Departments",
        "description": "List all available departments within the firm based on the given parameters.\r\n___\r\n### SearchCriteria Parameters:\r\n| Parameter| Description | Example |\r\n| ------ | ------ |------ |\r\n| **Active** | Return records flagged as active. | ```searchCriteria: [\"Active\"]``` |\r\n| **Archived** | Return records flagged as archived. | ```searchCriteria: [\"Archived\"]``` |\r\n\r\n### SortBy Options:\r\n| Parameter | Example |\r\n| ------ | ------ |\r\n| **name** | ```sortBy: \"name\"``` |\r\n| **userCount** | ```sortBy: \"userCount\"``` |\r\n| **courseCount** | ```sortBy: \"courseCount\"``` |\r\n| **isActive**  | ```sortBy: \"isActive\"``` |",
        "operationId": "Department-GetAll",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllDepartmentQuery"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllDepartmentQuery"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllDepartmentQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DepartmentInfoList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DepartmentInfoList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/Department/GetById/{departmentId}": {
      "get": {
        "tags": [
          "Department"
        ],
        "summary": "Find department by Id.",
        "description": "View specific details of a department based on the supplied id.",
        "operationId": "Department-GetById",
        "parameters": [
          {
            "name": "DepartmentId",
            "in": "path",
            "description": "Department Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DepartmentInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DepartmentInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/Department/GetByCode/{departmentCode}": {
      "get": {
        "tags": [
          "Department"
        ],
        "summary": "Find department by code.",
        "description": "View specific details of a department based on the supplied code.",
        "operationId": "Department-GetByCode",
        "parameters": [
          {
            "name": "DepartmentCode",
            "in": "path",
            "description": "Department code",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DepartmentInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DepartmentInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/Department/Create": {
      "post": {
        "tags": [
          "Department"
        ],
        "summary": "Add a new department.",
        "description": "Create a new department.",
        "operationId": "Department-Create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDepartmentCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDepartmentCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDepartmentCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DepartmentInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DepartmentInfo"
                }
              }
            }
          },
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DepartmentInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DepartmentInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/Department/Update": {
      "put": {
        "tags": [
          "Department"
        ],
        "summary": "Update a department.",
        "description": "Update an existing department based on the specified Id.",
        "operationId": "Department-Update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDepartmentCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDepartmentCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDepartmentCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DepartmentInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DepartmentInfo"
                }
              }
            }
          },
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DepartmentInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DepartmentInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/Department/Delete": {
      "delete": {
        "tags": [
          "Department"
        ],
        "summary": "Delete departments.",
        "description": "Delete departments based on the specified Ids. Returns a list of invalid records for deletion.",
        "operationId": "Department-Delete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteDepartmentCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteDepartmentCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteDepartmentCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DepartmentInfo"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DepartmentInfo"
                  }
                }
              }
            }
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/Ethnicity/GetAll": {
      "post": {
        "tags": [
          "Ethnicity"
        ],
        "summary": "List Ethnicities.",
        "description": "List available ethnicities within the firm based on the given parameters.\r\n___\r\n### SearchCriteria Parameters:\r\n| Parameter| Description | Example |\r\n| ------ | ------ |------ |\r\n| **Active** | Return records flagged as active. | ```searchCriteria: [\"Active\"]``` |\r\n| **Archived** | Return records flagged as archived. | ```searchCriteria: [\"Archived\"]``` |\r\n\r\n### SortBy Options:\r\n| Parameter | Example |\r\n| ------ | ------ |\r\n| **name** | ```sortBy: \"name\"``` |\r\n| **userCount** | ```sortBy: \"userCount\"``` |\r\n| **isActive**  | ```sortBy: \"isActive\"``` |",
        "operationId": "Ethnicity-GetAll",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllEthnicitiesQuery"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllEthnicitiesQuery"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllEthnicitiesQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EthnicityInfoList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EthnicityInfoList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/Ethnicity/GetById/{ethnicityId}": {
      "get": {
        "tags": [
          "Ethnicity"
        ],
        "summary": "Find ethnicty by Id.",
        "description": "View specific details of a ethnicity based on the supplied id.",
        "operationId": "Ethnicity-GetById",
        "parameters": [
          {
            "name": "EthnicityId",
            "in": "path",
            "description": "Ethnicity Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EthnicityInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EthnicityInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/Ethnicity/GetByCode/{ethnicityCode}": {
      "get": {
        "tags": [
          "Ethnicity"
        ],
        "summary": "Find ethnicty by code.",
        "description": "View specific details of a ethnicity based on the supplied code.",
        "operationId": "Ethnicity-GetByCode",
        "parameters": [
          {
            "name": "EthnicityCode",
            "in": "path",
            "description": "Ethnicity code",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EthnicityInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EthnicityInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/Ethnicity/Create": {
      "post": {
        "tags": [
          "Ethnicity"
        ],
        "summary": "Add a new ethnicity.",
        "description": "Create a new ethnicity.",
        "operationId": "Ethnicity-Create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEthnicityCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEthnicityCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEthnicityCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EthnicityInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EthnicityInfo"
                }
              }
            }
          },
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EthnicityInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EthnicityInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/Ethnicity/Update": {
      "put": {
        "tags": [
          "Ethnicity"
        ],
        "summary": "Update an etnicity.",
        "description": "Update a ethnicity based on the specified Id.",
        "operationId": "Ethnicity-Update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEthnicityCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEthnicityCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEthnicityCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EthnicityInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EthnicityInfo"
                }
              }
            }
          },
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EthnicityInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EthnicityInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/Ethnicity/Delete": {
      "delete": {
        "tags": [
          "Ethnicity"
        ],
        "summary": "Delete ethnicities.",
        "description": "Delete ethnicities based on the provided Ethnicity Ids. Returns a list of invalid records for deletion.",
        "operationId": "Ethnicity-Delete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteEthnicityCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteEthnicityCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteEthnicityCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EthnicityInfo"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EthnicityInfo"
                  }
                }
              }
            }
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/Gender/GetAll": {
      "post": {
        "tags": [
          "Gender"
        ],
        "summary": "List Genders.",
        "description": "List available genders within the firm basd on the given parameters.\r\n___\r\n### SearchCriteria Parameters:\r\n| Parameter| Description | Example |\r\n| ------ | ------ |------ |\r\n| **Active** | Return records flagged as active. | ```searchCriteria: [\"Active\"]``` |\r\n| **Archived** | Return records flagged as archived. | ```searchCriteria: [\"Archived\"]``` |\r\n\r\n### SortBy Options:\r\n| Parameter | Example |\r\n| ------ | ------ |\r\n| **name** | ```sortBy: \"name\"``` |\r\n| **userCount** | ```sortBy: \"userCount\"``` |\r\n| **courseCount** | ```sortBy: \"courseCount\"``` |\r\n| **isActive**  | ```sortBy: \"isActive\"``` |",
        "operationId": "Gender-GetAll",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllGenderQuery"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllGenderQuery"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllGenderQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenderInfoList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenderInfoList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/Gender/GetById/{genderId}": {
      "get": {
        "tags": [
          "Gender"
        ],
        "summary": "Find gender by Id.",
        "description": "View specific details of a gender based on the supplied id.",
        "operationId": "Gender-GetById",
        "parameters": [
          {
            "name": "GenderId",
            "in": "path",
            "description": "Gender Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenderInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenderInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/Gender/GetByCode/{genderCode}": {
      "get": {
        "tags": [
          "Gender"
        ],
        "summary": "Find gender by code.",
        "description": "View specific details of a gender based on the supplied code.",
        "operationId": "Gender-GetByCode",
        "parameters": [
          {
            "name": "GenderCode",
            "in": "path",
            "description": "Gender Code",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenderInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenderInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/Gender/Create": {
      "post": {
        "tags": [
          "Gender"
        ],
        "summary": "Add a new gender.",
        "description": "Create a new gender.",
        "operationId": "Gender-Create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateGenderCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateGenderCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateGenderCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenderInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenderInfo"
                }
              }
            }
          },
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenderInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenderInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/Gender/Update": {
      "put": {
        "tags": [
          "Gender"
        ],
        "summary": "Update a gender.",
        "description": "Update a gender based on the specified Id.",
        "operationId": "Gender-Update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateGenderCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateGenderCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateGenderCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenderInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenderInfo"
                }
              }
            }
          },
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenderInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenderInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/Gender/Delete": {
      "delete": {
        "tags": [
          "Gender"
        ],
        "summary": "Delete genders.",
        "description": "Delete genders based on the specified Ids. Returns a list of invalid records for deletion.",
        "operationId": "Gender-Delete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteGenderCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteGenderCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteGenderCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GenderInfo"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GenderInfo"
                  }
                }
              }
            }
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/Group/GetAll": {
      "post": {
        "tags": [
          "Group"
        ],
        "summary": "List groups.",
        "description": "List all available groups within the firm.\r\n___\r\n### SearchCriteria Parameters:\r\n| Parameter| Description | Example |\r\n| ------ | ------ |------ |\r\n| **Active** | Return records flagged as active. | ```searchCriteria: [\"Active\"]``` |\r\n| **Archived** | Return records flagged as archived. | ```searchCriteria: [\"Archived\"]``` |\r\n\r\n### SortBy Options:\r\n| Parameter | Example |\r\n| ------ | ------ |\r\n| **name** | ```sortBy: \"name\"``` |\r\n| **userCount** | ```sortBy: \"userCount\"``` |\r\n| **isActive**  | ```sortBy: \"isActive\"``` |",
        "operationId": "Group-GetAll",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllSecurityGroupsQuery"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllSecurityGroupsQuery"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllSecurityGroupsQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityGroupInfoList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityGroupInfoList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/Group/GetById/{groupId}": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "Find a group.",
        "description": "View specific details of a group based on the supplied id.",
        "operationId": "Group-GetById",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "Group Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityGroupInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityGroupInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/Group/Create": {
      "post": {
        "tags": [
          "Group"
        ],
        "summary": "Create a group.",
        "description": "Create a group.",
        "operationId": "Group-Create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateGroupCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateGroupCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateGroupCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityGroupInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityGroupInfo"
                }
              }
            }
          },
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityGroupInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityGroupInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/Group/Update": {
      "put": {
        "tags": [
          "Group"
        ],
        "summary": "Update a group.",
        "description": "Update a group based on a specified Id.",
        "operationId": "Group-Update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateGroupCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateGroupCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateGroupCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityGroupInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityGroupInfo"
                }
              }
            }
          },
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityGroupInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityGroupInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/Group/Delete": {
      "delete": {
        "tags": [
          "Group"
        ],
        "summary": "Delete a group.",
        "description": "Delete a group based on the specified Id.",
        "operationId": "Group-Delete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteGroupCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteGroupCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteGroupCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/Group/AssignUserToGroup": {
      "post": {
        "tags": [
          "Group"
        ],
        "summary": "Add users to a group.",
        "description": "Add users to a group based on user ids and a group id.",
        "operationId": "Group-AssignUserToGroup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignUserToGroupCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignUserToGroupCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AssignUserToGroupCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityGroupInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityGroupInfo"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/Group/UnassignUserFromGroup": {
      "delete": {
        "tags": [
          "Group"
        ],
        "summary": "Remove users from a group.",
        "description": "Remove users from a group based on user ids and a group id.",
        "operationId": "Group-UnassignUserFromGroup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnassignUserFromGroupCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UnassignUserFromGroupCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UnassignUserFromGroupCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityGroupInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityGroupInfo"
                }
              }
            }
          }
        }
      }
    },
    "/api/Core/LearningPlan/GetAll": {
      "post": {
        "tags": [
          "LearningPlan"
        ],
        "summary": "List all learning plans.",
        "description": "List all available learning plans within the firm.\r\n___\r\n\r\n### FilterBy Parameters:\r\n| Parameter| Description | Example |\r\n| ------ | ------ |------ |\r\n| **Keyword** | Search for the keyword in Title. | ```filterBy: [\"keyword[contains]:Learning\"]``` |\r\n| **Title** | Search by Title. | ```filterBy: [\"Title[contains]:Plans\"]``` |\r\n\r\n### SearchCriteria Parameters:\r\n| Parameter| Description | Example |\r\n| ------ | ------ |------ |\r\n| **LearningPlanType** | Search by Status. 1 = Active; 2 = Inactive| ```searchCriteria: [\"UserStatus: 1, 2\"]``` |\r\n| **LearningPlanCompetency** | Search by Competency Id. Can be set to include all ids(and) or at least match one(or). | ```searchCriteria: [\"LearningPlanCompetency[or]: 1, 3\"]``` |\r\n| **LearningPlanTag** | Search by Tag Id. Can be set to include all ids(and) or at least match one(or) | ```searchCriteria: [\"LearningPlanTag[and]: 1, 3\"]``` |\r\n| **Active** | Return records flagged as active. | ```searchCriteria: [\"Active\"]``` |\r\n| **Archived** | Return records flagged as archived. | ```searchCriteria: [\"Archived\"]``` |\r\n| **SelfRegistration** | Return records with self registration enabled. | ```searchCriteria: [\"SelfRegistration\"]``` |\r\n| **ExcludeSelfRegistration** | Return records with self registration disabled. | ```searchCriteria: [\"ExcludeSelfRegistration\"]``` |\r\n\r\n\r\n### SortBy Options:\r\n| Parameter | Example |\r\n| ------ | ------ |\r\n| **title** | ```sortBy: \"title\"``` |\r\n| **startDate** | ```sortBy: \"startDate\"``` |\r\n| **endDate** | ```sortBy: \"endDate\"``` |\r\n| **createdDate** | ```sortBy: \"createdDate\"``` |\r\n| **lastModifiedDate** | ```sortBy: \"lastModifiedDate\"``` |",
        "operationId": "LearningPlan-GetAll",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllLearningPlansQuery"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllLearningPlansQuery"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllLearningPlansQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LearningPlanInfoList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LearningPlanInfoList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Core/LearningPlan/GetById/{learningPlanId}": {
      "get": {
        "tags": [
          "LearningPlan"
        ],
        "summary": "Find learning plan by id.",
        "description": "View specific details of a learning plan based on supplied id.",
        "operationId": "LearningPlan-GetById",
        "parameters": [
          {
            "name": "learningPlanId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LearningPlanInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LearningPlanInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Core/LearningPlan/Create": {
      "post": {
        "tags": [
          "LearningPlan"
        ],
        "summary": "Add a new learning plan.",
        "description": "Create a new learning plan.",
        "operationId": "LearningPlan-Create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLearningPlanCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLearningPlanCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLearningPlanCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LearningPlanInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LearningPlanInfo"
                }
              }
            }
          },
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LearningPlanInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LearningPlanInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Core/LearningPlan/Update": {
      "put": {
        "tags": [
          "LearningPlan"
        ],
        "summary": "Update a learning plan.",
        "description": "Update a learning plan based on the specified Id.",
        "operationId": "LearningPlan-Update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateLearningPlanCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateLearningPlanCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateLearningPlanCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateLearningPlanInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateLearningPlanInfo"
                }
              }
            }
          },
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateLearningPlanInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateLearningPlanInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Core/LearningPlan/Delete": {
      "delete": {
        "tags": [
          "LearningPlan"
        ],
        "summary": "Delete learning plans.",
        "description": "Delete learning plans based on the specified Ids.",
        "operationId": "LearningPlan-Delete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteLearningPlanCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteLearningPlanCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteLearningPlanCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/Level/GetAll": {
      "post": {
        "tags": [
          "Level"
        ],
        "summary": "List Levels.",
        "description": "List all available levels within the firm.\r\n___\r\n### SearchCriteria Parameters:\r\n| Parameter| Description | Example |\r\n| ------ | ------ |------ |\r\n| **Active** | Return records flagged as active. | ```searchCriteria: [\"Active\"]``` |\r\n| **Archived** | Return records flagged as archived. | ```searchCriteria: [\"Archived\"]``` |\r\n\r\n### SortBy Options:\r\n| Parameter | Example |\r\n| ------ | ------ |\r\n| **name** | ```sortBy: \"name\"``` |\r\n| **userCount** | ```sortBy: \"userCount\"``` |\r\n| **courseCount** | ```sortBy: \"courseCount\"``` |\r\n| **isActive**  | ```sortBy: \"isActive\"``` |",
        "operationId": "Level-GetAll",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllLevelsQuery"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllLevelsQuery"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllLevelsQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LevelInfoList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LevelInfoList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/Level/GetById/{levelId}": {
      "get": {
        "tags": [
          "Level"
        ],
        "summary": "Find level by Id.",
        "description": "View specific details of a level based on supplied id.",
        "operationId": "Level-GetById",
        "parameters": [
          {
            "name": "LevelId",
            "in": "path",
            "description": "Level Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LevelInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LevelInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/Level/GetByCode/{levelCode}": {
      "get": {
        "tags": [
          "Level"
        ],
        "summary": "Find level by code.",
        "description": "View specific details of a level based on the supplied code.",
        "operationId": "Level-GetByCode",
        "parameters": [
          {
            "name": "LevelCode",
            "in": "path",
            "description": "Level code",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LevelInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LevelInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/Level/Create": {
      "post": {
        "tags": [
          "Level"
        ],
        "summary": "Add a new level.",
        "description": "Create a new level.",
        "operationId": "Level-Create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLevelCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLevelCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLevelCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LevelInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LevelInfo"
                }
              }
            }
          },
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LevelInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LevelInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/Level/Update": {
      "put": {
        "tags": [
          "Level"
        ],
        "summary": "Update a level.",
        "description": "Update a level based on the specified Id.",
        "operationId": "Level-Update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateLevelCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateLevelCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateLevelCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LevelInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LevelInfo"
                }
              }
            }
          },
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LevelInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LevelInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/Level/Delete": {
      "delete": {
        "tags": [
          "Level"
        ],
        "summary": "Delete levels.",
        "description": "Delete levels based on the specified Ids. Returns a list of invalid records for deletion.",
        "operationId": "Level-Delete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteLevelCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteLevelCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteLevelCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LevelInfo"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LevelInfo"
                  }
                }
              }
            }
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/License/GetAll": {
      "get": {
        "tags": [
          "License"
        ],
        "summary": "List all Licenses.",
        "description": "List all enabled licenses within the firm.",
        "operationId": "License-GetAll",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseInfoList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseInfoList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/License/GetById/{licenseId}": {
      "get": {
        "tags": [
          "License"
        ],
        "summary": "Find a license by Id.",
        "description": "View a specific details of a license based on supplied id.",
        "operationId": "License-GetById",
        "parameters": [
          {
            "name": "LicenseId",
            "in": "path",
            "description": "License Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/Location/GetAll": {
      "post": {
        "tags": [
          "Location"
        ],
        "summary": "List locations.",
        "description": "List all availabe locations within the firm.\r\n___\r\n### SearchCriteria Parameters:\r\n| Parameter| Description | Example |\r\n| ------ | ------ |------ |\r\n| **Active** | Return records flagged as active. | ```searchCriteria: [\"Active\"]``` |\r\n| **Archived** | Return records flagged as archived. | ```searchCriteria: [\"Archived\"]``` |\r\n\r\n### SortBy Options:\r\n| Parameter | Example |\r\n| ------ | ------ |\r\n| **name** | ```sortBy: \"name\"``` |\r\n| **city** | ```sortBy: \"city\"``` |\r\n| **isFirmOffice** | ```sortBy: \"isFirmOffice\"``` |\r\n| **stateId** | ```sortBy: \"stateId\"``` |\r\n| **countryId** | ```sortBy: \"countryId\"``` |\r\n| **isActive** | ```sortBy: \"isActive\"``` |\r\n| **userCount** | ```sortBy: \"userCount\"``` |\r\n| **sessionCount** | ```sortBy: \"sessionCount\"``` |",
        "operationId": "Location-GetAll",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllLocationQuery"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllLocationQuery"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllLocationQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationInfoList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationInfoList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/Location/GetById/{locationId}": {
      "get": {
        "tags": [
          "Location"
        ],
        "summary": "Find location by Id.",
        "description": "View specific details of a location based on the supplied id.",
        "operationId": "Location-GetById",
        "parameters": [
          {
            "name": "locationId",
            "in": "path",
            "description": "Location Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/Location/GetByCode/{locationCode}": {
      "get": {
        "tags": [
          "Location"
        ],
        "summary": "Find location by code.",
        "description": "View specific details of a location based on the supplied code.",
        "operationId": "Location-GetByCode",
        "parameters": [
          {
            "name": "locationCode",
            "in": "path",
            "description": "Location Code",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/Location/Create": {
      "post": {
        "tags": [
          "Location"
        ],
        "summary": "Add a new location.",
        "description": "Create a new location.",
        "operationId": "Location-Create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLocationCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLocationCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLocationCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationInfo"
                }
              }
            }
          },
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/Location/Update": {
      "put": {
        "tags": [
          "Location"
        ],
        "summary": "Update a location.",
        "description": "Update information of an existing location.",
        "operationId": "Location-Update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateLocationCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateLocationCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateLocationCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationInfo"
                }
              }
            }
          },
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/Location/Delete": {
      "delete": {
        "tags": [
          "Location"
        ],
        "summary": "Delete locations.",
        "description": "Delete locations based on the provided Location Ids.",
        "operationId": "Location-Delete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteLocationCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteLocationCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteLocationCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LocationInfo"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LocationInfo"
                  }
                }
              }
            }
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Core/Participant/GetAll": {
      "post": {
        "tags": [
          "Participant"
        ],
        "summary": "List participants by session Id.",
        "description": "List all participants of a session based on the supplied session Id and filters.\r\n___\r\n\r\n### FilterBy Parameters:\r\n| Parameter| Description | Example |\r\n| ------ | ------ |------ |\r\n| **firstName** | Search by first name. | ```filterBy: [\"firstName[contains]:Jane\"]``` |\r\n| **lastName** | Search by last name. | ```filterBy: [\"lastName[contains]:Smith\"]``` |\r\n| **email** | Search by email. | ```filterBy: [\"email[contains]:jsmith@example.com\"]``` |\r\n\r\n### SearchCriteria Parameters:\r\n| Parameter| Description | Example |\r\n| ------ | ------ |------ |\r\n| **Registered** | Include all registered participants. | ```searchCriteria: [\"Registered\"]``` |\r\n| **Validated** | Include all validated participants. | ```searchCriteria: [\"Validated\"]``` |\r\n| **Tentative** | Include all tentative participants. | ```searchCriteria: [\"Tentative\"]``` |\r\n| **Pending** | Include all pending participants. | ```searchCriteria: [\"Pending\"]``` |\r\n| **InProgress** | Include all in progress participants. | ```searchCriteria: [\"InProgress\"]``` |\r\n| **Disqualified** | Include all disqualified participants. | ```searchCriteria: [\"Disqualified\"]``` |\r\n\r\n### SortBy Options:\r\n| Parameter | Example |\r\n| ------ | ------ |\r\n| **lastName** | ```sortBy: \"lastName\"``` |\r\n| **firstName** | ```sortBy: \"firstName\"``` |\r\n| **email** | ```sortBy: \"email\"``` |\r\n",
        "operationId": "Participant-GetAll",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllSessionParticipantsQuery"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllSessionParticipantsQuery"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllSessionParticipantsQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionParticipantInfoList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionParticipantInfoList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Core/Participant/Register": {
      "post": {
        "tags": [
          "Participant"
        ],
        "summary": "Register\\Validate a participant to a session.",
        "description": "Register and\\or validate the user to a session. \r\n\r\n> 1. If the completion date is provided (not null), the participant will be automatically validated to the course. This will also apply the credits.\r\n> 2. You can use the UserId, PersonnelId or Email to identify the user. Only one is required for the request. ",
        "operationId": "Participant-Register",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterParticipantCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterParticipantCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterParticipantCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SessionParticipantInfo"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SessionParticipantInfo"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Core/Participant/Update": {
      "put": {
        "tags": [
          "Participant"
        ],
        "summary": "Update the registration status and credits of the participant.",
        "description": "Update participant's information to a session. \r\n\r\n> 1. If the completion date is provided (not null), the participant will be automatically validated to the course. This will also apply the credits.\r\n> 2. You can use the UserId, PersonnelId or Email to identify the user. Only one is required for the request. ",
        "operationId": "Participant-Update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateParticipantCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateParticipantCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateParticipantCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionParticipantInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionParticipantInfo"
                }
              }
            }
          },
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionParticipantInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionParticipantInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Core/Participant/Delete": {
      "delete": {
        "tags": [
          "Participant"
        ],
        "summary": "Delete a participant from a session.",
        "description": "",
        "operationId": "Participant-Delete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteSessionParticipantCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteSessionParticipantCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteSessionParticipantCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Core/Participant/UploadCertificate": {
      "post": {
        "tags": [
          "Participant"
        ],
        "summary": "Associate a certificate to a participant record.",
        "description": "",
        "operationId": "Participant-UploadCertificate",
        "parameters": [
          {
            "name": "sessionParticipantId",
            "in": "query",
            "description": "Session Participant Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  }
                }
              },
              "encoding": {
                "files": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SessionParticipantCertificateDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SessionParticipantCertificateDto"
                  }
                }
              }
            }
          },
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SessionParticipantCertificateDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SessionParticipantCertificateDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Core/Participant/GetParticipantEvaluations": {
      "post": {
        "tags": [
          "Participant"
        ],
        "summary": "List all participants and their evaluation status.",
        "description": "",
        "operationId": "Participant-GetParticipantEvaluations",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllSessionEvaluationsQuery"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllSessionEvaluationsQuery"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllSessionEvaluationsQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionEvaluationInfoList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionEvaluationInfoList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Core/Participant/UpdateParticipantEvaluation": {
      "put": {
        "tags": [
          "Participant"
        ],
        "summary": "Update evaluation status of validated participants.",
        "description": "",
        "operationId": "Participant-UpdateParticipantEvaluation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateParticipantEvaluationCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateParticipantEvaluationCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateParticipantEvaluationCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionEvaluationInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionEvaluationInfo"
                }
              }
            }
          },
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionEvaluationInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionEvaluationInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/Position/GetAll": {
      "post": {
        "tags": [
          "Position"
        ],
        "summary": "List positions.",
        "description": "List availabe locations within the firm based on the given parameters.\r\n___\r\n### SearchCriteria Parameters:\r\n| Parameter| Description | Example |\r\n| ------ | ------ |------ |\r\n| **Active** | Return records flagged as active. | ```searchCriteria: [\"Active\"]``` |\r\n| **Archived** | Return records flagged as archived. | ```searchCriteria: [\"Archived\"]``` |\r\n\r\n### SortBy Options:\r\n| Parameter | Example |\r\n| ------ | ------ |\r\n| **name** | ```sortBy: \"name\"``` |\r\n| **city** | ```sortBy: \"city\"``` |\r\n| **stateId** | ```sortBy: \"stateId\"``` |\r\n| **countryId** | ```sortBy: \"countryId\"``` |\r\n| **isActive** | ```sortBy: \"isActive\"``` |\r\n| **userCount** | ```sortBy: \"userCount\"``` |",
        "operationId": "Position-GetAll",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllPositionsQuery"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllPositionsQuery"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllPositionsQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PositionInfoList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PositionInfoList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/Position/GetById/{positionId}": {
      "get": {
        "tags": [
          "Position"
        ],
        "summary": "Find position by Id.",
        "description": "View specific details of a position based on the supplied id.",
        "operationId": "Position-GetById",
        "parameters": [
          {
            "name": "positionId",
            "in": "path",
            "description": "Position Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PositionInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PositionInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/Position/GetByCode/{positionCode}": {
      "get": {
        "tags": [
          "Position"
        ],
        "summary": "Find position by code.",
        "description": "View specific details of a position based on the supplied code.",
        "operationId": "Position-GetByCode",
        "parameters": [
          {
            "name": "positionCode",
            "in": "path",
            "description": "Position Code",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PositionInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PositionInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/Position/Create": {
      "post": {
        "tags": [
          "Position"
        ],
        "summary": "Add a new position.",
        "description": "Create a new position. The request allows multiple adding of positions.",
        "operationId": "Position-Create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePositionCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePositionCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePositionCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PositionInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PositionInfo"
                }
              }
            }
          },
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PositionInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PositionInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/Position/Update": {
      "put": {
        "tags": [
          "Position"
        ],
        "summary": "Update a position.",
        "description": "Update information of an existing position. The request allows multiple updating of positions.",
        "operationId": "Position-Update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePositionCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePositionCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePositionCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PositionInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PositionInfo"
                }
              }
            }
          },
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PositionInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PositionInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/Position/Delete": {
      "delete": {
        "tags": [
          "Position"
        ],
        "summary": "Delete positions.",
        "description": "Delete a positions based on the provided Position Ids.",
        "operationId": "Position-Delete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeletePositionCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DeletePositionCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeletePositionCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PositionInfo"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PositionInfo"
                  }
                }
              }
            }
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/PracticeArea/GetAll": {
      "post": {
        "tags": [
          "PracticeArea"
        ],
        "summary": "List practice areas.",
        "description": "List all available practice areas within the firm.\r\n___\r\n### SearchCriteria Parameters:\r\n| Parameter| Description | Example |\r\n| ------ | ------ |------ |\r\n| **Active** | Return records flagged as active. | ```searchCriteria: [\"Active\"]``` |\r\n| **Archived** | Return records flagged as archived. | ```searchCriteria: [\"Archived\"]``` |\r\n\r\n### SortBy Options:\r\n| Parameter | Example |\r\n| ------ | ------ |\r\n| **name** | ```sortBy: \"name\"``` |\r\n| **userCount** | ```sortBy: \"userCount\"``` |\r\n| **courseCount** | ```sortBy: \"courseCount\"``` |\r\n| **isActive**  | ```sortBy: \"isActive\"``` |",
        "operationId": "PracticeArea-GetAll",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllPracticeAreasQuery"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllPracticeAreasQuery"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllPracticeAreasQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PracticeAreaInfoList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PracticeAreaInfoList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/PracticeArea/GetById/{practiceAreaId}": {
      "get": {
        "tags": [
          "PracticeArea"
        ],
        "summary": "Find practice are by Id.",
        "description": "View specific details of a practice area based on the supplied id.",
        "operationId": "PracticeArea-GetById",
        "parameters": [
          {
            "name": "PracticeAreaId",
            "in": "path",
            "description": "PracticeArea Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PracticeAreaInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PracticeAreaInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/PracticeArea/GetByCode/{practiceAreaCode}": {
      "get": {
        "tags": [
          "PracticeArea"
        ],
        "summary": "Find practice are by code.",
        "description": "View specific details of a practice area based on the supplied code.",
        "operationId": "PracticeArea-GetByCode",
        "parameters": [
          {
            "name": "PracticeAreaCode",
            "in": "path",
            "description": "PracticeArea code",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PracticeAreaInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PracticeAreaInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/PracticeArea/Create": {
      "post": {
        "tags": [
          "PracticeArea"
        ],
        "summary": "Add a new practice area",
        "description": "Create a new practice area.",
        "operationId": "PracticeArea-Create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePracticeAreaCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePracticeAreaCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePracticeAreaCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PracticeAreaInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PracticeAreaInfo"
                }
              }
            }
          },
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PracticeAreaInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PracticeAreaInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/PracticeArea/Update": {
      "put": {
        "tags": [
          "PracticeArea"
        ],
        "summary": "Update a practice area.",
        "description": "Update a practice area based on the specified Id.",
        "operationId": "PracticeArea-Update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePracticeAreaCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePracticeAreaCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePracticeAreaCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PracticeAreaInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PracticeAreaInfo"
                }
              }
            }
          },
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PracticeAreaInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PracticeAreaInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/PracticeArea/Delete": {
      "delete": {
        "tags": [
          "PracticeArea"
        ],
        "summary": "Delete practice areas.",
        "description": "Delete practice areas based on the specified Ids. Returns a list of invalid records for deletion.",
        "operationId": "PracticeArea-Delete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeletePracticeAreaCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DeletePracticeAreaCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeletePracticeAreaCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PracticeAreaInfo"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PracticeAreaInfo"
                  }
                }
              }
            }
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/Provider/GetAll": {
      "post": {
        "tags": [
          "Provider"
        ],
        "summary": "List providers.",
        "description": "List all available providers within the firm.\r\n___\r\n### SearchCriteria Parameters:\r\n| Parameter| Description | Example |\r\n| ------ | ------ |------ |\r\n| **Active** | Return records flagged as active. | ```searchCriteria: [\"Active\"]``` |\r\n| **Archived** | Return records flagged as archived. | ```searchCriteria: [\"Archived\"]``` |\r\n\r\n### SortBy Options:\r\n| Parameter | Example |\r\n| ------ | ------ |\r\n| **name** | ```sortBy: \"name\"``` |\r\n| **courseCount** | ```sortBy: \"courseCount\"``` |\r\n| **isInHouse** | ```sortBy: \"isInHouse\"``` |\r\n| **isActive**  | ```sortBy: \"isActive\"``` |",
        "operationId": "Provider-GetAll",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllProviderQuery"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllProviderQuery"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllProviderQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProviderInfoList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProviderInfoList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/Provider/GetById/{providerId}": {
      "get": {
        "tags": [
          "Provider"
        ],
        "summary": "Find provider by Id.",
        "description": "View specific details of a provider based on the supplied id.",
        "operationId": "Provider-GetById",
        "parameters": [
          {
            "name": "ProviderId",
            "in": "path",
            "description": "Provider Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProviderInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProviderInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/Provider/GetByCode/{providerCode}": {
      "get": {
        "tags": [
          "Provider"
        ],
        "summary": "Find provider by code.",
        "description": "View specific details of a provider based on the supplied code.",
        "operationId": "Provider-GetByCode",
        "parameters": [
          {
            "name": "ProviderCode",
            "in": "path",
            "description": "Provider code",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProviderInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProviderInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/Provider/Create": {
      "post": {
        "tags": [
          "Provider"
        ],
        "summary": "Add a new provider.",
        "description": "Create a new provider.",
        "operationId": "Provider-Create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProviderCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProviderCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProviderCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProviderInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProviderInfo"
                }
              }
            }
          },
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProviderInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProviderInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/Provider/Update": {
      "put": {
        "tags": [
          "Provider"
        ],
        "summary": "Update a provider.",
        "description": "Update a provider based on the specified Id.",
        "operationId": "Provider-Update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProviderCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProviderCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProviderCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProviderInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProviderInfo"
                }
              }
            }
          },
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProviderInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProviderInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/Provider/Delete": {
      "delete": {
        "tags": [
          "Provider"
        ],
        "summary": "Delete providers.",
        "description": "Delete providers based on the specified Ids. Returns a list of invalid records for deletion.",
        "operationId": "Provider-Delete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteProviderCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteProviderCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteProviderCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProviderInfo"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProviderInfo"
                  }
                }
              }
            }
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/Role/GetAll": {
      "get": {
        "tags": [
          "Role"
        ],
        "summary": "List all Roles",
        "description": "List all active roles in the firm.",
        "operationId": "Role-GetAll",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleInfoList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleInfoList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/Role/GetById/{roleId}": {
      "get": {
        "tags": [
          "Role"
        ],
        "summary": "Find role by Id.",
        "description": "View specific role based on the supplied id.",
        "operationId": "Role-GetById",
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "description": "Role Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/Room/GetAll": {
      "post": {
        "tags": [
          "Room"
        ],
        "summary": "List rooms.",
        "description": "List all available rooms within the firm.\r\n___\r\n### SearchCriteria Parameters:\r\n| Parameter| Description | Example |\r\n| ------ | ------ |------ |\r\n| **Active** | Return records flagged as active. | ```searchCriteria: [\"Active\"]``` |\r\n| **Archived** | Return records flagged as archived. | ```searchCriteria: [\"Archived\"]``` |\r\n\r\n### SortBy Options:\r\n| Parameter | Example |\r\n| ------ | ------ |\r\n| **name** | ```sortBy: \"name\"``` |\r\n| **location** | ```sortBy: \"location\"``` |\r\n| **sessionCount** | ```sortBy: \"sessionCount\"``` |\r\n| **isActive**  | ```sortBy: \"isActive\"``` |",
        "operationId": "Room-GetAll",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllRoomsQuery"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllRoomsQuery"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllRoomsQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoomInfoList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoomInfoList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/Room/GetById/{roomId}": {
      "get": {
        "tags": [
          "Room"
        ],
        "summary": "Find room by Id.",
        "description": "View specific details of a room based on the supplied id.",
        "operationId": "Room-GetById",
        "parameters": [
          {
            "name": "RoomId",
            "in": "path",
            "description": "Room Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoomInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoomInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/Room/GetByCode/{roomCode}": {
      "get": {
        "tags": [
          "Room"
        ],
        "summary": "Find room by code.",
        "description": "View specific details of a room based on the supplied code.",
        "operationId": "Room-GetByCode",
        "parameters": [
          {
            "name": "RoomCode",
            "in": "path",
            "description": "Room code",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoomInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoomInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/Room/Create": {
      "post": {
        "tags": [
          "Room"
        ],
        "summary": "Add a new room.",
        "description": "Create a new room",
        "operationId": "Room-Create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRoomCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRoomCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRoomCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoomInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoomInfo"
                }
              }
            }
          },
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoomInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoomInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/Room/Update": {
      "put": {
        "tags": [
          "Room"
        ],
        "summary": "Update a room.",
        "description": "Update a room based on the specified Id.",
        "operationId": "Room-Update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRoomCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRoomCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRoomCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoomInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoomInfo"
                }
              }
            }
          },
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoomInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoomInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/Room/Delete": {
      "delete": {
        "tags": [
          "Room"
        ],
        "summary": "Delete rooms.",
        "description": "Delete rooms based on the specified Ids. Returns a list of invalid records for deletion.",
        "operationId": "Room-Delete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteRoomCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteRoomCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteRoomCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoomInfo"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoomInfo"
                  }
                }
              }
            }
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Core/Session/GetAll": {
      "post": {
        "tags": [
          "Session"
        ],
        "summary": "List sessions.",
        "description": "List all session based on the supplied filters.\r\n___\r\n\r\n### FilterBy Parameters:\r\n| Parameter| Description | Example |\r\n| ------ | ------ |------ |\r\n| **Title** | Search by Session Title. | ```filterBy: [\"Title[contains]:Ethics\"]``` |\r\n\r\n### SearchCriteria Parameters:\r\n| Parameter| Description | Example |\r\n| ------ | ------ |------ |\r\n| **Active** | Include all active sessions only. | ```searchCriteria: [\"Active\"]``` |\r\n| **Cancelled** | Include cancelled sessions only. | ```searchCriteria: [\"Cancelled\"]``` |\r\n\r\n### SortBy Options:\r\n| Parameter | Example |\r\n| ------ | ------ |\r\n| **title** | ```sortBy: \"title\"``` |\r\n| **startDate** | ```sortBy: \"startDate\"``` |\r\n| **endDate** | ```sortBy: \"endDate\"``` |\r\n| **provider** | ```sortBy: \"provider\"``` |\r\n| **courseFormat** | ```sortBy: \"courseFormat\"``` |",
        "operationId": "Session-GetAll",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllSessionsQuery"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllSessionsQuery"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllSessionsQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionInfoList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionInfoList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Core/Session/GetById/{sessionId}": {
      "get": {
        "tags": [
          "Session"
        ],
        "summary": "Find session by Id.",
        "description": "View session information based on the supplied id.",
        "operationId": "Session-GetById",
        "parameters": [
          {
            "name": "sessionId",
            "in": "path",
            "description": "Session Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Core/Session/GetByCode/{code}": {
      "get": {
        "tags": [
          "Session"
        ],
        "summary": "Find session by code.",
        "description": "View session information based on the supplied session code.",
        "operationId": "Session-GetByCode",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "Session Code",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Core/Session/GetByCourseId": {
      "post": {
        "tags": [
          "Session"
        ],
        "summary": "Find session by course Id.",
        "description": "List all courses sessions based on the given filters.\r\n___\r\n\r\n### FilterBy Parameters:\r\n| Parameter| Description | Example |\r\n| ------ | ------ |------ |\r\n| **Title** | Search by Session Title. | ```filterBy: [\"Title[contains]:Ethics\"]``` |\r\n\r\n### SearchCriteria Parameters:\r\n| Parameter| Description | Example |\r\n| ------ | ------ |------ |\r\n| **PreviousSessionsOnly** | Retrieve sessions prior to today. | ```searchCriteria: [\"PreviousSessionsOnly\"]``` |\r\n| **UpcomingSessionsOnly** | Retrieve upcoming sessions| ```searchCriteria: [\"UpcomingSessionsOnly\"]``` |\r\n\r\n### SortBy Options:\r\n| Parameter | Example |\r\n| ------ | ------ |\r\n| **title** | ```sortBy: \"title\"``` |\r\n| **startDate** | ```sortBy: \"startDate\"``` |\r\n| **endDate** | ```sortBy: \"endDate\"``` |\r\n| **provider** | ```sortBy: \"provider\"``` |\r\n| **courseFormat** | ```sortBy: \"courseFormat\"``` |",
        "operationId": "Session-GetByCourseId",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllSessionByCourseIdQuery"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllSessionByCourseIdQuery"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllSessionByCourseIdQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionInfoList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionInfoList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Core/Session/GetByDateRange": {
      "post": {
        "tags": [
          "Session"
        ],
        "summary": "Find sessions by start and end date.",
        "description": "List all sessions based on the given filters.\r\n___\r\n\r\n### FilterBy Parameters:\r\n| Parameter| Description | Example |\r\n| ------ | ------ |------ |\r\n| **Title** | Search by Session Title. | ```filterBy: [\"Title[contains]:Ethics\"]``` |\r\n\r\n### SearchCriteria Parameters:\r\n| Parameter| Description | Example |\r\n| ------ | ------ |------ |\r\n| **ProviderIds** | Search by provider. | ```searchCriteria: [\"ProviderIds: 1,2\"]``` |\r\n| **SessionFormat** | Search by session format. | ```searchCriteria: [\"SessionFormat: 1,2\"]``` |\r\n| **SessionLicense** | Search by license. | ```searchCriteria: [\"SessionLicense: 1,2\"]``` |\r\n| **SessionLocation** | Search by location. | ```searchCriteria: [\"SessionLocation: 1,2\"]``` |\r\n| **SessionInstructor** | Search by instructor. | ```searchCriteria: [\"SessionInstructor:Jane\"]``` |\r\n| **CourseClassYear** | Search by Class Year| ```searchCriteria: [\"CourseClassYear: 1, 2\"]``` |\r\n| **CourseCompetency** | Search by Competency| ```searchCriteria: [\"CourseCompetency: 1, 2\"]``` |\r\n| **CourseDepartment** | Search by Department| ```searchCriteria: [\"CourseDepartment: 1, 2\"]``` |\r\n| **CourseLevel** | Search by Level| ```searchCriteria: [\"CourseLevel: 1, 2\"]``` |\r\n| **CoursePracticeArea** | Search by Practice Area| ```searchCriteria: [\"CoursePracticeArea: 1, 2\"]``` |\r\n| **CourseTag** | Search by Tag| ```searchCriteria: [\"CourseTag: 1, 2\"]``` |\r\n\r\n### SortBy Options:\r\n| Parameter | Example |\r\n| ------ | ------ |\r\n| **title** | ```sortBy: \"title\"``` |\r\n| **startDate** | ```sortBy: \"startDate\"``` |\r\n| **endDate** | ```sortBy: \"endDate\"``` |\r\n| **provider** | ```sortBy: \"provider\"``` |\r\n| **courseFormat** | ```sortBy: \"courseFormat\"``` |",
        "operationId": "Session-GetByDateRange",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllSessionByDateRangeQuery"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllSessionByDateRangeQuery"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllSessionByDateRangeQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionInfoList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionInfoList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Core/Session/Create": {
      "post": {
        "tags": [
          "Session"
        ],
        "summary": "Add new sessions.",
        "description": "Create new sessions.",
        "operationId": "Session-Create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSessionCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSessionCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSessionCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SessionInfo"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SessionInfo"
                  }
                }
              }
            }
          },
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SessionInfo"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SessionInfo"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Core/Session/Update": {
      "put": {
        "tags": [
          "Session"
        ],
        "summary": "Update a session.",
        "description": "Update a session based on the given parameters.",
        "operationId": "Session-Update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSessionAndLicensesCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSessionAndLicensesCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSessionAndLicensesCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionInfo"
                }
              }
            }
          },
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Core/Session/Delete": {
      "delete": {
        "tags": [
          "Session"
        ],
        "summary": "Delete sessions.",
        "description": "Delete sessions based on the supplied Ids.",
        "operationId": "Session-Delete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteSessionCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteSessionCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteSessionCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CourseSessionToDisplayDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CourseSessionToDisplayDto"
                  }
                }
              }
            }
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/State/GetAll": {
      "get": {
        "tags": [
          "State"
        ],
        "summary": "List all States.",
        "description": "List all available states within the firm.",
        "operationId": "State-GetAll",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StateInfoList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StateInfoList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/State/GetByCountry/{countryId}": {
      "get": {
        "tags": [
          "State"
        ],
        "summary": "Find stated by country Id.",
        "description": "View the list of states based on supplied CountryId.",
        "operationId": "State-GetByCountry",
        "parameters": [
          {
            "name": "CountryId",
            "in": "path",
            "description": "Country Id. Please see the Country GET endpoints for the complete list.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StateInfoList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StateInfoList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/Tag/GetAll": {
      "post": {
        "tags": [
          "Tag"
        ],
        "summary": "List tags.",
        "description": "List all available tags within the firm.\r\n___\r\n### SearchCriteria Parameters:\r\n| Parameter| Description | Example |\r\n| ------ | ------ |------ |\r\n| **Active** | Return records flagged as active. | ```searchCriteria: [\"Active\"]``` |\r\n| **Archived** | Return records flagged as archived. | ```searchCriteria: [\"Archived\"]``` |\r\n\r\n### SortBy Options:\r\n| Parameter | Example |\r\n| ------ | ------ |\r\n| **name** | ```sortBy: \"name\"``` |\r\n| **courseCount** | ```sortBy: \"courseCount\"``` |\r\n| **isActive**  | ```sortBy: \"isActive\"``` |",
        "operationId": "Tag-GetAll",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllTagsQuery"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllTagsQuery"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllTagsQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagInfoList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagInfoList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/Tag/GetById/{tagId}": {
      "get": {
        "tags": [
          "Tag"
        ],
        "summary": "Find tag by Id.",
        "description": "View specific details of a tag based on the supplied id.",
        "operationId": "Tag-GetById",
        "parameters": [
          {
            "name": "TagId",
            "in": "path",
            "description": "Tag Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/Tag/GetByCode/{tagCode}": {
      "get": {
        "tags": [
          "Tag"
        ],
        "summary": "Find tag by code.",
        "description": "View specific details of a tag based on the supplied code.",
        "operationId": "Tag-GetByCode",
        "parameters": [
          {
            "name": "TagCode",
            "in": "path",
            "description": "Tag code",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/Tag/Create": {
      "post": {
        "tags": [
          "Tag"
        ],
        "summary": "Add a new tag.",
        "description": "Create a new tag.",
        "operationId": "Tag-Create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTagCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTagCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTagCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagInfo"
                }
              }
            }
          },
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/Tag/Update": {
      "put": {
        "tags": [
          "Tag"
        ],
        "summary": "Update a tag.",
        "description": "Update a tag based on the specified Id.",
        "operationId": "Tag-Update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTagCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTagCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTagCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagInfo"
                }
              }
            }
          },
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/Tag/Delete": {
      "delete": {
        "tags": [
          "Tag"
        ],
        "summary": "Delete tags.",
        "description": "Delete tags based on the specified Ids. Returns a list of invalid records for deletion.",
        "operationId": "Tag-Delete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteTagCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteTagCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteTagCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TagInfo"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TagInfo"
                  }
                }
              }
            }
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/Timezone/GetAll": {
      "get": {
        "tags": [
          "Timezone"
        ],
        "summary": "List all time zones",
        "description": "List all available time zones within the firm.",
        "operationId": "Timezone-GetAll",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimezoneInfoList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimezoneInfoList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Maintenance/Timezone/GetById/{timezoneId}": {
      "get": {
        "tags": [
          "Timezone"
        ],
        "summary": "View a time zone",
        "description": "View specific details of a time zone based on supplied id.",
        "operationId": "Timezone-GetById",
        "parameters": [
          {
            "name": "TimezoneId",
            "in": "path",
            "description": "Timezone Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimezoneInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimezoneInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Core/User/GetAll": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "List users.",
        "description": "List users based on the specified parameters and filters. \r\n___\r\n\r\n### FilterBy Parameters:\r\n| Parameter| Description | Example |\r\n| ------ | ------ |------ |\r\n| **Keyword** | Search for the keyword in LastName, FirstName, Middlename, and Login Id fields. | ```filterBy: [\"keyword[contains]:jane\"]``` |\r\n| **LastName** | Search by Lastname. | ```filterBy: [\"lastName[contains]:Smith\"]``` |\r\n| **FirstName** | Search by Firstname. | ```filterBy: [\"firstName[contains]:Jane\"]``` |\r\n| **Email** | Search by Email. | ```filterBy: [\"email[contains]:j.smith@example.net\"]``` |\r\n\r\n### SearchCriteria Parameters:\r\n| Parameter| Description | Example |\r\n| ------ | ------ |------ |\r\n| **UserStatus** | Search by Status. 1 = Active; 2 = Inactive| ```searchCriteria: [\"UserStatus: 1, 2\"]``` |\r\n| **UserType** | Search by Type. 1 = Administrator; 2 = Client; 3 = User| ```searchCriteria: [\"UserType: 1, 3\"]``` |\r\n| **UserRole** | Search by Role. | ```searchCriteria: [\"UserRole: 1, 3\"]``` |\r\n| **UserLicense** | Search by License Id. | ```searchCriteria: [\"UserLicense: 200, 201\"]``` |\r\n| **UserGroup** | Search by User Group. | ```searchCriteria: [\"UserGroup: 1\"]``` |\r\n\r\n\r\n### SortBy Options:\r\n| Parameter | Example |\r\n| ------ | ------ |\r\n| **firstName** | ```sortBy: \"firstName\"``` |\r\n| **lastName** | ```sortBy: \"lastName\"``` |\r\n| **locationId** | ```sortBy: \"locationId\"``` |",
        "operationId": "User-GetAll",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllUsersQuery"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllUsersQuery"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllUsersQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfoList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfoList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Core/User/GetById/{userId}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Find user by Id.",
        "description": "Retrieve user information based on the supplied user Id.",
        "operationId": "User-GetById",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Core/User/GetByEmail/{email}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Find user by email.",
        "description": "Retrieve user information based on the supplied user email.",
        "operationId": "User-GetByEmail",
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "description": "Primary Email",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Core/User/GetByPersonnelId/{personnelId}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Find user by Personnel Id.",
        "description": "Retrieve user information based on the supplied personnel Id.",
        "operationId": "User-GetByPersonnelId",
        "parameters": [
          {
            "name": "personnelId",
            "in": "path",
            "description": "Personnel Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Core/User/CreateEmployee": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Create an employee or administrator record.",
        "description": "Create an employee or administrator record. Multiple license can be added along with the user profile.",
        "operationId": "User-CreateEmployee",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEmployeeCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEmployeeCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEmployeeCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfo"
                }
              }
            }
          },
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Core/User/CreateClient": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Create a client record.",
        "description": "Create a client record. Multiple license can be added along with the user profile. \r\n\r\n```Note: For a client license, only bar number is required.```",
        "operationId": "User-CreateClient",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateClientCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateClientCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateClientCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfo"
                }
              }
            }
          },
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Core/User/UpdateEmployee": {
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Update an employee or administrator profile.",
        "description": "Update an employee or administrator profile.",
        "operationId": "User-UpdateEmployee",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEmployeeCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEmployeeCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEmployeeCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfo"
                }
              }
            }
          },
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Core/User/UpdateClient": {
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Update a client profile.",
        "description": "Update a client profile.",
        "operationId": "User-UpdateClient",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateClientCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateClientCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateClientCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfo"
                }
              }
            }
          },
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Core/User/Delete": {
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Delete a user from the application.",
        "description": "Delete users from the application.",
        "operationId": "User-Delete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteUserCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteUserCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteUserCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfo"
                }
              }
            }
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Core/User/AddUserLicense": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Add a license to the user.",
        "description": "Associate a license to the user.",
        "operationId": "User-AddUserLicense",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddUserLicenseCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AddUserLicenseCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AddUserLicenseCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfo"
                }
              }
            }
          }
        }
      }
    },
    "/api/Core/User/DeleteUserLicense": {
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Delete licenses to the user.",
        "description": "Remove licenses to the user.",
        "operationId": "User-DeleteUserLicense",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteUserLicenseCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteUserLicenseCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteUserLicenseCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfo"
                }
              }
            }
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Core/User/UpdateUserLicense": {
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Update a license of a user.",
        "description": "Update a license associated to the user.",
        "operationId": "User-UpdateUserLicense",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserLicenseCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserLicenseCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserLicenseCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfo"
                }
              }
            }
          },
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Core/User/RegisterUserToLearningPlan": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Register a user to a learning plan.",
        "description": "Register a user to a learning plan.",
        "operationId": "User-RegisterUserToLearningPlan",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddLearningPlanParticipantCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AddLearningPlanParticipantCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AddLearningPlanParticipantCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LearningPlanParticipantInfo"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LearningPlanParticipantInfo"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Core/User/RemoveUserFromLearningPlan": {
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Remove a user from a learning plan.",
        "description": "Remove a user from a learning plan.",
        "operationId": "User-RemoveUserFromLearningPlan",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteLearningPlanParticipantCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteLearningPlanParticipantCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteLearningPlanParticipantCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LearningPlanParticipantInfo"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LearningPlanParticipantInfo"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Core/User/GetUserCourseHistory": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "List all user course history",
        "description": "List all user course history.",
        "operationId": "User-GetUserCourseHistory",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetUserCourseHistoryCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetUserCourseHistoryCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetUserCourseHistoryCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserCourseHistoryListDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserCourseHistoryListDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodeProblemDetails"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AddLearningPlanParticipantCommand": {
        "required": [
          "learningPlanId",
          "participantList"
        ],
        "type": "object",
        "properties": {
          "learningPlanId": {
            "type": "integer",
            "format": "int32"
          },
          "validatedBy": {
            "type": "integer",
            "format": "int32"
          },
          "participantList": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LearningPlanCriteriaParticipantDto"
            }
          },
          "sendEmailConfirmation": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "AddUserLicenseCommand": {
        "required": [
          "licenseId",
          "userId"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "description": "Unique Identifier of the user in CE Manager.",
            "format": "int32",
            "example": 252
          },
          "licenseId": {
            "type": "integer",
            "description": "License Id. Please use the License GET endpoints for the complete list.",
            "format": "int32",
            "example": 381
          },
          "userLicenseProfileValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserLicenseProfileValueInfo"
            },
            "description": "License profile information.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AffiliationInfo": {
        "type": "object",
        "properties": {
          "affiliationId": {
            "type": "integer",
            "description": "Affiliation Id. Unique identifier of this record.",
            "format": "int32",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Name of the company",
            "nullable": true,
            "example": "ACME Inc"
          },
          "address": {
            "type": "string",
            "description": "Street address",
            "nullable": true,
            "example": "17-17 Route 208 North"
          },
          "city": {
            "type": "string",
            "description": "City",
            "nullable": true,
            "example": "Fair Lawn"
          },
          "countryId": {
            "type": "string",
            "description": "Country Id.",
            "nullable": true,
            "example": "USA"
          },
          "stateId": {
            "type": "string",
            "description": "State Id. Please see the State GET endpoints for the complete list.",
            "nullable": true,
            "example": "NJ"
          },
          "zip": {
            "type": "string",
            "description": "Zip code.",
            "nullable": true,
            "example": "07410"
          },
          "phone": {
            "type": "string",
            "description": "Phone number.",
            "nullable": true,
            "example": "(201) 652-2229"
          },
          "timezoneId": {
            "type": "string",
            "description": "Timezone Id.  Please see the Timezone GET endpoints for the complete list.",
            "nullable": true,
            "example": "US/Eastern"
          },
          "isActive": {
            "type": "boolean",
            "description": "Indicates if the record is active or archived.",
            "example": true
          },
          "code": {
            "type": "string",
            "description": "Affiliation Code. Unique Identifier of this record.",
            "nullable": true,
            "example": "AFF001"
          },
          "userCount": {
            "type": "integer",
            "description": "Number of users associated to this company\\group.",
            "format": "int32",
            "example": 2
          },
          "country": {
            "type": "string",
            "description": "Country",
            "nullable": true,
            "example": "United States"
          },
          "state": {
            "type": "string",
            "description": "State",
            "nullable": true,
            "example": "New Jersey"
          },
          "timezone": {
            "type": "string",
            "description": "Timezone Description",
            "nullable": true,
            "example": "(UTC-05:00) Eastern Time (US &amp; Canada)"
          }
        },
        "additionalProperties": false
      },
      "AffiliationInfoList": {
        "type": "object",
        "properties": {
          "affiliations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AffiliationInfo"
            },
            "nullable": true
          },
          "recordCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "AssignUserToGroupCommand": {
        "required": [
          "groupId",
          "userIds"
        ],
        "type": "object",
        "properties": {
          "groupId": {
            "type": "integer",
            "description": "Security Group Id. Unique identifier of the record to update.",
            "format": "int32",
            "example": 1
          },
          "userIds": {
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Comma separated list of Ids of records to be added to the security group.",
            "example": [
              1,
              3
            ]
          }
        },
        "additionalProperties": false
      },
      "ClassYearInfo": {
        "type": "object",
        "properties": {
          "classYearId": {
            "type": "integer",
            "description": "Class Year Id. Unique identifier of this record.",
            "format": "int32",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Name of the class year.",
            "nullable": true,
            "example": "Class Year 2018"
          },
          "isActive": {
            "type": "boolean",
            "description": "Indicates if the record is active or archived.",
            "example": true
          },
          "code": {
            "type": "string",
            "description": "Class Year Code. Unique Identifier of this record.",
            "nullable": true,
            "example": "CY001"
          },
          "userCount": {
            "type": "integer",
            "description": "Number of users associated to this class year.",
            "format": "int32",
            "example": 13
          },
          "courseCount": {
            "type": "integer",
            "description": "Number of courses associated to this class year.",
            "format": "int32",
            "example": 8
          }
        },
        "additionalProperties": false
      },
      "ClassYearInfoList": {
        "type": "object",
        "properties": {
          "classYears": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClassYearInfo"
            },
            "nullable": true
          },
          "recordCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "CompetencyInfo": {
        "type": "object",
        "properties": {
          "competencyId": {
            "type": "integer",
            "description": "Competency Id. Unique identifier of this record.",
            "format": "int32",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Name of this record.",
            "nullable": true,
            "example": "Competency 01"
          },
          "isActive": {
            "type": "boolean",
            "description": "Indicates if the record is active or archived.",
            "example": true
          },
          "code": {
            "type": "string",
            "description": "Competency Code. Unique Identifier of this record.",
            "nullable": true,
            "example": "CO-01"
          },
          "courseCount": {
            "type": "integer",
            "description": "Number of courses associated with the record.",
            "format": "int32",
            "example": 8
          }
        },
        "additionalProperties": false
      },
      "CompetencyInfoList": {
        "type": "object",
        "properties": {
          "competencies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompetencyInfo"
            },
            "nullable": true
          },
          "recordCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ComplianceLicenseeInfo": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "description": "Unique Identifier of the user in CE Manager.",
            "format": "int32",
            "example": 252
          },
          "type": {
            "type": "string",
            "description": "User Type. 1 = Administrator; 2 = Client; 3 = User",
            "nullable": true,
            "example": "2"
          },
          "firstName": {
            "type": "string",
            "description": "First Name.",
            "nullable": true,
            "example": "Jane"
          },
          "middleName": {
            "type": "string",
            "description": "Middle Name.",
            "nullable": true,
            "example": "Baker"
          },
          "lastName": {
            "type": "string",
            "description": "Last Name.",
            "nullable": true,
            "example": "Smith"
          },
          "email": {
            "type": "string",
            "description": "Email.",
            "nullable": true,
            "example": "j.smith@micronsystems.com"
          },
          "userLicenseCompliancePeriods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LicenseCompliancePeriodInfo"
            },
            "description": "List of user's license compliance period",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ComplianceLicenseeInfoList": {
        "type": "object",
        "properties": {
          "complianceLicensees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ComplianceLicenseeInfo"
            },
            "nullable": true
          },
          "recordCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "CompliancePeriodAdditionalRequirementInfo": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the complaince additional requirement",
            "nullable": true,
            "example": "Professionalism Course Requirement"
          },
          "statusId": {
            "type": "integer",
            "description": "Compliance Status Id",
            "format": "int32",
            "example": 1
          },
          "statusDescription": {
            "type": "string",
            "description": "Compliance Status Description",
            "nullable": true,
            "example": "In Compliance"
          },
          "carriedOver": {
            "type": "number",
            "description": "The carried over credits",
            "format": "double",
            "nullable": true,
            "example": 0
          },
          "earned": {
            "type": "number",
            "description": "The earned credits",
            "format": "double",
            "nullable": true,
            "example": 10
          },
          "carryOver": {
            "type": "number",
            "description": "The carry over credits",
            "format": "double",
            "nullable": true,
            "example": 0
          },
          "sequenceNumber": {
            "type": "integer",
            "description": "Indicates the order of the record",
            "format": "int32",
            "example": 1
          }
        },
        "additionalProperties": false
      },
      "CompliancePeriodChartNoteInfo": {
        "type": "object",
        "properties": {
          "note": {
            "type": "string",
            "description": "The license compliance chart note",
            "nullable": true,
            "example": "Attorneys admitted between January 1 and June 30 are exempt for the compliance period in which they were admitted. Credits earned during this period can be carried over to the initial compliance period."
          },
          "sequenceNumber": {
            "type": "integer",
            "description": "Indicates the order of the record",
            "format": "int32",
            "example": 1
          }
        },
        "additionalProperties": false
      },
      "CompliancePeriodInfo": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "description": "Unique Identifier of the user in CE Manager.",
            "format": "int32",
            "example": 252
          },
          "licenseId": {
            "type": "integer",
            "description": "License Id. Please use the License GET endpoints for the complete list.",
            "format": "int32",
            "example": 381
          },
          "periodFrom": {
            "type": "string",
            "description": "License Period Start Date",
            "format": "date-time",
            "example": "2021-01-01T00:00:00"
          },
          "periodFromCourse": {
            "type": "string",
            "description": "License period from course",
            "format": "date-time",
            "nullable": true,
            "example": "2021-01-01T00:00:00"
          },
          "periodTo": {
            "type": "string",
            "description": "License Period End Date",
            "format": "date-time",
            "example": "2022-01-01T00:00:00"
          },
          "periodToDisplay": {
            "type": "string",
            "description": "License period to display",
            "format": "date-time",
            "nullable": true,
            "example": "2021-01-01T00:00:00"
          },
          "periodLabel": {
            "type": "string",
            "description": "License Period Label",
            "nullable": true,
            "example": "Newly Admitted"
          },
          "periodNumber": {
            "type": "integer",
            "description": "License Period Number",
            "format": "int32",
            "example": 1
          },
          "periodTypeId": {
            "type": "integer",
            "description": "License Period Type",
            "format": "int32",
            "example": 1
          },
          "complianceStatusId": {
            "type": "integer",
            "description": "License Compliance Status Id. Please use the Compliance GetStatuses endpoint for the complete list.",
            "format": "int32",
            "example": 1
          },
          "isSubLicensePeriod": {
            "type": "boolean",
            "description": "Indicates whether the period is a sub license period",
            "example": false
          },
          "isPriorPeriodDeficient": {
            "type": "boolean",
            "description": "Indicates whether the prior period is deficient",
            "example": false
          },
          "compliancePeriodTotals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompliancePeriodTotalInfo"
            },
            "description": "The list of compliance period totals",
            "nullable": true
          },
          "compliancePeriodAdditionalRequirements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompliancePeriodAdditionalRequirementInfo"
            },
            "description": "The list of compliance period additional requirements",
            "nullable": true
          },
          "compliancePeriodChartNotes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompliancePeriodChartNoteInfo"
            },
            "description": "The list of license compliance period chart notes",
            "nullable": true
          },
          "compliancePeriodRestrictions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompliancePeriodRestrictionInfo"
            },
            "description": "The list of compliance period restrictions",
            "nullable": true
          },
          "compliancePeriodSubjectAreas": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompliancePeriodSubjectAreaInfo"
            },
            "description": "The list of compliance period subject areas",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CompliancePeriodRestrictionInfo": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "The compliance period restriction description",
            "nullable": true,
            "example": "3 Self-Study Credit Limit"
          },
          "earned": {
            "type": "number",
            "description": "The earned credits",
            "format": "double",
            "example": 1
          },
          "sequenceNumber": {
            "type": "integer",
            "description": "Indicates the order of the record",
            "format": "int32",
            "example": 1
          }
        },
        "additionalProperties": false
      },
      "CompliancePeriodSubjectAreaInfo": {
        "type": "object",
        "properties": {
          "subjectAreaCreditId": {
            "type": "integer",
            "description": "Unique Id for the Subject Area Credit",
            "format": "int32",
            "example": 1
          },
          "subjectAreaName": {
            "type": "string",
            "description": "Subject area name",
            "nullable": true,
            "example": "Accounting"
          },
          "earned": {
            "type": "number",
            "description": "The earned credits",
            "format": "double",
            "example": 5
          },
          "licenseId": {
            "type": "integer",
            "description": "License Id. Please use the License GET endpoints for the complete list.",
            "format": "int32",
            "example": 100
          },
          "creditId": {
            "type": "integer",
            "description": "The license credit id",
            "format": "int32",
            "example": 1
          },
          "creditName": {
            "type": "string",
            "description": "The license credit name",
            "nullable": true,
            "example": "Accounting and Auditing"
          }
        },
        "additionalProperties": false
      },
      "CompliancePeriodTotalInfo": {
        "type": "object",
        "properties": {
          "creditId": {
            "type": "integer",
            "description": "Unique Identifier of the credit id in CE Manager.",
            "format": "int32",
            "example": 1
          },
          "creditName": {
            "type": "string",
            "description": "Credit name",
            "nullable": true,
            "example": "Ethics"
          },
          "parentCreditId": {
            "type": "integer",
            "description": "Parent Credit Id. Unique Identifier of the credit id in CE Manager.",
            "format": "int32",
            "example": 1
          },
          "level": {
            "type": "integer",
            "description": "Credit level",
            "format": "int32",
            "example": 1
          },
          "groupLabel": {
            "type": "string",
            "description": "Credit Group Label",
            "nullable": true,
            "example": "1"
          },
          "sequenceNumber": {
            "type": "integer",
            "description": "Indicates the order of the record",
            "format": "int32",
            "example": 1
          },
          "required": {
            "type": "number",
            "description": "The required credits",
            "format": "double",
            "example": 10
          },
          "overlap": {
            "type": "number",
            "description": "The overlap credits",
            "format": "double",
            "example": 10
          },
          "carriedOver": {
            "type": "number",
            "description": "The carried over credits",
            "format": "double",
            "example": 10
          },
          "previousGrace": {
            "type": "number",
            "description": "The previous grace credits",
            "format": "double",
            "example": 10
          },
          "currentGrace": {
            "type": "number",
            "description": "The current grace credits",
            "format": "double",
            "example": 10
          },
          "earned": {
            "type": "number",
            "description": "The earned credits",
            "format": "double",
            "example": 10
          },
          "grace": {
            "type": "number",
            "description": "The grace credits",
            "format": "double",
            "example": 10
          },
          "retroactiveCredit": {
            "type": "number",
            "description": "The retro active credits",
            "format": "double",
            "example": 10
          },
          "retroactiveDebit": {
            "type": "number",
            "description": "The retro active debits",
            "format": "double",
            "example": 10
          },
          "applied": {
            "type": "number",
            "description": "The applied credits",
            "format": "double",
            "example": 10
          },
          "carryOver": {
            "type": "number",
            "description": "The carry over credits",
            "format": "double",
            "example": 10
          },
          "extra": {
            "type": "number",
            "description": "The extra credits",
            "format": "double",
            "example": 10
          },
          "unused": {
            "type": "number",
            "description": "The unused credits",
            "format": "double",
            "example": 10
          },
          "available": {
            "type": "number",
            "description": "The available credits",
            "format": "double",
            "example": 10
          },
          "previousAvailable": {
            "type": "number",
            "description": "The previous available credits",
            "format": "double",
            "example": 10
          },
          "unusedGrace": {
            "type": "number",
            "description": "The unused grace credits",
            "format": "double",
            "example": 10
          },
          "unusedRetroactiveCredit": {
            "type": "number",
            "description": "The unused retro active credits",
            "format": "double",
            "example": 10
          },
          "creditsNeeded": {
            "type": "number",
            "description": "The needed credits",
            "format": "double",
            "example": 10
          }
        },
        "additionalProperties": false
      },
      "ComplianceStatisticsInfo": {
        "type": "object",
        "properties": {
          "licenseId": {
            "type": "integer",
            "description": "License Id. Please use the License GET endpoints for the complete list.",
            "format": "int32",
            "example": 381
          },
          "licenseName": {
            "type": "string",
            "description": "License name",
            "nullable": true,
            "example": "Illinois Law"
          },
          "reportingPeriodEnds": {
            "type": "string",
            "description": "License's reporting period end date",
            "nullable": true,
            "example": "12/31/2021"
          },
          "inComplianceCount": {
            "type": "integer",
            "description": "Number of users that are in compliance",
            "format": "int32",
            "nullable": true,
            "example": 10
          },
          "gracePeriodCount": {
            "type": "integer",
            "description": "Number of users that are in grace period",
            "format": "int32",
            "nullable": true,
            "example": 0
          },
          "inProgressCount": {
            "type": "integer",
            "description": "Number of users that are in progress",
            "format": "int32",
            "nullable": true,
            "example": 20
          },
          "priorPeriodDeficiencyCount": {
            "type": "integer",
            "description": "Number of users that have prior period deficiency",
            "format": "int32",
            "nullable": true,
            "example": 2
          },
          "inactiveCount": {
            "type": "integer",
            "description": "Number of users that are inactive",
            "format": "int32",
            "nullable": true,
            "example": 5
          },
          "notTrackedCount": {
            "type": "integer",
            "description": "Number of users that are not tracked",
            "format": "int32",
            "nullable": true,
            "example": 2
          },
          "nonMandatoryCount": {
            "type": "integer",
            "description": "Number of users that are non mandatory",
            "format": "int32",
            "nullable": true,
            "example": 0
          }
        },
        "additionalProperties": false
      },
      "ComplianceStatisticsInfoList": {
        "type": "object",
        "properties": {
          "complianceStatistics": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ComplianceStatisticsInfo"
            },
            "nullable": true
          },
          "recordCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ComplianceStatusInfo": {
        "type": "object",
        "properties": {
          "complianceStatusId": {
            "type": "integer",
            "description": "Compliance Status Id. Unique identifier of this record.",
            "format": "int32",
            "example": 1
          },
          "label": {
            "type": "string",
            "description": "Label of the compliance status",
            "nullable": true,
            "example": "In Compliance"
          }
        },
        "additionalProperties": false
      },
      "CountryInfo": {
        "type": "object",
        "properties": {
          "countryId": {
            "type": "string",
            "description": "Country Id. Unique identifier of this record.",
            "nullable": true,
            "example": "USA"
          },
          "name": {
            "type": "string",
            "description": "Name of the Country",
            "nullable": true,
            "example": "United States"
          },
          "abbreviation": {
            "type": "string",
            "description": "Abbreviation of the Country.",
            "nullable": true,
            "example": "USA"
          },
          "code": {
            "type": "string",
            "description": "Country Code. Unique Identifier of this record.",
            "nullable": true,
            "example": "C001"
          }
        },
        "additionalProperties": false
      },
      "CountryInfoList": {
        "type": "object",
        "properties": {
          "countries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CountryInfo"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CountyInfo": {
        "type": "object",
        "properties": {
          "countyId": {
            "type": "string",
            "description": "County Id. Unique identifier of this record.",
            "nullable": true,
            "example": "USA"
          },
          "name": {
            "type": "string",
            "description": "Name of the county",
            "nullable": true,
            "example": "Washington County"
          },
          "countryId": {
            "type": "string",
            "description": "Id of the country.",
            "nullable": true,
            "example": "USA"
          },
          "stateId": {
            "type": "string",
            "description": "Id of the state.",
            "nullable": true,
            "example": "NY"
          }
        },
        "additionalProperties": false
      },
      "CountyInfoList": {
        "type": "object",
        "properties": {
          "counties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CountyInfo"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CourseClassYearDto": {
        "type": "object",
        "properties": {
          "classYearId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "CourseClassYearInfo": {
        "type": "object",
        "properties": {
          "classYearId": {
            "type": "integer",
            "description": "Class Year Id. Unique Identifier of this record.",
            "format": "int32",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Class Year Name.",
            "nullable": true,
            "example": "CY2005"
          },
          "code": {
            "type": "string",
            "description": "Class Year Code. Unique Identifier of this record.",
            "nullable": true,
            "example": "CY05"
          }
        },
        "additionalProperties": false
      },
      "CourseCompetencyDto": {
        "type": "object",
        "properties": {
          "competencyId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "CourseCompetencyInfo": {
        "type": "object",
        "properties": {
          "competencyId": {
            "type": "integer",
            "description": "Competency Id. Unique identifier of this record.",
            "format": "int32",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Name of this record.",
            "nullable": true,
            "example": "Competency 01"
          },
          "code": {
            "type": "string",
            "description": "Competency Code. Unique Identifier of this record.",
            "nullable": true,
            "example": "CO-01"
          }
        },
        "additionalProperties": false
      },
      "CourseDepartmentDto": {
        "type": "object",
        "properties": {
          "departmentId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "CourseDepartmentInfo": {
        "type": "object",
        "properties": {
          "departmentId": {
            "type": "integer",
            "description": "Department Id. Unique identifier of this record.",
            "format": "int32",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Name of the department",
            "nullable": true,
            "example": "Accounting"
          },
          "code": {
            "type": "string",
            "description": "Department Code. Unique Identifier of this record.",
            "nullable": true,
            "example": "DEP001"
          }
        },
        "additionalProperties": false
      },
      "CourseDto": {
        "type": "object",
        "properties": {
          "courseId": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "courseCode": {
            "type": "string",
            "nullable": true
          },
          "providerId": {
            "type": "integer",
            "format": "int32"
          },
          "providerName": {
            "type": "string",
            "nullable": true
          },
          "note": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "archivedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "courseClassYear": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CourseClassYearDto"
            },
            "nullable": true
          },
          "courseCompetency": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CourseCompetencyDto"
            },
            "nullable": true
          },
          "courseDepartment": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CourseDepartmentDto"
            },
            "nullable": true
          },
          "courseLevel": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CourseLevelDto"
            },
            "nullable": true
          },
          "coursePracticeArea": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CoursePracticeAreaDto"
            },
            "nullable": true
          },
          "courseTag": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CourseTagDto"
            },
            "nullable": true
          },
          "courseLearningPlan": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LearningPlanCourseDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CourseFormatInfo": {
        "type": "object",
        "properties": {
          "courseFormatId": {
            "type": "string",
            "description": "Course Format Id. Unique identifier of this record.",
            "nullable": true,
            "example": "17"
          },
          "name": {
            "type": "string",
            "description": "Name of the Course Format.",
            "nullable": true,
            "example": "Mock Trial"
          },
          "abbreviation": {
            "type": "string",
            "description": "Abbreviation of the Course Format.",
            "nullable": true,
            "example": "MT"
          },
          "isOnlineLearning": {
            "type": "boolean",
            "description": "Flag that indicates if the format is online."
          }
        },
        "additionalProperties": false
      },
      "CourseFormatInfoList": {
        "type": "object",
        "properties": {
          "courseFormats": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CourseFormatInfo"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CourseInfo": {
        "type": "object",
        "properties": {
          "courseId": {
            "type": "integer",
            "description": "Course Id. Unique Identifier of the Course in CEM.",
            "format": "int32",
            "example": 201
          },
          "title": {
            "type": "string",
            "description": "Course Title.",
            "nullable": true,
            "example": "Ethics 101"
          },
          "courseCode": {
            "type": "string",
            "description": "Course Code. Alternative unique identifier of the course.",
            "nullable": true,
            "example": "ETH101"
          },
          "providerId": {
            "type": "integer",
            "description": "Provider Id.",
            "format": "int32",
            "example": 1
          },
          "providerName": {
            "type": "string",
            "description": "Provider Name.",
            "nullable": true,
            "example": "Irving Robbins and Rand LLP"
          },
          "description": {
            "type": "string",
            "description": "Course Description in HTML format.",
            "nullable": true,
            "example": "Ethics 101 offers an exciting look into the history of moral principles that dictate human behavior."
          },
          "courseClassYear": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CourseClassYearInfo"
            },
            "description": "Course Class Year Information.",
            "nullable": true
          },
          "courseCompetency": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CourseCompetencyInfo"
            },
            "description": "Course Competency Information.",
            "nullable": true
          },
          "courseDepartment": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CourseDepartmentInfo"
            },
            "description": "Course Department Information.",
            "nullable": true
          },
          "courseLevel": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CourseLevelInfo"
            },
            "description": "Course Level Information.",
            "nullable": true
          },
          "coursePracticeArea": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CoursePracticeAreaInfo"
            },
            "description": "Course Practice Area Information.",
            "nullable": true
          },
          "courseTag": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CourseTagInfo"
            },
            "description": "Course Tag Information.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CourseInfoList": {
        "type": "object",
        "properties": {
          "courses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CourseInfo"
            },
            "nullable": true
          },
          "recordCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "CourseLevelDto": {
        "type": "object",
        "properties": {
          "levelId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "CourseLevelInfo": {
        "type": "object",
        "properties": {
          "levelId": {
            "type": "integer",
            "description": "Level Id. Unique identifier of this record.",
            "format": "int32",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Name of the level",
            "nullable": true,
            "example": "Associate"
          },
          "code": {
            "type": "string",
            "description": "Level Code. Unique Identifier of this record.",
            "nullable": true,
            "example": "LVL001"
          }
        },
        "additionalProperties": false
      },
      "CoursePracticeAreaDto": {
        "type": "object",
        "properties": {
          "practiceAreaId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "CoursePracticeAreaInfo": {
        "type": "object",
        "properties": {
          "practiceAreaId": {
            "type": "integer",
            "description": "Practice Area Id. Unique identifier of this record.",
            "format": "int32",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Name of the practice area",
            "nullable": true,
            "example": "Litigation"
          },
          "code": {
            "type": "string",
            "description": "Practice Area Code. Unique Identifier of this record.",
            "nullable": true,
            "example": "PA001"
          }
        },
        "additionalProperties": false
      },
      "CourseSessionToDisplayDto": {
        "type": "object",
        "properties": {
          "sessionId": {
            "type": "integer",
            "format": "int32"
          },
          "scheduleId": {
            "type": "integer",
            "format": "int32"
          },
          "courseId": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "sessionTypeId": {
            "$ref": "#/components/schemas/SessionTypeEnum"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "startTime": {
            "type": "string",
            "nullable": true
          },
          "endTime": {
            "type": "string",
            "nullable": true
          },
          "timezoneId": {
            "type": "string",
            "nullable": true
          },
          "timezone": {
            "type": "string",
            "nullable": true
          },
          "locationId": {
            "type": "integer",
            "format": "int32"
          },
          "location": {
            "type": "string",
            "nullable": true
          },
          "roomId": {
            "type": "integer",
            "format": "int32"
          },
          "room": {
            "type": "string",
            "nullable": true
          },
          "courseFormatId": {
            "type": "integer",
            "format": "int32"
          },
          "courseFormat": {
            "type": "string",
            "nullable": true
          },
          "courseFormatPortalCategory": {
            "type": "string",
            "nullable": true
          },
          "isOnlineLearning": {
            "type": "boolean"
          },
          "hasScormPackage": {
            "type": "boolean"
          },
          "mediaTypeId": {
            "$ref": "#/components/schemas/MediaTypeEnum"
          },
          "courseTitle": {
            "type": "string",
            "nullable": true
          },
          "isPublished": {
            "type": "boolean"
          },
          "cancelledDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "sessionInstructors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "evaluationId": {
            "type": "integer",
            "format": "int32"
          },
          "registeredParticipantCount": {
            "type": "integer",
            "format": "int32"
          },
          "tentativeParticipantCount": {
            "type": "integer",
            "format": "int32"
          },
          "validatedParticipantCount": {
            "type": "integer",
            "format": "int32"
          },
          "pendingParticipantCount": {
            "type": "integer",
            "format": "int32"
          },
          "inProgressParticipantCount": {
            "type": "integer",
            "format": "int32"
          },
          "disqualifiedParticipantCount": {
            "type": "integer",
            "format": "int32"
          },
          "failedParticipantCount": {
            "type": "integer",
            "format": "int32"
          },
          "unexcusedParticipantCount": {
            "type": "integer",
            "format": "int32"
          },
          "waitlistParticipantCount": {
            "type": "integer",
            "format": "int32"
          },
          "sessionLicenses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SessionLicenseDto"
            },
            "nullable": true
          },
          "guid": {
            "type": "string",
            "nullable": true
          },
          "isIndividualSessionDateAllowed": {
            "type": "boolean"
          },
          "isOpenToClient": {
            "type": "boolean"
          },
          "isRegistrationApprovalNeeded": {
            "type": "boolean"
          },
          "isWaitlistingAllowed": {
            "type": "boolean"
          },
          "registrationLimit": {
            "type": "integer",
            "format": "int32"
          },
          "sessionParticipantCount": {
            "type": "integer",
            "format": "int32"
          },
          "sessionWaitlistedParticipantCount": {
            "type": "integer",
            "format": "int32"
          },
          "evaluationName": {
            "type": "string",
            "nullable": true
          },
          "withAnsweredEvaluation": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "CourseTagDto": {
        "type": "object",
        "properties": {
          "tagId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "CourseTagInfo": {
        "type": "object",
        "properties": {
          "tagId": {
            "type": "integer",
            "description": "Tag Id. Unique identifier of this record.",
            "format": "int32",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Name of the tag",
            "nullable": true,
            "example": "General"
          },
          "code": {
            "type": "string",
            "description": "Tag Code. Unique Identifier of this record.",
            "nullable": true,
            "example": "TAG001"
          }
        },
        "additionalProperties": false
      },
      "CreateAffiliationCommand": {
        "required": [
          "code",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 500,
            "minLength": 1,
            "type": "string",
            "description": "Name of the company",
            "example": "ACME Inc"
          },
          "address": {
            "maxLength": 100,
            "type": "string",
            "description": "Street address",
            "nullable": true,
            "example": "17-17 Route 208 North"
          },
          "city": {
            "maxLength": 100,
            "type": "string",
            "description": "City",
            "nullable": true,
            "example": "Fair Lawn"
          },
          "countryId": {
            "maxLength": 5,
            "type": "string",
            "description": "Country Id. Please see the Country GET endpoints for the complete list.",
            "nullable": true,
            "example": "USA"
          },
          "stateId": {
            "maxLength": 100,
            "type": "string",
            "description": "State Id. Please see the State GET endpoints for the complete list.",
            "nullable": true,
            "example": "NJ"
          },
          "zip": {
            "maxLength": 50,
            "type": "string",
            "description": "Zip code.",
            "nullable": true,
            "example": "07410"
          },
          "phone": {
            "maxLength": 25,
            "type": "string",
            "description": "Phone number.",
            "nullable": true,
            "example": "(201) 652-2229"
          },
          "timezoneId": {
            "type": "string",
            "description": "Timezone Id.  Please see the Timezone GET endpoints for the complete list. Default is US/Eastern.",
            "nullable": true,
            "example": "US/Eastern"
          },
          "code": {
            "maxLength": 15,
            "minLength": 1,
            "type": "string",
            "description": "Affiliation Code. Unique Identifier of this record.",
            "example": "AFF001"
          }
        },
        "additionalProperties": false
      },
      "CreateClassYearCommand": {
        "required": [
          "code",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 500,
            "minLength": 1,
            "type": "string",
            "description": "Name of the class year.",
            "example": "Class Year 2018"
          },
          "code": {
            "maxLength": 15,
            "minLength": 1,
            "type": "string",
            "description": "Class Year Code. Unique Identifier of this record.",
            "example": "CY001"
          }
        },
        "additionalProperties": false
      },
      "CreateClientCommand": {
        "required": [
          "email",
          "firstName",
          "lastName"
        ],
        "type": "object",
        "properties": {
          "firstName": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "First Name.",
            "example": "Jane"
          },
          "middleName": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Middle Name.",
            "nullable": true,
            "example": "Baker"
          },
          "lastName": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Last Name.",
            "example": "Smith"
          },
          "nickname": {
            "maxLength": 100,
            "type": "string",
            "description": "Nick name.",
            "nullable": true,
            "example": "Jane"
          },
          "email": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Email.",
            "format": "email",
            "example": "j.smith@micronsystems.com"
          },
          "userName": {
            "maxLength": 128,
            "type": "string",
            "description": "Login Id.",
            "nullable": true,
            "example": "j.smith"
          },
          "personnelId": {
            "maxLength": 128,
            "type": "string",
            "description": "Unique Identifier of the user.",
            "nullable": true,
            "example": "DBSP0023"
          },
          "genderId": {
            "type": "integer",
            "description": "Gender Id. Please see the Gender GET endpoints for the complete list.",
            "format": "int32",
            "nullable": true,
            "example": 1
          },
          "inactiveDate": {
            "type": "string",
            "description": "Inactive date in YYYY-MM-DD format. Set to null to remove the date. Do not include in the request to keep the current value.",
            "format": "date-time",
            "nullable": true,
            "example": "2021-01-01"
          },
          "terminationDate": {
            "type": "string",
            "description": "Termination date in YYYY-MM-DD format. Set to null to remove the date. Do not include in the request to keep the current value.",
            "format": "date-time",
            "nullable": true,
            "example": "2021-01-01"
          },
          "street": {
            "maxLength": 100,
            "type": "string",
            "description": "Street Address",
            "nullable": true,
            "example": "17-17 Route 208 North"
          },
          "city": {
            "maxLength": 100,
            "type": "string",
            "description": "City",
            "nullable": true,
            "example": "Fair lawn"
          },
          "stateId": {
            "maxLength": 100,
            "type": "string",
            "description": "State Id. Please see the State GET endpoints for the complete list.",
            "nullable": true,
            "example": "NJ"
          },
          "countryId": {
            "maxLength": 5,
            "type": "string",
            "description": "Country Id. Please see the Country GET endpoints for the complete list.",
            "nullable": true,
            "example": "USA"
          },
          "zip": {
            "maxLength": 50,
            "type": "string",
            "description": "Zip Code.",
            "nullable": true,
            "example": "07601"
          },
          "phone": {
            "maxLength": 25,
            "type": "string",
            "description": "Phone Number.",
            "nullable": true,
            "example": "+12016522229"
          },
          "affiliationId": {
            "type": "integer",
            "description": "Affiliation Id. Please see the Affiliation GET endpoints for the complete list.",
            "format": "int32",
            "nullable": true
          },
          "position": {
            "maxLength": 500,
            "type": "string",
            "description": "Position.",
            "nullable": true,
            "example": "Senior Partner"
          },
          "userRole": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserRoleInfo"
            },
            "description": "Assigned role. This determines the permission of the user.",
            "nullable": true
          },
          "userGroup": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SecurityUserSecurityGroupInfo"
            },
            "description": "User security groups.",
            "nullable": true
          },
          "userLicense": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserLicenseInfo"
            },
            "description": "User license information.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateCompetencyCommand": {
        "required": [
          "code",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 500,
            "minLength": 1,
            "type": "string",
            "description": "Name of the competency.",
            "example": "Competency 01"
          },
          "code": {
            "maxLength": 15,
            "minLength": 1,
            "type": "string",
            "description": "Competency Code. Unique Identifier of this record.",
            "example": "CO-01"
          }
        },
        "additionalProperties": false
      },
      "CreateCourseCommand": {
        "required": [
          "providerId",
          "title"
        ],
        "type": "object",
        "properties": {
          "title": {
            "maxLength": 1000,
            "minLength": 1,
            "type": "string",
            "description": "Course Title",
            "example": "Electronic Information: Strategies and Challenges"
          },
          "courseCode": {
            "type": "string",
            "description": "Course Code.",
            "nullable": true,
            "example": "EASC"
          },
          "providerId": {
            "type": "integer",
            "description": "Provider Id. Please see the Provider GET endpoint for the complete list.",
            "format": "int32",
            "example": 2
          },
          "description": {
            "maxLength": 8000,
            "type": "string",
            "description": "Course Description.",
            "nullable": true,
            "example": "Basic Strategies and Challenges"
          },
          "courseClassYear": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Course class years. Please see the Class Year GET endpoint for the the complete list.",
            "nullable": true,
            "example": [
              1,
              5
            ]
          },
          "courseCompetency": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Course competencies. Please see the Competency GET endpoint for the the complete list.",
            "nullable": true,
            "example": [
              3,
              9
            ]
          },
          "courseDepartment": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Course departments. Please see the Department GET endpoint for the the complete list.",
            "nullable": true,
            "example": [
              3,
              9
            ]
          },
          "courseLevel": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Course levels. Please see the Level GET endpoint for the the complete list.",
            "nullable": true,
            "example": [
              1,
              6
            ]
          },
          "coursePracticeArea": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Course practicea areas. Please see the Practice Area GET endpoint for the the complete list.",
            "nullable": true,
            "example": [
              2,
              3
            ]
          },
          "courseTag": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Course tags. Please see the TAG GET endpoint for the the complete list.",
            "nullable": true,
            "example": [
              1,
              2
            ]
          }
        },
        "additionalProperties": false
      },
      "CreateDepartmentCommand": {
        "required": [
          "code",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 500,
            "minLength": 1,
            "type": "string",
            "description": "Name of the department",
            "example": "Accounting"
          },
          "code": {
            "maxLength": 15,
            "minLength": 1,
            "type": "string",
            "description": "Department Code. Unique Identifier of this record.",
            "example": "DEP001"
          }
        },
        "additionalProperties": false
      },
      "CreateEmployeeCommand": {
        "required": [
          "email",
          "firstName",
          "lastName",
          "locationId",
          "personnelId",
          "userName"
        ],
        "type": "object",
        "properties": {
          "firstName": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "First Name.",
            "example": "Jane"
          },
          "middleName": {
            "maxLength": 100,
            "type": "string",
            "description": "Middle Name.",
            "nullable": true,
            "example": "Baker"
          },
          "lastName": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Last Name.",
            "example": "Smith"
          },
          "nickname": {
            "maxLength": 100,
            "type": "string",
            "description": "Nick name.",
            "nullable": true,
            "example": "Jane"
          },
          "email": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Email.",
            "format": "email",
            "example": "j.smith@micronsystems.com"
          },
          "userName": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "Login Id.",
            "example": "j.smith"
          },
          "personnelId": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "Unique Identifier of the user.",
            "example": "DBSP0023"
          },
          "genderId": {
            "type": "integer",
            "description": "Gender Id. Please see the Gender GET endpoints for the complete list.",
            "format": "int32",
            "nullable": true,
            "example": 1
          },
          "inactiveDate": {
            "type": "string",
            "description": "Inactive date in YYYY-MM-DD format. Set to null to remove the date. Do not include in the request to keep the current value.",
            "format": "date-time",
            "nullable": true,
            "example": "2021-01-01"
          },
          "terminationDate": {
            "type": "string",
            "description": "Termination date in YYYY-MM-DD format. Set to null to remove the date. Do not include in the request to keep the current value.",
            "format": "date-time",
            "nullable": true,
            "example": "2021-01-01"
          },
          "isAdmin": {
            "type": "boolean",
            "description": "true if the user is an administrator. false if the user is an employee.",
            "nullable": true,
            "example": false
          },
          "birthDate": {
            "type": "string",
            "description": "Birth date in YYYY-MM-DD format",
            "format": "date-time",
            "nullable": true,
            "example": "2021-01-01"
          },
          "graduationDate": {
            "type": "string",
            "description": "Graduation date in YYYY-MM-DD format",
            "format": "date-time",
            "nullable": true,
            "example": "2021-01-01"
          },
          "hireDate": {
            "type": "string",
            "description": "Hire date in YYYY-MM-DD format",
            "format": "date-time",
            "nullable": true,
            "example": "2021-01-01"
          },
          "locationId": {
            "type": "integer",
            "description": "Location Id. Please see the Location GET endpoints for the complete list.",
            "format": "int32",
            "example": 1
          },
          "userRelationship": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserRelationshipDto"
            },
            "description": "Assigned administrative assistant or supervisor of the user.",
            "nullable": true
          },
          "userRole": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserRoleInfo"
            },
            "description": "Assigned role. This determines the permission of the user.",
            "nullable": true
          },
          "userLicense": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserLicenseInfo"
            },
            "description": "User license information.",
            "nullable": true
          },
          "userPosition": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserPositionDto"
            },
            "description": "User position information.",
            "nullable": true
          },
          "userClassYear": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserClassYearDto"
            },
            "description": "User class year information.",
            "nullable": true
          },
          "userDepartment": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserDepartmentDto"
            },
            "description": "User department information.",
            "nullable": true
          },
          "userEthnicity": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserEthnicityDto"
            },
            "description": "User ethnicity information.",
            "nullable": true
          },
          "userGroup": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SecurityUserSecurityGroupInfo"
            },
            "description": "User security groups.",
            "nullable": true
          },
          "userLevel": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserLevelDto"
            },
            "description": "User level information.",
            "nullable": true
          },
          "userPracticeArea": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserPracticeAreaDto"
            },
            "description": "User practice area information.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateEthnicityCommand": {
        "required": [
          "code",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 500,
            "minLength": 1,
            "type": "string",
            "description": "Name of the ethnicity.",
            "example": "American"
          },
          "code": {
            "maxLength": 15,
            "minLength": 1,
            "type": "string",
            "description": "Ethnicity Code. Unique Identifier of this record.",
            "example": "ETH001"
          }
        },
        "additionalProperties": false
      },
      "CreateGenderCommand": {
        "required": [
          "code",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 500,
            "minLength": 1,
            "type": "string",
            "description": "Name of the gender",
            "example": "Female"
          },
          "code": {
            "maxLength": 15,
            "minLength": 1,
            "type": "string",
            "description": "Gender Code. Unique Identifier of this record.",
            "example": "GEN001"
          }
        },
        "additionalProperties": false
      },
      "CreateGroupCommand": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Name of the security group.",
            "example": "Administrator - Limited Access"
          },
          "description": {
            "maxLength": 1000,
            "type": "string",
            "description": "Description of the security group.",
            "nullable": true,
            "example": "Administrator with no library access"
          },
          "isActive": {
            "type": "boolean",
            "description": "Indicates if the record is active or inactive.",
            "example": true
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserGroupInfo"
            },
            "description": "List of users to be associated to the new security group.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateLearningPlanCommand": {
        "required": [
          "title"
        ],
        "type": "object",
        "properties": {
          "title": {
            "maxLength": 1000,
            "minLength": 1,
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "notes": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "integer",
            "format": "int32"
          },
          "timeframeOfCompletion": {
            "$ref": "#/components/schemas/LearningPlanTimeframeOfCompletionEnum"
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "duration": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "durationType": {
            "$ref": "#/components/schemas/DurationTypeEnum"
          },
          "requiredCourses": {
            "type": "integer",
            "format": "int32"
          },
          "isSelfEnrolled": {
            "type": "boolean"
          },
          "addParticipantEmail": {
            "type": "boolean"
          },
          "deleteParticipantEmail": {
            "type": "boolean"
          },
          "updateParticipantStatusEmail": {
            "type": "boolean"
          },
          "learningPlanActivities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LearningPlanActivityDto"
            },
            "nullable": true
          },
          "learningPlanCompetencies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LearningPlanCompetencyDto"
            },
            "nullable": true
          },
          "learningPlanCourses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LearningPlanCourseDto"
            },
            "nullable": true
          },
          "learningPlanTags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LearningPlanTagDto"
            },
            "nullable": true
          },
          "learningPlanMaterials": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LearningPlanMaterialDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateLevelCommand": {
        "required": [
          "code",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 500,
            "minLength": 1,
            "type": "string",
            "description": "Name of the Level",
            "example": "Associate"
          },
          "code": {
            "maxLength": 15,
            "minLength": 1,
            "type": "string",
            "description": "Level Code. Unique Identifier of this record.",
            "example": "LVL001"
          }
        },
        "additionalProperties": false
      },
      "CreateLocationCommand": {
        "required": [
          "code",
          "name",
          "timezoneId"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 500,
            "minLength": 1,
            "type": "string",
            "description": "Name of the location.",
            "example": "Acme Corporation"
          },
          "address": {
            "maxLength": 100,
            "type": "string",
            "description": "Address of the Firm Office or Third Party Location.",
            "nullable": true,
            "example": "10 Broadway"
          },
          "code": {
            "maxLength": 15,
            "minLength": 1,
            "type": "string",
            "description": "Location Code. Unique identifier of this record.",
            "example": "L-01"
          },
          "city": {
            "maxLength": 100,
            "type": "string",
            "description": "The city where the location is based.",
            "nullable": true,
            "example": "New York"
          },
          "countryId": {
            "maxLength": 5,
            "type": "string",
            "description": "Id of the country.",
            "nullable": true,
            "example": "1"
          },
          "stateId": {
            "maxLength": 100,
            "type": "string",
            "description": "Id of the state.",
            "nullable": true,
            "example": "1"
          },
          "zip": {
            "maxLength": 50,
            "type": "string",
            "description": "Zip code of the location's address.",
            "nullable": true,
            "example": "10004"
          },
          "telephone": {
            "maxLength": 25,
            "type": "string",
            "description": "Telephone of the Firm Office or Third Party Location.",
            "nullable": true,
            "example": "555-666-7777"
          },
          "timezoneId": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Id of the time zone.",
            "example": "US/Eastern"
          },
          "countyId": {
            "maxLength": 100,
            "type": "string",
            "description": "Id of the county.",
            "nullable": true,
            "example": "1"
          },
          "isFirmOffice": {
            "type": "boolean",
            "description": "Indicates if the record is a firm office location or not.",
            "nullable": true,
            "example": true
          }
        },
        "additionalProperties": false
      },
      "CreatePositionCommand": {
        "required": [
          "code",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 500,
            "minLength": 1,
            "type": "string",
            "description": "Name of the position.",
            "example": "Associate"
          },
          "code": {
            "maxLength": 15,
            "minLength": 1,
            "type": "string",
            "description": "Position Code. Unique Identifier of this record.",
            "example": "P001"
          }
        },
        "additionalProperties": false
      },
      "CreatePracticeAreaCommand": {
        "required": [
          "code",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 500,
            "minLength": 1,
            "type": "string",
            "description": "Name of the practice area",
            "example": "Litigation"
          },
          "code": {
            "maxLength": 15,
            "minLength": 1,
            "type": "string",
            "description": "Practice Area Code. Unique Identifier of this record.",
            "example": "PA001"
          }
        },
        "additionalProperties": false
      },
      "CreateProviderCommand": {
        "required": [
          "code",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 500,
            "minLength": 1,
            "type": "string",
            "description": "Name of the provider",
            "example": "Accounting"
          },
          "isInHouse": {
            "type": "boolean",
            "description": "Indicates if the record is an In-House provider. If this is false, the provider will be flagged as Third-Party.",
            "nullable": true,
            "example": true
          },
          "code": {
            "maxLength": 15,
            "minLength": 1,
            "type": "string",
            "description": "Provider Code. Unique Identifier of this record.",
            "example": "PROV001"
          },
          "url": {
            "maxLength": 100,
            "type": "string",
            "description": "An HTML link that opens a provider's site",
            "nullable": true,
            "example": "https://www.micronsystems.com/"
          }
        },
        "additionalProperties": false
      },
      "CreateRoomCommand": {
        "required": [
          "code",
          "locationId",
          "name"
        ],
        "type": "object",
        "properties": {
          "locationId": {
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "integer",
            "description": "Location Id. Please see the Location GET endpoints for the complete list",
            "format": "int32",
            "example": 1
          },
          "name": {
            "maxLength": 500,
            "minLength": 1,
            "type": "string",
            "description": "Name of the room",
            "example": "Room 501"
          },
          "capacity": {
            "type": "integer",
            "description": "Number of person a room can handle",
            "format": "int32",
            "example": 20
          },
          "code": {
            "maxLength": 15,
            "minLength": 1,
            "type": "string",
            "description": "Room Code. Unique Identifier of this record.",
            "example": "ROOM001"
          }
        },
        "additionalProperties": false
      },
      "CreateSessionCommand": {
        "required": [
          "sessions"
        ],
        "type": "object",
        "properties": {
          "sessions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateSessionCommandDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateSessionCommandDto": {
        "required": [
          "courseFormatId",
          "courseId",
          "startDate"
        ],
        "type": "object",
        "properties": {
          "courseId": {
            "type": "integer",
            "description": "Course Id.",
            "format": "int32",
            "example": 101
          },
          "title": {
            "maxLength": 1000,
            "type": "string",
            "description": "Session Title.",
            "nullable": true,
            "example": "Ethics 101: Part 1"
          },
          "code": {
            "type": "string",
            "description": "Session Code. Unique identifier of this session.",
            "nullable": true,
            "example": "S01001"
          },
          "courseFormatId": {
            "type": "integer",
            "description": "Course Format. Please use the CourseFormat GET endpoint for the complete list.",
            "format": "int32",
            "example": 1
          },
          "startDate": {
            "minLength": 1,
            "type": "string",
            "description": "Session start date in YYYY-MM-DD format.",
            "format": "date-time",
            "example": "2021-01-01"
          },
          "endDate": {
            "type": "string",
            "description": "Session end date in YYYY-MM-DD format.",
            "format": "date-time",
            "nullable": true,
            "example": "2021-01-02"
          },
          "startTime": {
            "type": "string",
            "description": "Session start time.",
            "nullable": true,
            "example": "09:00 AM"
          },
          "endTime": {
            "type": "string",
            "description": "Session end time.",
            "nullable": true,
            "example": "10:00 AM"
          },
          "locationId": {
            "type": "integer",
            "description": "Location Id. Please use the Location GET endpoint for the complete list.",
            "format": "int32",
            "nullable": true,
            "example": 1
          },
          "timezoneId": {
            "type": "string",
            "description": "Timezone Id. Please use the Timezone GET endpoint for the complete list.",
            "nullable": true,
            "example": "US/Eastern"
          },
          "roomId": {
            "type": "integer",
            "description": "Room Id. Please use the Room GET endpoint for the complete list.",
            "format": "int32",
            "nullable": true,
            "example": 1
          },
          "cost": {
            "type": "number",
            "description": "Cost.",
            "format": "float",
            "nullable": true,
            "example": 10
          },
          "areQuestionsAllowed": {
            "type": "boolean",
            "description": "Set to true if the session allows for questions. Default is false.",
            "example": false
          },
          "url": {
            "maxLength": 500,
            "type": "string",
            "description": "URL.",
            "nullable": true,
            "example": "https://www.micronsystems.com"
          },
          "detail": {
            "type": "string",
            "description": "Session Detail.",
            "nullable": true,
            "example": "Ethics 101 offers an exciting look into the history of moral principles that dictate human behavior."
          },
          "isOpenToClient": {
            "type": "boolean",
            "description": "Set to true to open the session for client registration. Default is false.",
            "example": true
          },
          "isIndividualSessionDateAllowed": {
            "type": "boolean",
            "description": "Set to true to allow. Default is false.",
            "example": true
          },
          "isPublished": {
            "type": "boolean",
            "description": "Set to true to publish the session. This will make the session available in Portal.",
            "example": true
          },
          "sessionLicenses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SessionLicenseDto"
            },
            "description": "Session License Information.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateTagCommand": {
        "required": [
          "code",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 500,
            "minLength": 1,
            "type": "string",
            "description": "Name of the tag",
            "example": "General"
          },
          "code": {
            "maxLength": 15,
            "minLength": 1,
            "type": "string",
            "description": "Tag Code. Unique Identifier of this record.",
            "example": "TAG001"
          }
        },
        "additionalProperties": false
      },
      "CriteriaStatusEnum": {
        "enum": [
          0,
          1,
          2,
          3
        ],
        "type": "integer",
        "description": "```0=ManuallyAdded``` ```1=MetCriteria``` ```2=NoLongerMeetsCriteria``` ```3=SelfRegistered``` ",
        "format": "int32",
        "x-enumNames": [
          "ManuallyAdded",
          "MetCriteria",
          "NoLongerMeetsCriteria",
          "SelfRegistered"
        ]
      },
      "DeleteAffiliationCommand": {
        "type": "object",
        "properties": {
          "affiliationIdList": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Comma separated list of Ids of records to delete",
            "nullable": true,
            "example": [
              8,
              2,
              3
            ]
          }
        },
        "additionalProperties": false
      },
      "DeleteClassYearCommand": {
        "type": "object",
        "properties": {
          "classYearIdList": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Comma separated list of Ids of records to delete",
            "nullable": true,
            "example": [
              8,
              4,
              3
            ]
          }
        },
        "additionalProperties": false
      },
      "DeleteCompetencyCommand": {
        "type": "object",
        "properties": {
          "competencyIdList": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Comma separated list of Ids of records to delete",
            "nullable": true,
            "example": [
              8,
              5
            ]
          }
        },
        "additionalProperties": false
      },
      "DeleteCourseCommand": {
        "required": [
          "courseIdList"
        ],
        "type": "object",
        "properties": {
          "courseIdList": {
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Comma separated list of Ids of courses to delete",
            "example": [
              15,
              161,
              23
            ]
          }
        },
        "additionalProperties": false
      },
      "DeleteDepartmentCommand": {
        "required": [
          "departmentIdList"
        ],
        "type": "object",
        "properties": {
          "departmentIdList": {
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Comma separated list of Ids of records to delete",
            "example": [
              5,
              3
            ]
          }
        },
        "additionalProperties": false
      },
      "DeleteEthnicityCommand": {
        "type": "object",
        "properties": {
          "ethnicityIdList": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Comma separated list of Ids of records to delete.",
            "nullable": true,
            "example": [
              5,
              3
            ]
          }
        },
        "additionalProperties": false
      },
      "DeleteGenderCommand": {
        "type": "object",
        "properties": {
          "genderIdList": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Comma separated list of Ids of records to delete.",
            "nullable": true,
            "example": [
              1,
              3
            ]
          }
        },
        "additionalProperties": false
      },
      "DeleteGroupCommand": {
        "type": "object",
        "properties": {
          "groupIdList": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Comma separated list of Ids of records to delete",
            "nullable": true,
            "example": [
              1,
              3
            ]
          }
        },
        "additionalProperties": false
      },
      "DeleteLearningPlanCommand": {
        "type": "object",
        "properties": {
          "learningPlanIdList": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DeleteLearningPlanParticipantCommand": {
        "type": "object",
        "properties": {
          "learningPlanId": {
            "type": "integer",
            "format": "int32"
          },
          "participantIdList": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DeleteLevelCommand": {
        "type": "object",
        "properties": {
          "levelIdList": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Comma separated list of Ids of records to delete",
            "nullable": true,
            "example": [
              3,
              4
            ]
          }
        },
        "additionalProperties": false
      },
      "DeleteLocationCommand": {
        "type": "object",
        "properties": {
          "locationIdList": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Comma separated list of Ids of records to delete.",
            "nullable": true,
            "example": [
              5,
              6
            ]
          }
        },
        "additionalProperties": false
      },
      "DeletePositionCommand": {
        "type": "object",
        "properties": {
          "positionIdList": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Comma separated list of Ids of records to delete",
            "nullable": true,
            "example": [
              5,
              6
            ]
          }
        },
        "additionalProperties": false
      },
      "DeletePracticeAreaCommand": {
        "type": "object",
        "properties": {
          "practiceAreaIdList": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Comma separated list of Ids of records to delete",
            "nullable": true,
            "example": [
              1,
              6
            ]
          }
        },
        "additionalProperties": false
      },
      "DeleteProviderCommand": {
        "type": "object",
        "properties": {
          "providerIdList": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Comma separated list of Ids of records to delete",
            "nullable": true,
            "example": [
              1,
              3
            ]
          }
        },
        "additionalProperties": false
      },
      "DeleteRoomCommand": {
        "type": "object",
        "properties": {
          "roomIdList": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Comma separated list of Ids of records to delete",
            "nullable": true,
            "example": [
              5,
              7
            ]
          }
        },
        "additionalProperties": false
      },
      "DeleteSessionCommand": {
        "required": [
          "sessionIdList"
        ],
        "type": "object",
        "properties": {
          "sessionIdList": {
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Comma separated list of Ids of records to delete",
            "example": [
              8,
              3
            ]
          }
        },
        "additionalProperties": false
      },
      "DeleteSessionParticipantCommand": {
        "required": [
          "sessionParticipantIdList"
        ],
        "type": "object",
        "properties": {
          "sessionId": {
            "type": "integer",
            "description": "Session Id. Unique identifier of the session.",
            "format": "int32",
            "example": 1
          },
          "sessionParticipantIdList": {
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Comma separated list of session participant Ids.",
            "example": [
              301,
              124
            ]
          }
        },
        "additionalProperties": false
      },
      "DeleteTagCommand": {
        "type": "object",
        "properties": {
          "tagIdList": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Comma separated list of Ids of records to delete",
            "nullable": true,
            "example": [
              5,
              7
            ]
          }
        },
        "additionalProperties": false
      },
      "DeleteUserCommand": {
        "required": [
          "userIdList"
        ],
        "type": "object",
        "properties": {
          "userIdList": {
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Comma separated list of User Ids."
          }
        },
        "additionalProperties": false
      },
      "DeleteUserLicenseCommand": {
        "required": [
          "licenseIdList",
          "userId"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "description": "Unique Identifier of the user in CE Manager.",
            "format": "int32",
            "example": 252
          },
          "licenseIdList": {
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "List of License Ids. Please use the License GET endpoints for the complete list.",
            "example": 381
          }
        },
        "additionalProperties": false
      },
      "DepartmentInfo": {
        "type": "object",
        "properties": {
          "departmentId": {
            "type": "integer",
            "description": "Department Id. Unique identifier of this record.",
            "format": "int32",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Name of the department",
            "nullable": true,
            "example": "Accounting"
          },
          "isActive": {
            "type": "boolean",
            "description": "Indicates if the record is active or archived.",
            "example": true
          },
          "code": {
            "type": "string",
            "description": "Department Code. Unique Identifier of this record.",
            "nullable": true,
            "example": "DEP001"
          },
          "courseCount": {
            "type": "integer",
            "description": "Number of courses associated to this department.",
            "format": "int32",
            "example": 2
          },
          "userCount": {
            "type": "integer",
            "description": "Number of users associated to this department.",
            "format": "int32",
            "example": 2
          }
        },
        "additionalProperties": false
      },
      "DepartmentInfoList": {
        "type": "object",
        "properties": {
          "departments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DepartmentInfo"
            },
            "nullable": true
          },
          "recordCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "DurationTypeEnum": {
        "enum": [
          1,
          2,
          3
        ],
        "type": "integer",
        "description": "```1=days``` ```2=weeks``` ```3=months``` ",
        "format": "int32",
        "x-enumNames": [
          "days",
          "weeks",
          "months"
        ]
      },
      "EthnicityInfo": {
        "type": "object",
        "properties": {
          "ethnicityId": {
            "type": "integer",
            "description": "Ethnicity Id. Unique identifier of this record.",
            "format": "int32",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Name of the Ethnicity",
            "nullable": true,
            "example": "American"
          },
          "isActive": {
            "type": "boolean",
            "description": "Indicates if the record is active or archived.",
            "example": true
          },
          "code": {
            "type": "string",
            "description": "Ethnicity Code. Unique Identifier of this record.",
            "nullable": true,
            "example": "ETH001"
          },
          "userCount": {
            "type": "integer",
            "description": "Number of users associated to this Ethnicity.",
            "format": "int32",
            "example": 2
          }
        },
        "additionalProperties": false
      },
      "EthnicityInfoList": {
        "type": "object",
        "properties": {
          "ethnicities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EthnicityInfo"
            },
            "nullable": true
          },
          "recordCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "GenderInfo": {
        "type": "object",
        "properties": {
          "genderId": {
            "type": "integer",
            "description": "Gender Id. Unique identifier of this record.",
            "format": "int32",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Name of the Gender",
            "nullable": true,
            "example": "Female"
          },
          "isActive": {
            "type": "boolean",
            "description": "Indicates if the record is active or archived.",
            "example": true
          },
          "code": {
            "type": "string",
            "description": "Gender Code. Unique Identifier of this record.",
            "nullable": true,
            "example": "GEN001"
          },
          "userCount": {
            "type": "integer",
            "description": "Number of users associated to this Gender.",
            "format": "int32",
            "example": 2
          }
        },
        "additionalProperties": false
      },
      "GenderInfoList": {
        "type": "object",
        "properties": {
          "genders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GenderInfo"
            },
            "nullable": true
          },
          "recordCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "GetAllAffiliationQuery": {
        "type": "object",
        "properties": {
          "page": {
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "integer",
            "description": "Page number of result set.",
            "format": "int32",
            "nullable": true,
            "example": 1
          },
          "pageSize": {
            "type": "integer",
            "description": "Number of records that will be returned.",
            "format": "int32",
            "nullable": true,
            "example": 10
          },
          "sortBy": {
            "type": "string",
            "description": "Sort the data by the given field name",
            "nullable": true,
            "example": "name"
          },
          "searchCriteria": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Fixed set of fields that can be used to search for specific record(s).",
            "nullable": true,
            "example": [
              "Active",
              "Archived"
            ]
          }
        },
        "additionalProperties": false
      },
      "GetAllClassYearQuery": {
        "type": "object",
        "properties": {
          "page": {
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "integer",
            "description": "Page number of result set.",
            "format": "int32",
            "nullable": true,
            "example": 1
          },
          "pageSize": {
            "type": "integer",
            "description": "Number of records that will be returned.",
            "format": "int32",
            "nullable": true,
            "example": 10
          },
          "sortBy": {
            "type": "string",
            "description": "Sort the data by the given field name",
            "nullable": true,
            "example": "name"
          },
          "searchCriteria": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Fixed set of fields that can be used to search for specific record(s).",
            "nullable": true,
            "example": [
              "Active",
              "Archived"
            ]
          }
        },
        "additionalProperties": false
      },
      "GetAllCompetenciesQuery": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "description": "Page number of result set.",
            "format": "int32",
            "nullable": true,
            "example": 1
          },
          "pageSize": {
            "type": "integer",
            "description": "Number of records that will be returned.",
            "format": "int32",
            "nullable": true,
            "example": 10
          },
          "sortBy": {
            "type": "string",
            "description": "Sort the data by the given field name",
            "nullable": true,
            "example": "name"
          },
          "searchCriteria": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Fixed set of fields that can be used to search for specific record(s).",
            "nullable": true,
            "example": [
              "Active",
              "Archived"
            ]
          }
        },
        "additionalProperties": false
      },
      "GetAllCoursesV2Query": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "description": "Page number of result set.",
            "format": "int32",
            "nullable": true,
            "example": 1
          },
          "pageSize": {
            "type": "integer",
            "description": "Number of records that will be returned.",
            "format": "int32",
            "nullable": true,
            "example": 10
          },
          "filterBy": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Fixed set of fields that can be used to filter the records.",
            "nullable": true,
            "example": [
              "Title[contains]:Ethics"
            ]
          },
          "sortBy": {
            "type": "string",
            "description": "Sort the data by the given field name",
            "nullable": true,
            "example": "providerName"
          },
          "searchCriteria": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Fixed set of fields that can be used to search for specific record(s).",
            "nullable": true,
            "example": [
              "ProviderIds: 1, 2",
              "SessionFormat: 1, 2"
            ]
          }
        },
        "additionalProperties": false
      },
      "GetAllDepartmentQuery": {
        "type": "object",
        "properties": {
          "page": {
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "integer",
            "description": "Page number of result set.",
            "format": "int32",
            "nullable": true,
            "example": 1
          },
          "pageSize": {
            "type": "integer",
            "description": "Number of records that will be returned.",
            "format": "int32",
            "nullable": true,
            "example": 10
          },
          "sortBy": {
            "type": "string",
            "description": "Sort the data by the given field name",
            "nullable": true,
            "example": "name"
          },
          "searchCriteria": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Fixed set of fields that can be used to search for specific record(s).",
            "nullable": true,
            "example": [
              "Active",
              "Archived"
            ]
          }
        },
        "additionalProperties": false
      },
      "GetAllEthnicitiesQuery": {
        "type": "object",
        "properties": {
          "page": {
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "integer",
            "description": "Page number of result set.",
            "format": "int32",
            "nullable": true,
            "example": 1
          },
          "pageSize": {
            "type": "integer",
            "description": "Number of records that will be returned.",
            "format": "int32",
            "nullable": true,
            "example": 10
          },
          "sortBy": {
            "type": "string",
            "description": "Sort the data by the given field name",
            "nullable": true,
            "example": "name"
          },
          "searchCriteria": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Fixed set of fields that can be used to search for specific record(s).",
            "nullable": true,
            "example": [
              "Active",
              "Archived"
            ]
          }
        },
        "additionalProperties": false
      },
      "GetAllGenderQuery": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "description": "Page number of result set.",
            "format": "int32",
            "nullable": true,
            "example": 1
          },
          "pageSize": {
            "type": "integer",
            "description": "Number of records that will be returned.",
            "format": "int32",
            "nullable": true,
            "example": 10
          },
          "sortBy": {
            "type": "string",
            "description": "Sort the data by the given field name",
            "nullable": true,
            "example": "name"
          },
          "searchCriteria": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Fixed set of fields that can be used to search for specific record(s).",
            "nullable": true,
            "example": [
              "Active",
              "Archived"
            ]
          }
        },
        "additionalProperties": false
      },
      "GetAllLearningPlansQuery": {
        "type": "object",
        "properties": {
          "page": {
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "integer",
            "description": "Page number of result set.",
            "format": "int32",
            "nullable": true,
            "example": 1
          },
          "pageSize": {
            "type": "integer",
            "description": "Number of records that will be returned.",
            "format": "int32",
            "nullable": true,
            "example": 10
          },
          "sortBy": {
            "type": "string",
            "description": "Sort the data by the given field name",
            "nullable": true,
            "example": "name"
          },
          "filterBy": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Fixed set of fields that can be used to filter the records.",
            "nullable": true,
            "example": [
              "Title[contains]:Ethics"
            ]
          },
          "searchCriteria": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Fixed set of fields that can be used to search for specific record(s).",
            "nullable": true,
            "example": [
              "Active",
              "Archived"
            ]
          }
        },
        "additionalProperties": false
      },
      "GetAllLevelsQuery": {
        "type": "object",
        "properties": {
          "page": {
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "integer",
            "description": "Page number of result set.",
            "format": "int32",
            "nullable": true,
            "example": 1
          },
          "pageSize": {
            "type": "integer",
            "description": "Number of records that will be returned.",
            "format": "int32",
            "nullable": true,
            "example": 10
          },
          "sortBy": {
            "type": "string",
            "description": "Sort the data by the given field name",
            "nullable": true,
            "example": "name"
          },
          "searchCriteria": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Fixed set of fields that can be used to search for specific record(s).",
            "nullable": true,
            "example": [
              "Active",
              "Archived"
            ]
          }
        },
        "additionalProperties": false
      },
      "GetAllLocationQuery": {
        "type": "object",
        "properties": {
          "page": {
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "integer",
            "description": "Page number of result set.",
            "format": "int32",
            "nullable": true,
            "example": 1
          },
          "pageSize": {
            "type": "integer",
            "description": "Number of records that will be returned.",
            "format": "int32",
            "nullable": true,
            "example": 10
          },
          "sortBy": {
            "type": "string",
            "description": "Sort the data by the given field name",
            "nullable": true,
            "example": "name"
          },
          "searchCriteria": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Fixed set of fields that can be used to search for specific record(s).",
            "nullable": true,
            "example": [
              "Active",
              "Archived"
            ]
          }
        },
        "additionalProperties": false
      },
      "GetAllPositionsQuery": {
        "type": "object",
        "properties": {
          "page": {
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "integer",
            "description": "Page number of result set.",
            "format": "int32",
            "nullable": true,
            "example": 1
          },
          "pageSize": {
            "type": "integer",
            "description": "Number of records that will be returned.",
            "format": "int32",
            "nullable": true,
            "example": 10
          },
          "sortBy": {
            "type": "string",
            "description": "Sort the data by the given field name",
            "nullable": true,
            "example": "name"
          },
          "searchCriteria": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Fixed set of fields that can be used to search for specific record(s).",
            "nullable": true,
            "example": [
              "Active",
              "Archived"
            ]
          }
        },
        "additionalProperties": false
      },
      "GetAllPracticeAreasQuery": {
        "type": "object",
        "properties": {
          "page": {
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "integer",
            "description": "Page number of result set.",
            "format": "int32",
            "nullable": true,
            "example": 1
          },
          "pageSize": {
            "type": "integer",
            "description": "Number of records that will be returned.",
            "format": "int32",
            "nullable": true,
            "example": 10
          },
          "sortBy": {
            "type": "string",
            "description": "Sort the data by the given field name",
            "nullable": true,
            "example": "name"
          },
          "searchCriteria": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Fixed set of fields that can be used to search for specific record(s).",
            "nullable": true,
            "example": [
              "Active",
              "Archived"
            ]
          }
        },
        "additionalProperties": false
      },
      "GetAllProviderQuery": {
        "type": "object",
        "properties": {
          "page": {
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "integer",
            "description": "Page number of result set.",
            "format": "int32",
            "nullable": true,
            "example": 1
          },
          "pageSize": {
            "type": "integer",
            "description": "Number of records that will be returned.",
            "format": "int32",
            "nullable": true,
            "example": 10
          },
          "sortBy": {
            "type": "string",
            "description": "Sort the data by the given field name",
            "nullable": true,
            "example": "name"
          },
          "searchCriteria": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Fixed set of fields that can be used to search for specific record(s).",
            "nullable": true,
            "example": [
              "Active",
              "Archived"
            ]
          }
        },
        "additionalProperties": false
      },
      "GetAllRoomsQuery": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "description": "Page number of result set.",
            "format": "int32",
            "nullable": true,
            "example": 1
          },
          "pageSize": {
            "type": "integer",
            "description": "Number of records that will be returned.",
            "format": "int32",
            "nullable": true,
            "example": 10
          },
          "sortBy": {
            "type": "string",
            "description": "Sort the data by the given field name",
            "nullable": true,
            "example": "name"
          },
          "searchCriteria": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Fixed set of fields that can be used to search for specific record(s).",
            "nullable": true,
            "example": [
              "Active",
              "Archived"
            ]
          }
        },
        "additionalProperties": false
      },
      "GetAllSecurityGroupsQuery": {
        "type": "object",
        "properties": {
          "page": {
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "integer",
            "description": "Page number of result set.",
            "format": "int32",
            "nullable": true,
            "example": 1
          },
          "pageSize": {
            "type": "integer",
            "description": "Number of records that will be returned.",
            "format": "int32",
            "nullable": true,
            "example": 10
          },
          "sortBy": {
            "type": "string",
            "description": "Sort the data by the given field name",
            "nullable": true,
            "example": "name"
          },
          "filterBy": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Fixed set of fields that can be used to filter the records.",
            "nullable": true,
            "example": [
              "Title[contains]:Ethics"
            ]
          },
          "searchCriteria": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Fixed set of fields that can be used to search for specific record(s).",
            "nullable": true,
            "example": [
              "Active",
              "Archived"
            ]
          }
        },
        "additionalProperties": false
      },
      "GetAllSessionByCourseIdQuery": {
        "required": [
          "courseId"
        ],
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "description": "Page number of result set.",
            "format": "int32",
            "nullable": true,
            "example": 1
          },
          "pageSize": {
            "type": "integer",
            "description": "Number of records that will be returned.",
            "format": "int32",
            "nullable": true,
            "example": 10
          },
          "courseId": {
            "type": "integer",
            "description": "Course Id.",
            "format": "int32",
            "example": 171
          },
          "searchCriteria": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Fixed set of fields that can be used to search for specific record(s).",
            "nullable": true,
            "example": [
              "PreviousSessionsOnly",
              "UpcomingSessionsOnly"
            ]
          },
          "sortBy": {
            "type": "string",
            "description": "Sort the data by the given field name",
            "nullable": true,
            "example": "title"
          }
        },
        "additionalProperties": false
      },
      "GetAllSessionByDateRangeQuery": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "description": "Page number of result set.",
            "format": "int32",
            "nullable": true,
            "example": 1
          },
          "pageSize": {
            "type": "integer",
            "description": "Number of records that will be returned.",
            "format": "int32",
            "nullable": true,
            "example": 10
          },
          "filterBy": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Fixed set of fields that can be used to filter the records.",
            "nullable": true,
            "example": [
              "Title[contains]:Ethics"
            ]
          },
          "startDate": {
            "type": "string",
            "description": "Session Start Date in YYYY-MM-DD format.",
            "format": "date-time",
            "example": "2021-01-01"
          },
          "endDate": {
            "type": "string",
            "description": "Session End Date in YYYY-MM-DD format.",
            "format": "date-time",
            "example": "2021-12-31"
          },
          "sortBy": {
            "type": "string",
            "description": "Sort the data by the given field name",
            "nullable": true,
            "example": "title"
          },
          "searchCriteria": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Fixed set of fields that can be used to search for specific record(s).",
            "nullable": true,
            "example": [
              "ProviderIds: 1,2",
              "SessionFormat: 1,2"
            ]
          }
        },
        "additionalProperties": false
      },
      "GetAllSessionEvaluationsQuery": {
        "required": [
          "sessionId"
        ],
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "description": "Page number of result set.",
            "format": "int32",
            "nullable": true,
            "example": 1
          },
          "pageSize": {
            "type": "integer",
            "description": "Number of records that will be returned.",
            "format": "int32",
            "nullable": true,
            "example": 10
          },
          "sessionId": {
            "type": "integer",
            "description": "Session Id. Unique identifier of the session.",
            "format": "int32",
            "example": 1
          }
        },
        "additionalProperties": false
      },
      "GetAllSessionParticipantsQuery": {
        "required": [
          "sessionId"
        ],
        "type": "object",
        "properties": {
          "page": {
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "integer",
            "description": "Page number of result set.",
            "format": "int32",
            "nullable": true,
            "example": 1
          },
          "pageSize": {
            "type": "integer",
            "description": "Number of records that will be returned.",
            "format": "int32",
            "nullable": true,
            "example": 10
          },
          "sessionId": {
            "type": "integer",
            "description": "Session Id. Unique identifier of the the session.",
            "format": "int32",
            "example": 1
          },
          "filterBy": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Fixed set of fields that can be used to filter the records.",
            "nullable": true,
            "example": [
              "firstName[contains]:Jane"
            ]
          },
          "searchCriteria": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Fixed set of fields that can be used to search for specific record(s).",
            "nullable": true,
            "example": [
              "Registered",
              "Validated"
            ]
          },
          "sortBy": {
            "type": "string",
            "description": "Sort the data by the given field name",
            "nullable": true,
            "example": "firstName"
          }
        },
        "additionalProperties": false
      },
      "GetAllSessionsQuery": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "description": "Page number of result set.",
            "format": "int32",
            "nullable": true,
            "example": 1
          },
          "pageSize": {
            "type": "integer",
            "description": "Number of records that will be returned.",
            "format": "int32",
            "nullable": true,
            "example": 10
          },
          "filterBy": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Fixed set of fields that can be used to filter the records.",
            "nullable": true,
            "example": [
              "Title[contains]:Ethics"
            ]
          },
          "sortBy": {
            "type": "string",
            "description": "Sort the data by the given field name",
            "nullable": true,
            "example": "title"
          },
          "searchCriteria": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Fixed set of fields that can be used to search for specific record(s).",
            "nullable": true,
            "example": [
              "Active",
              "Cancelled"
            ]
          }
        },
        "additionalProperties": false
      },
      "GetAllTagsQuery": {
        "type": "object",
        "properties": {
          "page": {
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "integer",
            "description": "Page number of result set.",
            "format": "int32",
            "nullable": true,
            "example": 1
          },
          "pageSize": {
            "type": "integer",
            "description": "Number of records that will be returned.",
            "format": "int32",
            "nullable": true,
            "example": 10
          },
          "sortBy": {
            "type": "string",
            "description": "Sort the data by the given field name",
            "nullable": true,
            "example": "name"
          },
          "searchCriteria": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Fixed set of fields that can be used to search for specific record(s).",
            "nullable": true,
            "example": [
              "Active",
              "Archived"
            ]
          }
        },
        "additionalProperties": false
      },
      "GetAllUsersQuery": {
        "type": "object",
        "properties": {
          "page": {
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "integer",
            "description": "Page number of result set.",
            "format": "int32",
            "nullable": true,
            "example": 1
          },
          "pageSize": {
            "type": "integer",
            "description": "Number of records that will be returned.",
            "format": "int32",
            "nullable": true,
            "example": 10
          },
          "sortBy": {
            "type": "string",
            "description": "Sort the data by the given field name",
            "nullable": true,
            "example": "firstName"
          },
          "searchCriteria": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Fixed set of fields that can be used to search for specific record(s).",
            "nullable": true,
            "example": [
              "UserStatus: 1, 2"
            ]
          },
          "filterBy": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Fixed set of fields that can be used to filter the records.",
            "nullable": true,
            "example": [
              "keyword[contains]:jane"
            ]
          }
        },
        "additionalProperties": false
      },
      "GetAllUsersWithLicensesCurrentPeriodQuery": {
        "type": "object",
        "properties": {
          "page": {
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "integer",
            "description": "Page number of result set.",
            "format": "int32",
            "nullable": true,
            "example": 1
          },
          "pageSize": {
            "type": "integer",
            "description": "Number of records that will be returned.",
            "format": "int32",
            "nullable": true,
            "example": 10
          },
          "filterBy": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Fixed set of fields that can be used to filter the records.",
            "nullable": true,
            "example": [
              "keyword[contains]:jane"
            ]
          },
          "searchCriteria": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Fixed set of fields that can be used to search for specific record(s).",
            "nullable": true,
            "example": [
              "UserStatus: 1, 2",
              "UserDepartment: 2"
            ]
          },
          "sortBy": {
            "type": "string",
            "description": "Sort the data by the given field name",
            "nullable": true,
            "example": "lastName"
          }
        },
        "additionalProperties": false
      },
      "GetComplianceStatisticsQuery": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "description": "Page number of result set.",
            "format": "int32",
            "nullable": true,
            "example": 1
          },
          "pageSize": {
            "type": "integer",
            "description": "Number of records that will be returned.",
            "format": "int32",
            "nullable": true,
            "example": 10
          },
          "isCurrentPeriod": {
            "type": "boolean",
            "description": "When true, the statistics retrieved will only be for the current period",
            "example": true
          },
          "filterBy": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Fixed set of fields that can be used to filter the records.",
            "nullable": true,
            "example": [
              "keyword[contains]:jane"
            ]
          }
        },
        "additionalProperties": false
      },
      "GetUserCourseHistoryCommand": {
        "required": [
          "userId"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "description": "Id of the user",
            "format": "int32",
            "example": 34
          },
          "startDate": {
            "type": "string",
            "description": "Start Date of Session",
            "format": "date-time",
            "example": "02/05/2022"
          },
          "endDate": {
            "type": "string",
            "description": "End Date of Session",
            "format": "date-time",
            "example": "02/05/2022"
          },
          "isInstructors": {
            "type": "boolean",
            "description": "Determine if participant is instructor or participant",
            "example": true
          }
        },
        "additionalProperties": false
      },
      "GetUserLicenseComplianceReportQuery": {
        "required": [
          "licenseId",
          "userId"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "description": "Unique Identifier of the user in CE Manager.",
            "format": "int32",
            "example": 252
          },
          "licenseId": {
            "type": "integer",
            "description": "License Id. Please use the License GET endpoints for the complete list.",
            "format": "int32",
            "example": 381
          },
          "isCurrentPeriod": {
            "type": "boolean",
            "description": "When true, the compliance report retrieved will only be for the current period",
            "example": true
          }
        },
        "additionalProperties": false
      },
      "LearningPlanActivityDto": {
        "type": "object",
        "properties": {
          "activityId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LearningPlanCompetencyDto": {
        "type": "object",
        "properties": {
          "competencyId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LearningPlanCourseDto": {
        "type": "object",
        "properties": {
          "courseId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "displayOrder": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "integer",
            "format": "int32"
          },
          "isRequired": {
            "type": "boolean",
            "nullable": true
          },
          "providerName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LearningPlanCriteriaDto": {
        "type": "object",
        "properties": {
          "criterionId": {
            "type": "integer",
            "format": "int32"
          },
          "criteriaFieldId": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "content": {
            "type": "string",
            "nullable": true
          },
          "comparison": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LearningPlanCriteriaParticipantDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "middleName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "location": {
            "type": "string",
            "nullable": true
          },
          "userType": {
            "type": "integer",
            "format": "int32"
          },
          "isIncluded": {
            "type": "boolean"
          },
          "participantCriteriaStatus": {
            "$ref": "#/components/schemas/CriteriaStatusEnum"
          },
          "criteriaMet": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LearningPlanCriteriaDto"
            },
            "nullable": true
          },
          "userAvatar": {
            "$ref": "#/components/schemas/UserAvatarDto"
          },
          "isNewUser": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "LearningPlanCriterionDto": {
        "type": "object",
        "properties": {
          "criterionId": {
            "type": "integer",
            "format": "int32"
          },
          "learningPlanId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "LearningPlanInfo": {
        "type": "object",
        "properties": {
          "learningPlanId": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "notes": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "integer",
            "format": "int32"
          },
          "timeframeOfCompletion": {
            "$ref": "#/components/schemas/LearningPlanTimeframeOfCompletionEnum"
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "duration": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "durationType": {
            "$ref": "#/components/schemas/DurationTypeEnum"
          },
          "requiredCourses": {
            "type": "integer",
            "format": "int32"
          },
          "activityCount": {
            "type": "integer",
            "format": "int32"
          },
          "learnersChoiceCount": {
            "type": "integer",
            "format": "int32"
          },
          "mandatoryCount": {
            "type": "integer",
            "format": "int32"
          },
          "isSelfEnrolled": {
            "type": "boolean",
            "nullable": true
          },
          "archivedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "learningPlanActivities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LearningPlanActivityDto"
            },
            "nullable": true
          },
          "learningPlanCompetencies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LearningPlanCompetencyDto"
            },
            "nullable": true
          },
          "learningPlanCourses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LearningPlanCourseDto"
            },
            "nullable": true
          },
          "learningPlanCriteria": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LearningPlanCriterionDto"
            },
            "nullable": true
          },
          "learningPlanTags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LearningPlanTagDto"
            },
            "nullable": true
          },
          "learningPlanMaterials": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LearningPlanMaterialDto"
            },
            "nullable": true
          },
          "guid": {
            "type": "string",
            "nullable": true
          },
          "addParticipantEmail": {
            "type": "boolean"
          },
          "deleteParticipantEmail": {
            "type": "boolean"
          },
          "updateParticipantStatusEmail": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "LearningPlanInfoList": {
        "type": "object",
        "properties": {
          "learningPlans": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LearningPlanInfo"
            },
            "nullable": true
          },
          "recordCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "LearningPlanMaterialDto": {
        "type": "object",
        "properties": {
          "learningPlanMaterialId": {
            "type": "integer",
            "format": "int32"
          },
          "learningPlanId": {
            "type": "integer",
            "format": "int32"
          },
          "fileId": {
            "type": "integer",
            "format": "int32"
          },
          "isPublic": {
            "type": "boolean"
          },
          "libraryFile": {
            "$ref": "#/components/schemas/LibraryFileDto"
          }
        },
        "additionalProperties": false
      },
      "LearningPlanParticipantInfo": {
        "type": "object",
        "properties": {
          "learningPlanId": {
            "type": "integer",
            "format": "int32"
          },
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "criteriaMet": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LearningPlanCriteriaDto"
            },
            "nullable": true
          },
          "isIncluded": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "LearningPlanTagDto": {
        "type": "object",
        "properties": {
          "tagId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LearningPlanTimeframeOfCompletionEnum": {
        "enum": [
          1,
          2,
          3
        ],
        "type": "integer",
        "description": "```1=calendarBased``` ```2=timeToComplete``` ```3=noneSpecified``` ",
        "format": "int32",
        "x-enumNames": [
          "calendarBased",
          "timeToComplete",
          "noneSpecified"
        ]
      },
      "LevelInfo": {
        "type": "object",
        "properties": {
          "levelId": {
            "type": "integer",
            "description": "Level Id. Unique identifier of this record.",
            "format": "int32",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Name of the level",
            "nullable": true,
            "example": "Associate"
          },
          "isActive": {
            "type": "boolean",
            "description": "Indicates if the record is active or archived.",
            "example": true
          },
          "code": {
            "type": "string",
            "description": "Level Code. Unique Identifier of this record.",
            "nullable": true,
            "example": "LVL001"
          },
          "courseCount": {
            "type": "integer",
            "description": "Number of courses associated to this level.",
            "format": "int32",
            "example": 2
          },
          "userCount": {
            "type": "integer",
            "description": "Number of users associated to this level.",
            "format": "int32",
            "example": 2
          }
        },
        "additionalProperties": false
      },
      "LevelInfoList": {
        "type": "object",
        "properties": {
          "levels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LevelInfo"
            },
            "nullable": true
          },
          "recordCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "LibraryFileAffiliationDto": {
        "type": "object",
        "properties": {
          "affiliationId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LibraryFileDepartmentDto": {
        "type": "object",
        "properties": {
          "departmentId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LibraryFileDto": {
        "type": "object",
        "properties": {
          "fileId": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "shortDescription": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "isActive": {
            "type": "boolean"
          },
          "isAttendanceSheet": {
            "type": "boolean"
          },
          "archivedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "url": {
            "type": "string",
            "nullable": true
          },
          "access": {
            "type": "string",
            "nullable": true
          },
          "key": {
            "type": "string",
            "nullable": true
          },
          "extension": {
            "type": "string",
            "nullable": true
          },
          "size": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "duration": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "scormCourseId": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "learningPlanCount": {
            "type": "integer",
            "format": "int32"
          },
          "sessionMaterialCount": {
            "type": "integer",
            "format": "int32"
          },
          "sessionMediaFileCount": {
            "type": "integer",
            "format": "int32"
          },
          "scormType": {
            "type": "string",
            "nullable": true
          },
          "libraryFileAffiliations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LibraryFileAffiliationDto"
            },
            "nullable": true
          },
          "libraryFileDepartments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LibraryFileDepartmentDto"
            },
            "nullable": true
          },
          "libraryFileLevels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LibraryFileLevelDto"
            },
            "nullable": true
          },
          "libraryFileLocations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LibraryFileLocationDto"
            },
            "nullable": true
          },
          "libraryFilePositions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LibraryFilePositionDto"
            },
            "nullable": true
          },
          "libraryFilePracticeAreas": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LibraryFilePracticeAreaDto"
            },
            "nullable": true
          },
          "settings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LibraryFileSettingDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LibraryFileLevelDto": {
        "type": "object",
        "properties": {
          "levelId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LibraryFileLocationDto": {
        "type": "object",
        "properties": {
          "locationId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LibraryFilePositionDto": {
        "type": "object",
        "properties": {
          "positionId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LibraryFilePracticeAreaDto": {
        "type": "object",
        "properties": {
          "practiceAreaId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LibraryFileSettingDto": {
        "type": "object",
        "properties": {
          "libraryFileSettingId": {
            "type": "integer",
            "format": "int32"
          },
          "libraryFileSettingType": {
            "$ref": "#/components/schemas/LibraryFileSettingEnum"
          },
          "valueBit": {
            "type": "boolean",
            "nullable": true
          },
          "valueInt": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "valueDecimal": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "valueChar": {
            "type": "string",
            "nullable": true
          },
          "valueOption": {
            "type": "string",
            "nullable": true
          },
          "libraryFileId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "LibraryFileSettingEnum": {
        "enum": [
          1,
          2
        ],
        "type": "integer",
        "description": "```1=EnableCustomVideoSetting``` ```2=EnableSeekbar``` ",
        "format": "int32",
        "x-enumNames": [
          "EnableCustomVideoSetting",
          "EnableSeekbar"
        ]
      },
      "LicenseCompliancePeriodInfo": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "description": "Unique Identifier of the user in CE Manager.",
            "format": "int32",
            "example": 252
          },
          "licenseId": {
            "type": "integer",
            "description": "License Id. Please use the License GET endpoints for the complete list.",
            "format": "int32",
            "example": 381
          },
          "licenseName": {
            "type": "string",
            "description": "License name",
            "nullable": true,
            "example": "Illinois Law"
          },
          "periodNumber": {
            "type": "integer",
            "description": "License Period Number",
            "format": "int32",
            "example": 1
          },
          "periodTypeId": {
            "type": "integer",
            "description": "License Period Type",
            "format": "int32",
            "example": 1
          },
          "periodFrom": {
            "type": "string",
            "description": "License Period Start Date",
            "format": "date-time",
            "example": "2021-01-01T00:00:00"
          },
          "periodTo": {
            "type": "string",
            "description": "License Period End Date",
            "format": "date-time",
            "example": "2022-01-01T00:00:00"
          },
          "complianceStatusId": {
            "type": "integer",
            "description": "License Compliance Status Id. Please use the Compliance GetStatuses endpoint for the complete list.",
            "format": "int32",
            "example": 1
          },
          "complianceStatus": {
            "type": "string",
            "description": "User License Compliance Status.",
            "nullable": true,
            "example": "In Compliance"
          },
          "periodLabel": {
            "type": "string",
            "description": "License Period Label",
            "nullable": true,
            "example": "Newly Admitted"
          },
          "periodFromCourse": {
            "type": "string",
            "description": "License period from course",
            "format": "date-time",
            "nullable": true,
            "example": "2021-01-01T00:00:00"
          },
          "periodToDisplay": {
            "type": "string",
            "description": "License period to display",
            "format": "date-time",
            "nullable": true,
            "example": "2021-01-01T00:00:00"
          },
          "priorPeriodDeficiency": {
            "type": "boolean",
            "description": "Indicates if complaince has prior period deficiency",
            "nullable": true,
            "example": true
          },
          "totalCreditsNeeded": {
            "type": "number",
            "description": "Value of Total Credits Needed",
            "format": "double",
            "nullable": true,
            "example": 15
          },
          "additionalRequirementStatus": {
            "type": "string",
            "description": "Describes the Additional Requirement Status",
            "nullable": true,
            "example": "Incomplete"
          },
          "userSubLicenseCompliancePeriod": {
            "$ref": "#/components/schemas/SubLicenseCompliancePeriodInfo"
          }
        },
        "additionalProperties": false
      },
      "LicenseCreditDto": {
        "type": "object",
        "properties": {
          "creditId": {
            "type": "integer",
            "description": "Credit Id. Unique identifier of this credit type.",
            "format": "int32",
            "example": 4
          },
          "name": {
            "type": "string",
            "description": "Name of the credit type.",
            "nullable": true,
            "example": "General"
          }
        },
        "additionalProperties": false
      },
      "LicenseInfo": {
        "type": "object",
        "properties": {
          "licenseId": {
            "type": "integer",
            "description": "License Id. Unique identifier of this License.",
            "format": "int32",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Name of the license and its industry.",
            "nullable": true,
            "example": "Illinois Accounting"
          },
          "shortName": {
            "type": "string",
            "description": "Short Name of the License.",
            "nullable": true,
            "example": "IL CPE"
          },
          "industry": {
            "type": "string",
            "description": "Industry of the License.",
            "nullable": true,
            "example": "Accounting"
          },
          "isReciprocal": {
            "type": "boolean",
            "description": "Indicates whether the license can be earned through reciprocity.",
            "example": true
          },
          "licenseProfileFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LicenseProfileInfo"
            },
            "description": "License fields that can be used when adding User license.",
            "nullable": true
          },
          "licenseCredits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LicenseCreditDto"
            },
            "description": "List of credits offered by the License.",
            "nullable": true
          },
          "licenseProperties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LicensePropertyInfo"
            },
            "description": "List of properties associated to the License.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LicenseInfoList": {
        "type": "object",
        "properties": {
          "licenses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LicenseInfo"
            },
            "nullable": true
          },
          "recordCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "LicenseProfileInfo": {
        "type": "object",
        "properties": {
          "profileId": {
            "type": "integer",
            "description": "Profile Id. Unique identifier of this field.",
            "format": "int32",
            "example": 1
          },
          "label": {
            "type": "string",
            "description": "Label of the field.",
            "nullable": true,
            "example": "Bar Admission Date"
          },
          "type": {
            "type": "string",
            "description": "Data Type",
            "nullable": true,
            "example": "Bit"
          },
          "description": {
            "type": "string",
            "description": "Description of the field.",
            "nullable": true,
            "example": "Date only (MM/DD/YYYY)"
          },
          "isRequired": {
            "type": "boolean",
            "description": "Indicates whether this Property is required when adding User License.",
            "example": true
          }
        },
        "additionalProperties": false
      },
      "LicensePropertyInfo": {
        "type": "object",
        "properties": {
          "propertyId": {
            "type": "integer",
            "description": "Property Id. Identifier of this Property for this License.",
            "format": "int32",
            "example": 1
          },
          "propertyName": {
            "type": "string",
            "description": "Name of the Property.",
            "nullable": true,
            "example": "Basic Skills"
          },
          "type": {
            "type": "string",
            "description": "Type of property: Qualifier, Course Group",
            "nullable": true,
            "example": "Basic Skills"
          },
          "isAdjustable": {
            "type": "boolean",
            "description": "Indicates whether this Property is adjustable in schedule and user level",
            "example": true
          }
        },
        "additionalProperties": false
      },
      "LicenseStatusEnum": {
        "enum": [
          1,
          2,
          3
        ],
        "type": "integer",
        "description": "```1=Approved``` ```2=Pending``` ```3=Denied``` ",
        "format": "int32",
        "x-enumNames": [
          "Approved",
          "Pending",
          "Denied"
        ]
      },
      "LocationInfo": {
        "type": "object",
        "properties": {
          "locationId": {
            "type": "integer",
            "description": "Location Id. Uniqure identifier of this record.",
            "format": "int32",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Name of the location.",
            "nullable": true,
            "example": "Micron Systems Inc - NJ"
          },
          "address": {
            "type": "string",
            "description": "Address of the Firm Office or Third Party Location.",
            "nullable": true,
            "example": "10 Broadway"
          },
          "code": {
            "type": "string",
            "description": "Location Code. Unique identifier of this record.",
            "nullable": true,
            "example": "L-01"
          },
          "city": {
            "type": "string",
            "description": "The city where the location is based.",
            "nullable": true,
            "example": "New York"
          },
          "countryId": {
            "type": "string",
            "description": "Id of the country.",
            "nullable": true,
            "example": "1"
          },
          "stateId": {
            "type": "string",
            "description": "Id of the state.",
            "nullable": true,
            "example": "1"
          },
          "zip": {
            "type": "string",
            "description": "Zip code of the location's address.",
            "nullable": true,
            "example": "10004"
          },
          "telephone": {
            "type": "string",
            "description": "Telephone of the Firm Office or Third Party Location.",
            "nullable": true,
            "example": "555-666-7777"
          },
          "timezoneId": {
            "type": "string",
            "description": "Id of the time zone.",
            "nullable": true,
            "example": "US/Eastern"
          },
          "isActive": {
            "type": "boolean",
            "description": "Indicates if the record is active or archived.",
            "example": true
          },
          "isFirmOffice": {
            "type": "boolean",
            "description": "Indicates if the record is a firm office location or not.",
            "nullable": true,
            "example": true
          },
          "countyId": {
            "type": "string",
            "description": "Id of the county.",
            "nullable": true,
            "example": "1"
          },
          "country": {
            "type": "string",
            "description": "The country where the location is based.",
            "nullable": true,
            "example": "United States"
          },
          "state": {
            "type": "string",
            "description": "The state where the location is based.",
            "nullable": true,
            "example": "New York"
          },
          "timezone": {
            "type": "string",
            "description": "The time zone in which the location is based.",
            "nullable": true,
            "example": "Eastern Standard Time(GMT-05:00)"
          },
          "userCount": {
            "type": "integer",
            "description": "Number of users associated to this location.",
            "format": "int32",
            "example": 2
          },
          "sessionCount": {
            "type": "integer",
            "description": "Number of sessions associated to this department.",
            "format": "int32",
            "example": 2
          }
        },
        "additionalProperties": false
      },
      "LocationInfoList": {
        "type": "object",
        "properties": {
          "locations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocationInfo"
            },
            "nullable": true
          },
          "recordCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "MediaTypeEnum": {
        "enum": [
          0,
          1,
          2,
          3,
          4
        ],
        "type": "integer",
        "description": "```0=None``` ```1=Video``` ```2=Audio``` ```3=LearningPackage``` ```4=Url``` ",
        "format": "int32",
        "x-enumNames": [
          "None",
          "Video",
          "Audio",
          "LearningPackage",
          "Url"
        ]
      },
      "PositionInfo": {
        "type": "object",
        "properties": {
          "positionId": {
            "type": "integer",
            "description": "Position Id. Unique identifier of this record.",
            "format": "int32",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Name of the position.",
            "nullable": true,
            "example": "Associate"
          },
          "isActive": {
            "type": "boolean",
            "description": "Indicates if the record is active or archived.",
            "example": true
          },
          "code": {
            "type": "string",
            "description": "Position Code. Unique Identifier of this record.",
            "nullable": true,
            "example": "P001"
          },
          "userCount": {
            "type": "integer",
            "description": "Number of users associated to the position.",
            "format": "int32",
            "example": 2
          }
        },
        "additionalProperties": false
      },
      "PositionInfoList": {
        "type": "object",
        "properties": {
          "positions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PositionInfo"
            },
            "nullable": true
          },
          "recordCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "PracticeAreaInfo": {
        "type": "object",
        "properties": {
          "practiceAreaId": {
            "type": "integer",
            "description": "Practice Area Id. Unique identifier of this record.",
            "format": "int32",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Name of the practice area",
            "nullable": true,
            "example": "Litigation"
          },
          "isActive": {
            "type": "boolean",
            "description": "Indicates if the record is active or archived.",
            "example": true
          },
          "code": {
            "type": "string",
            "description": "Practice Area Code. Unique Identifier of this record.",
            "nullable": true,
            "example": "PA001"
          },
          "courseCount": {
            "type": "integer",
            "description": "Number of courses associated to this practice area.",
            "format": "int32",
            "example": 2
          },
          "userCount": {
            "type": "integer",
            "description": "Number of users associated to this practice area.",
            "format": "int32",
            "example": 2
          }
        },
        "additionalProperties": false
      },
      "PracticeAreaInfoList": {
        "type": "object",
        "properties": {
          "practiceAreas": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PracticeAreaInfo"
            },
            "nullable": true
          },
          "recordCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ProviderInfo": {
        "type": "object",
        "properties": {
          "providerId": {
            "type": "integer",
            "description": "Provider Id. Unique identifier of this record.",
            "format": "int32",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Name of the provider",
            "nullable": true,
            "example": "Micron Systems, Inc."
          },
          "isInHouse": {
            "type": "boolean",
            "description": "Indicates if the record is an In-House provider. If this is false, the provider will be flagged as Third-Party.",
            "nullable": true,
            "example": true
          },
          "isActive": {
            "type": "boolean",
            "description": "Indicates if the record is active or archived.",
            "example": true
          },
          "code": {
            "type": "string",
            "description": "Provider Code. Unique Identifier of this record.",
            "nullable": true,
            "example": "PROV001"
          },
          "url": {
            "type": "string",
            "description": "An HTML link that opens a provider's site",
            "nullable": true,
            "example": "https://www.micronsystems.com/"
          },
          "courseCount": {
            "type": "integer",
            "description": "Number of courses associated to this department.",
            "format": "int32",
            "example": 2
          }
        },
        "additionalProperties": false
      },
      "ProviderInfoList": {
        "type": "object",
        "properties": {
          "providers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProviderInfo"
            },
            "nullable": true
          },
          "recordCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "RegisterParticipantCommand": {
        "required": [
          "participant",
          "sessionId"
        ],
        "type": "object",
        "properties": {
          "sessionId": {
            "type": "integer",
            "description": "Session Id. Unique identifier of this session.",
            "format": "int32",
            "example": 1
          },
          "participant": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RegisterParticipantDto"
            }
          }
        },
        "additionalProperties": false
      },
      "RegisterParticipantDto": {
        "required": [
          "registrationDate"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "description": "Unique Identifier of the user in CE Manager.",
            "format": "int32",
            "nullable": true,
            "example": 252
          },
          "personnelId": {
            "type": "string",
            "description": "Alternative unique identifier of the user.",
            "nullable": true,
            "example": "DBSP0023"
          },
          "email": {
            "type": "string",
            "description": "Email.",
            "nullable": true,
            "example": "j.smith@micronsystems.com"
          },
          "isInstructor": {
            "type": "boolean",
            "description": "Flag to determine if the user is an attendee or instructor.",
            "nullable": true,
            "example": false
          },
          "isTentative": {
            "type": "boolean",
            "description": "Flag to determine if the attendee is tentatively registered to the session.",
            "nullable": true,
            "example": false
          },
          "registrationDate": {
            "minLength": 1,
            "type": "string",
            "description": "Date of registration in ISO8601 format (YYYY-MM-DDTHH:mm:ssZ)",
            "format": "date-time",
            "example": "Smith"
          },
          "completionDate": {
            "type": "string",
            "description": "Date of completion in ISO8601 format (YYYY-MM-DDTHH:mm:ssZ)",
            "format": "date-time",
            "nullable": true,
            "example": "Smith"
          },
          "userLicenseCreditValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SessionParticipantsUserLicenseCreditValueDto"
            },
            "description": "User Credit Information.",
            "nullable": true
          },
          "userLicensePropertyValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SessionParticipantsUserLicensePropertyValueDto"
            },
            "description": "User License Property Information.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RelationshipTypeEnum": {
        "enum": [
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "description": "```1=AdministrativeAssistant``` ```2=Supervisor``` ```3=Coach``` ```4=Mentor``` ```5=MatrixManager``` ```6=PracticeGroupLeader``` ",
        "format": "int32",
        "x-enumNames": [
          "AdministrativeAssistant",
          "Supervisor",
          "Coach",
          "Mentor",
          "MatrixManager",
          "PracticeGroupLeader"
        ]
      },
      "RoleInfo": {
        "type": "object",
        "properties": {
          "roleId": {
            "type": "integer",
            "description": "Role Id. Unique identifier of the role.",
            "format": "int32",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Name.",
            "nullable": true,
            "example": "Administrator"
          },
          "description": {
            "type": "string",
            "description": "Role description.",
            "nullable": true,
            "example": "Firm CE Administrators"
          },
          "isActive": {
            "type": "boolean",
            "description": "Flag to indicate if the role is active."
          },
          "isDefault": {
            "type": "boolean",
            "description": "Flag to indicate if this role will be applied as default based on the user type (e.g. Employee)."
          },
          "isSystem": {
            "type": "boolean",
            "description": "Flag to indicate if this role is a system role. System roles cannot be modified.",
            "example": true
          },
          "type": {
            "type": "string",
            "description": "Role type.",
            "nullable": true,
            "example": "Employee"
          }
        },
        "additionalProperties": false
      },
      "RoleInfoList": {
        "type": "object",
        "properties": {
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleInfo"
            },
            "nullable": true
          },
          "recordCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "RoomInfo": {
        "type": "object",
        "properties": {
          "roomId": {
            "type": "integer",
            "description": "Room Id. Unique identifier of this record.",
            "format": "int32",
            "example": 1
          },
          "locationId": {
            "type": "integer",
            "description": "Location Id. Please see the Location GET endpoints for the complete list",
            "format": "int32",
            "example": 1
          },
          "location": {
            "type": "string",
            "description": "Location name of the location id",
            "nullable": true,
            "example": "Main Office"
          },
          "name": {
            "type": "string",
            "description": "Name of the room",
            "nullable": true,
            "example": "Room 501"
          },
          "capacity": {
            "type": "integer",
            "description": "Number of person a room can handle",
            "format": "int32",
            "example": 20
          },
          "isActive": {
            "type": "boolean",
            "description": "Indicates if the record is active or archived.",
            "example": true
          },
          "code": {
            "type": "string",
            "description": "Room Code. Unique Identifier of this record.",
            "nullable": true,
            "example": "ROOM001"
          },
          "sessionCount": {
            "type": "integer",
            "description": "Number of sessions associated to this room.",
            "format": "int32",
            "example": 2
          }
        },
        "additionalProperties": false
      },
      "RoomInfoList": {
        "type": "object",
        "properties": {
          "rooms": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoomInfo"
            },
            "nullable": true
          },
          "recordCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "SecurityGroupInfo": {
        "type": "object",
        "properties": {
          "groupId": {
            "type": "integer",
            "description": "Security Groupd Id. Unique identifier of this security group.",
            "format": "int32",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Security group name.",
            "nullable": true,
            "example": "Administrator - Limited Access"
          },
          "description": {
            "type": "string",
            "description": "Description of the security group.",
            "nullable": true,
            "example": "Administrator with limited access for library"
          },
          "isActive": {
            "type": "boolean",
            "description": "Indicates if the record is active or inactive.",
            "example": true
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SecurityGroupUserInfo"
            },
            "description": "List of associated users to the security group.",
            "nullable": true
          },
          "userCount": {
            "type": "integer",
            "description": "Total number of users associated to the security group.",
            "format": "int32",
            "example": 3
          }
        },
        "additionalProperties": false
      },
      "SecurityGroupInfoList": {
        "type": "object",
        "properties": {
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SecurityGroupInfo"
            },
            "nullable": true
          },
          "recordCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "SecurityGroupUserInfo": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "personnelId": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "userType": {
            "$ref": "#/components/schemas/UserTypeEnum"
          }
        },
        "additionalProperties": false
      },
      "SecurityUserSecurityGroupInfo": {
        "type": "object",
        "properties": {
          "groupId": {
            "type": "integer",
            "description": "Unique Identifier of the Security Group.",
            "format": "int32",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Name.",
            "nullable": true,
            "example": "CLE Coordinator"
          }
        },
        "additionalProperties": false
      },
      "SessionApproverDto": {
        "type": "object",
        "properties": {
          "sessionId": {
            "type": "integer",
            "format": "int32"
          },
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SessionEvaluationInfo": {
        "type": "object",
        "properties": {
          "sessionEvaluationId": {
            "type": "integer",
            "description": "Unique identifier of the participant's evaluation to a session.",
            "format": "int32",
            "example": 401
          },
          "sessionId": {
            "type": "integer",
            "description": "Session Id. Unique identifier of this session.",
            "format": "int32",
            "example": 1
          },
          "userId": {
            "type": "integer",
            "description": "Unique Identifier of the user in CE Manager.",
            "format": "int32",
            "example": 252
          },
          "firstName": {
            "type": "string",
            "description": "First Name.",
            "nullable": true,
            "example": "Jane"
          },
          "lastName": {
            "type": "string",
            "description": "Last Name.",
            "nullable": true,
            "example": "Smith"
          },
          "middleName": {
            "type": "string",
            "description": "Middle Name.",
            "nullable": true,
            "example": "Baker"
          },
          "email": {
            "type": "string",
            "description": "Email.",
            "nullable": true,
            "example": "j.smith@micronsystems.com"
          },
          "personnelId": {
            "type": "string",
            "description": "Alternative unique identifier of the user.",
            "nullable": true,
            "example": "DBSP0023"
          },
          "validatedDate": {
            "type": "string",
            "description": "Date or validation in ISO8601 format (YYYY-MM-DDTHH:mm:ssZ)",
            "format": "date-time",
            "nullable": true,
            "example": "Smith"
          },
          "requestDate": {
            "type": "string",
            "description": "Date of the evaluation request email in ISO8601 format (YYYY-MM-DDTHH:mm:ssZ)",
            "format": "date-time",
            "nullable": true
          },
          "evaluationDate": {
            "type": "string",
            "description": "Date of the evaluation in ISO8601 format (YYYY-MM-DDTHH:mm:ssZ)",
            "format": "date-time",
            "nullable": true
          },
          "userType": {
            "type": "string",
            "description": "User Type. Administrator | Client | Employee;",
            "nullable": true,
            "example": "User"
          }
        },
        "additionalProperties": false
      },
      "SessionEvaluationInfoList": {
        "type": "object",
        "properties": {
          "evaluations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SessionEvaluationInfo"
            },
            "nullable": true
          },
          "recordCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "SessionInfo": {
        "type": "object",
        "properties": {
          "sessionId": {
            "type": "integer",
            "description": "Session Id. Unique identifier of this session.",
            "format": "int32",
            "example": 1
          },
          "courseId": {
            "type": "integer",
            "description": "Course Id.",
            "format": "int32",
            "example": 101
          },
          "title": {
            "type": "string",
            "description": "Session Title.",
            "nullable": true,
            "example": "Ethics 101: Part 1"
          },
          "code": {
            "type": "string",
            "description": "Session Code. Unique identifier of this session.",
            "nullable": true,
            "example": "S01001"
          },
          "courseFormatId": {
            "type": "integer",
            "description": "Course Format Id.",
            "format": "int32",
            "example": 1
          },
          "courseFormat": {
            "type": "string",
            "description": "Course Format Description.",
            "nullable": true,
            "example": "Online Video"
          },
          "courseFormatPortalCategory": {
            "type": "string",
            "description": "Course Format Category.",
            "nullable": true,
            "example": "Classroom"
          },
          "courseTitle": {
            "type": "string",
            "description": "Course Title.",
            "nullable": true,
            "example": "Ethics 101"
          },
          "courseIdLabel": {
            "type": "string",
            "description": "Course Code.",
            "nullable": true,
            "example": "ETH101"
          },
          "providerId": {
            "type": "integer",
            "description": "Provider Id.",
            "format": "int32",
            "example": 1
          },
          "provider": {
            "type": "string",
            "description": "Provider Name.",
            "nullable": true,
            "example": "Irving Robbins and Rand LLP"
          },
          "startDate": {
            "type": "string",
            "description": "Session start date in YYYY-MM-DD format.",
            "format": "date-time",
            "example": "2021-01-01"
          },
          "endDate": {
            "type": "string",
            "description": "Session end date in YYYY-MM-DD format.",
            "format": "date-time",
            "nullable": true,
            "example": "2021-01-02"
          },
          "startTime": {
            "type": "string",
            "description": "Session start time.",
            "nullable": true,
            "example": "09:00 AM"
          },
          "endTime": {
            "type": "string",
            "description": "Session end time.",
            "nullable": true,
            "example": "10:00 AM"
          },
          "timezoneId": {
            "type": "string",
            "description": "Timezone Id.",
            "nullable": true,
            "example": "US/Eastern"
          },
          "timeZone": {
            "type": "string",
            "description": "Timezone abbreviation.",
            "nullable": true,
            "example": "EST"
          },
          "locationId": {
            "type": "integer",
            "description": "Location Id.",
            "format": "int32",
            "nullable": true,
            "example": 1
          },
          "location": {
            "type": "string",
            "description": "Location Name.",
            "nullable": true,
            "example": "1"
          },
          "roomId": {
            "type": "integer",
            "description": "Room Id.",
            "format": "int32",
            "nullable": true,
            "example": 1
          },
          "room": {
            "type": "string",
            "description": "Room Name.",
            "nullable": true,
            "example": "R01"
          },
          "cost": {
            "type": "number",
            "description": "Cost.",
            "format": "float",
            "nullable": true,
            "example": 10
          },
          "detail": {
            "type": "string",
            "description": "Session Detail.",
            "nullable": true,
            "example": "Ethics 101 offers an exciting look into the history of moral principles that dictate human behavior."
          },
          "duration": {
            "type": "string",
            "description": "Session Duration.",
            "nullable": true,
            "example": "1 hour"
          },
          "url": {
            "type": "string",
            "description": "URL.",
            "nullable": true,
            "example": "https://www.micronsystems.com"
          },
          "isOpenToClient": {
            "type": "boolean",
            "description": "true = open for client registration; false = do not allow clients to register.",
            "example": true
          },
          "isPublished": {
            "type": "boolean",
            "description": "true = show in portal; false = do not show in portal.",
            "example": true
          },
          "sessionLicenses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SessionLicenseInfo"
            },
            "description": "Session License Information.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SessionInfoList": {
        "type": "object",
        "properties": {
          "sessions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SessionInfo"
            },
            "nullable": true
          },
          "recordCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "SessionLicenseCreditDto": {
        "type": "object",
        "properties": {
          "creditId": {
            "type": "integer",
            "description": "Credit Id. Please use the License GET endpoint for the complete list.",
            "format": "int32",
            "example": 1
          },
          "creditValue": {
            "type": "number",
            "description": "Credit Value.",
            "format": "double",
            "example": 1
          }
        },
        "additionalProperties": false
      },
      "SessionLicenseCreditInfo": {
        "type": "object",
        "properties": {
          "creditId": {
            "type": "integer",
            "description": "Credit Id. Unique identifier of this credit type.",
            "format": "int32",
            "example": 4
          },
          "creditName": {
            "type": "string",
            "description": "Credit name.",
            "nullable": true,
            "example": "General"
          },
          "creditValue": {
            "type": "number",
            "description": "Credit Value.",
            "format": "double",
            "example": 1
          }
        },
        "additionalProperties": false
      },
      "SessionLicenseDto": {
        "type": "object",
        "properties": {
          "licenseId": {
            "type": "integer",
            "description": "License Id. Please use the License GET endpoint to get the complete list.",
            "format": "int32",
            "example": 14
          },
          "expirationDate": {
            "type": "string",
            "description": "Credits expiration date in YYYY-MM-DD format.",
            "format": "date-time",
            "nullable": true,
            "example": "2021-01-01"
          },
          "licenseStatus": {
            "$ref": "#/components/schemas/LicenseStatusEnum"
          },
          "sessionLicenseCredits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SessionLicenseCreditDto"
            },
            "description": "License Credits.",
            "nullable": true
          },
          "sessionLicenseProperties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SessionLicensePropertyDto"
            },
            "description": "License Properties.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SessionLicenseInfo": {
        "type": "object",
        "properties": {
          "licenseId": {
            "type": "integer",
            "description": "License Id.",
            "format": "int32",
            "example": 14
          },
          "name": {
            "type": "string",
            "description": "License Name.",
            "nullable": true,
            "example": "Alabama Law"
          },
          "expirationDate": {
            "type": "string",
            "description": "Credits expiration date in YYYY-MM-DD format.",
            "format": "date-time",
            "nullable": true,
            "example": "2021-01-01"
          },
          "status": {
            "type": "string",
            "description": "License Status. 1 = Approved; 2 = Pending; 3 = Denied.",
            "nullable": true,
            "example": "Approved"
          },
          "sessionLicenseCredits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SessionLicenseCreditInfo"
            },
            "description": "License Credits.",
            "nullable": true
          },
          "sessionLicenseProperties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SessionLicensePropertyInfo"
            },
            "description": "License Properties.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SessionLicensePropertyDto": {
        "type": "object",
        "properties": {
          "propertyId": {
            "type": "integer",
            "description": "Property Id. Please use the License GET endpoint for the complete list.",
            "format": "int32",
            "example": 2
          },
          "propertyValue": {
            "type": "string",
            "description": "Property Value.",
            "nullable": true,
            "example": "BAR0001"
          }
        },
        "additionalProperties": false
      },
      "SessionLicensePropertyInfo": {
        "type": "object",
        "properties": {
          "propertyId": {
            "type": "integer",
            "description": "Property Id. Unique identifier of this license property.",
            "format": "int32",
            "example": 2
          },
          "propertyLabel": {
            "type": "string",
            "description": "Property Label.",
            "nullable": true,
            "example": "Bar Number"
          },
          "propertyValue": {
            "type": "string",
            "description": "Property Value.",
            "nullable": true,
            "example": "BAR0001"
          }
        },
        "additionalProperties": false
      },
      "SessionMaterialDto": {
        "type": "object",
        "properties": {
          "sessionMaterialId": {
            "type": "integer",
            "format": "int32"
          },
          "sessionId": {
            "type": "integer",
            "format": "int32"
          },
          "fileId": {
            "type": "integer",
            "format": "int32"
          },
          "isPublic": {
            "type": "boolean"
          },
          "isAttendanceSheet": {
            "type": "boolean"
          },
          "libraryFile": {
            "$ref": "#/components/schemas/LibraryFileDto"
          }
        },
        "additionalProperties": false
      },
      "SessionMediaFileDto": {
        "type": "object",
        "properties": {
          "sessionMediaFileId": {
            "type": "integer",
            "format": "int32"
          },
          "sessionId": {
            "type": "integer",
            "format": "int32"
          },
          "fileId": {
            "type": "integer",
            "format": "int32"
          },
          "isRequired": {
            "type": "boolean"
          },
          "displayOrder": {
            "type": "integer",
            "format": "int32"
          },
          "verificationDisplayLimit": {
            "type": "integer",
            "format": "int32"
          },
          "verificationDisplayDuration": {
            "type": "integer",
            "format": "int32"
          },
          "verificationCode": {
            "type": "string",
            "nullable": true
          },
          "verificationCodeEnabled": {
            "type": "boolean"
          },
          "verificationAttemptLimit": {
            "type": "integer",
            "format": "int32"
          },
          "viewingVerificationEnabled": {
            "type": "boolean"
          },
          "viewingVerificationDisplayLimit": {
            "type": "integer",
            "format": "int32"
          },
          "viewingVerificationDisplayDuration": {
            "type": "integer",
            "format": "int32"
          },
          "allowedToBeViewed": {
            "type": "boolean"
          },
          "libraryFile": {
            "$ref": "#/components/schemas/LibraryFileDto"
          }
        },
        "additionalProperties": false
      },
      "SessionParticipantCertificateDto": {
        "type": "object",
        "properties": {
          "sessionParticipantCertificateId": {
            "type": "integer",
            "description": "Unique Identifier of the participant certificate.",
            "format": "int32",
            "example": 1001
          },
          "sessionParticipantId": {
            "type": "integer",
            "description": "Session Participant Id. Unique identifier of this particpant to the session.",
            "format": "int32",
            "example": 201
          },
          "fileId": {
            "type": "integer",
            "description": "Unique identefier of the file in  the database.",
            "format": "int32",
            "example": 1
          },
          "fileName": {
            "type": "string",
            "description": "File Name.",
            "nullable": true,
            "example": "Certificate of Attendance.pdf"
          },
          "fileType": {
            "type": "string",
            "description": "File Type. Video | File | Audio | Learning Package",
            "nullable": true,
            "example": "file"
          },
          "fileExt": {
            "type": "string",
            "description": "File extension.",
            "nullable": true,
            "example": ".pdf"
          },
          "uploadDate": {
            "type": "string",
            "description": "Date of upload in ISO8601 format (YYYY-MM-DDTHH:mm:ssZ)",
            "format": "date-time",
            "nullable": true
          },
          "integrationId": {
            "type": "string",
            "nullable": true
          },
          "integrationSessionParticipantCertificateId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "SessionParticipantInfo": {
        "type": "object",
        "properties": {
          "sessionId": {
            "type": "integer",
            "description": "Session Id. Unique identifier of the session.",
            "format": "int32",
            "example": 1
          },
          "sessionParticipantId": {
            "type": "integer",
            "description": "Session Participant Id. Unique identifier of this particpant to the session.",
            "format": "int32",
            "example": 201
          },
          "userId": {
            "type": "integer",
            "description": "Unique Identifier of the user in CE Manager.",
            "format": "int32",
            "example": 252
          },
          "personnelId": {
            "type": "string",
            "description": "Alternative unique Identifier of the user.",
            "nullable": true,
            "example": "DBSP0023"
          },
          "email": {
            "type": "string",
            "description": "Email.",
            "nullable": true,
            "example": "j.smith@micronsystems.com"
          },
          "userType": {
            "type": "string",
            "description": "User Type. Administrator | Client | Employee;",
            "nullable": true,
            "example": "User"
          },
          "isInstructor": {
            "type": "boolean",
            "description": "Flag to determine if the user is an attendee or instructor.",
            "example": false
          },
          "firstName": {
            "type": "string",
            "description": "First Name.",
            "nullable": true,
            "example": "Jane"
          },
          "middleName": {
            "type": "string",
            "description": "Middle Name.",
            "nullable": true,
            "example": "Baker"
          },
          "lastName": {
            "type": "string",
            "description": "Last Name.",
            "nullable": true,
            "example": "Smith"
          },
          "isCreditAdjusted": {
            "type": "boolean",
            "description": "Flag to indicate if the credits are adjusted on the user level.",
            "example": false
          },
          "registrationDate": {
            "type": "string",
            "description": "Date of registration in ISO8601 format (YYYY-MM-DDTHH:mm:ssZ)",
            "format": "date-time",
            "nullable": true,
            "example": "Smith"
          },
          "completionDate": {
            "type": "string",
            "description": "Date of completion in ISO8601 format (YYYY-MM-DDTHH:mm:ssZ)",
            "format": "date-time",
            "nullable": true,
            "example": "Smith"
          },
          "tentativeDate": {
            "type": "string",
            "description": "Date of tentative registration in ISO8601 format (YYYY-MM-DDTHH:mm:ssZ)",
            "format": "date-time",
            "nullable": true,
            "example": "Smith"
          },
          "validationDate": {
            "type": "string",
            "description": "Date or validation in ISO8601 format (YYYY-MM-DDTHH:mm:ssZ)",
            "format": "date-time",
            "nullable": true,
            "example": "Smith"
          },
          "status": {
            "type": "string",
            "description": "Participation status.",
            "nullable": true,
            "example": "Registered"
          },
          "userLicenseCreditValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserLicenseCreditValueInfo"
            },
            "description": "User Credit Information.",
            "nullable": true
          },
          "userLicensePropertyValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserLicensePropertyValueInfo"
            },
            "description": "User License Property Information.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SessionParticipantInfoList": {
        "type": "object",
        "properties": {
          "sessionParticipants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SessionParticipantInfo"
            },
            "nullable": true
          },
          "recordCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "SessionParticipantsUserLicenseCreditValueDto": {
        "type": "object",
        "properties": {
          "licenseId": {
            "type": "integer",
            "description": "License Id.",
            "format": "int32",
            "example": 14
          },
          "creditId": {
            "type": "integer",
            "description": "Credit Id. Unique identifier of this credit type.",
            "format": "int32",
            "example": 4
          },
          "value": {
            "type": "number",
            "description": "Credit Value.",
            "format": "double",
            "example": 1
          }
        },
        "additionalProperties": false
      },
      "SessionParticipantsUserLicensePropertyValueDto": {
        "type": "object",
        "properties": {
          "licenseId": {
            "type": "integer",
            "description": "License Id.",
            "format": "int32",
            "example": 14
          },
          "propertyId": {
            "type": "integer",
            "description": "Property Id. Unique identifier of this license property.",
            "format": "int32",
            "example": 2
          },
          "propertyValue": {
            "type": "string",
            "description": "Property Value.",
            "nullable": true,
            "example": "BAR0001"
          }
        },
        "additionalProperties": false
      },
      "SessionRecurrencePatternDto": {
        "type": "object",
        "properties": {
          "frequency": {
            "type": "integer",
            "format": "int32"
          },
          "interval": {
            "type": "integer",
            "format": "int32"
          },
          "day": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "dayOfWeek": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "week": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "daysOfWeek": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SessionTypeEnum": {
        "enum": [
          1,
          2,
          3,
          4
        ],
        "type": "integer",
        "description": "```1=Single``` ```2=Simultaneous``` ```3=Multipart``` ```4=Recurring``` ",
        "format": "int32",
        "x-enumNames": [
          "Single",
          "Simultaneous",
          "Multipart",
          "Recurring"
        ]
      },
      "StateInfo": {
        "type": "object",
        "properties": {
          "stateId": {
            "type": "string",
            "description": "State Id. Unique identifier of this record.",
            "nullable": true,
            "example": "NJ"
          },
          "name": {
            "type": "string",
            "description": "Name of the State",
            "nullable": true,
            "example": "New Jersey"
          },
          "code": {
            "type": "string",
            "description": "State Code. Unique Identifier of this record.",
            "nullable": true,
            "example": "NJ"
          },
          "countryId": {
            "type": "string",
            "description": "Country Id for the state.",
            "nullable": true,
            "example": "NJ"
          }
        },
        "additionalProperties": false
      },
      "StateInfoList": {
        "type": "object",
        "properties": {
          "states": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StateInfo"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "StatusCodeProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": {}
      },
      "SubLicenseCompliancePeriodInfo": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "description": "Unique Identifier of the user in CE Manager.",
            "format": "int32",
            "example": 252
          },
          "licenseId": {
            "type": "integer",
            "description": "License Id. Please use the License GET endpoints for the complete list.",
            "format": "int32",
            "example": 381
          },
          "licenseName": {
            "type": "string",
            "description": "License name",
            "nullable": true,
            "example": "Illinois Law"
          },
          "periodNumber": {
            "type": "integer",
            "description": "License Period Number",
            "format": "int32",
            "example": 1
          },
          "periodTypeId": {
            "type": "integer",
            "description": "License Period Type",
            "format": "int32",
            "example": 1
          },
          "periodFrom": {
            "type": "string",
            "description": "License Period Start Date",
            "format": "date-time",
            "example": "2021-01-01T00:00:00"
          },
          "periodTo": {
            "type": "string",
            "description": "License Period End Date",
            "format": "date-time",
            "example": "2022-01-01T00:00:00"
          },
          "complianceStatusId": {
            "type": "integer",
            "description": "License Compliance Status Id. Please use the Compliance GetStatuses endpoint for the complete list.",
            "format": "int32",
            "example": 1
          },
          "complianceStatus": {
            "type": "string",
            "description": "User License Compliance Status.",
            "nullable": true,
            "example": "In Compliance"
          },
          "periodLabel": {
            "type": "string",
            "description": "License Period Label",
            "nullable": true,
            "example": "Newly Admitted"
          },
          "periodFromCourse": {
            "type": "string",
            "description": "License period from course",
            "format": "date-time",
            "nullable": true,
            "example": "2021-01-01T00:00:00"
          },
          "periodToDisplay": {
            "type": "string",
            "description": "License period to display",
            "format": "date-time",
            "nullable": true,
            "example": "2021-01-01T00:00:00"
          },
          "parentLicenseId": {
            "type": "integer",
            "description": "Parent License Id. Please use the License GET endpoints for the complete list.",
            "format": "int32",
            "example": 381
          },
          "priorPeriodDeficiency": {
            "type": "boolean",
            "description": "Indicates if complaince has prior period deficiency",
            "nullable": true,
            "example": true
          },
          "totalCreditsNeeded": {
            "type": "number",
            "description": "Value of Total Credits Needed",
            "format": "double",
            "nullable": true,
            "example": 15
          },
          "additionalRequirementStatus": {
            "type": "string",
            "description": "Describes the Additional Requirement Status",
            "nullable": true,
            "example": "Incomplete"
          }
        },
        "additionalProperties": false
      },
      "TagInfo": {
        "type": "object",
        "properties": {
          "tagId": {
            "type": "integer",
            "description": "Tag Id. Unique identifier of this record.",
            "format": "int32",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Name of the tag",
            "nullable": true,
            "example": "General"
          },
          "code": {
            "type": "string",
            "description": "Tag Code. Unique Identifier of this record.",
            "nullable": true,
            "example": "TAG001"
          },
          "isActive": {
            "type": "boolean",
            "description": "Indicates if the record is active or archived.",
            "example": true
          },
          "courseCount": {
            "type": "integer",
            "description": "Number of courses associated to this tag.",
            "format": "int32",
            "example": 2
          }
        },
        "additionalProperties": false
      },
      "TagInfoList": {
        "type": "object",
        "properties": {
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagInfo"
            },
            "nullable": true
          },
          "recordCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "TimezoneInfo": {
        "type": "object",
        "properties": {
          "timezoneId": {
            "type": "string",
            "description": "Timezone Id. Unique identifier of this record.",
            "nullable": true,
            "example": "US/Eastern"
          },
          "abbreviation": {
            "type": "string",
            "description": "Abbreviation of the time zone",
            "nullable": true,
            "example": "EST"
          },
          "description": {
            "type": "string",
            "description": "Describes the timezone record",
            "nullable": true,
            "example": "Timezone for US/Eastern"
          },
          "name": {
            "type": "string",
            "description": "Name of the timezone",
            "nullable": true,
            "example": "(UTC-05:00) Eastern Time (US &amp; Canada)"
          },
          "code": {
            "type": "string",
            "description": "Timezone Code. Unique Identifier of this record.",
            "nullable": true,
            "example": "US/Eastern"
          }
        },
        "additionalProperties": false
      },
      "TimezoneInfoList": {
        "type": "object",
        "properties": {
          "timezones": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimezoneInfo"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UnassignUserFromGroupCommand": {
        "required": [
          "groupId",
          "userIds"
        ],
        "type": "object",
        "properties": {
          "groupId": {
            "type": "integer",
            "description": "Security Group Id. Unique identifier of the record to update.",
            "format": "int32",
            "example": 1
          },
          "userIds": {
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Comma separated list of Ids of records to be added to the security group.",
            "example": [
              1,
              3
            ]
          }
        },
        "additionalProperties": false
      },
      "UpdateAffiliationCommand": {
        "required": [
          "affiliationId",
          "name"
        ],
        "type": "object",
        "properties": {
          "affiliationId": {
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "integer",
            "description": "Affiliation Id. Unique identifier of the record to update.",
            "format": "int32",
            "example": 1
          },
          "name": {
            "maxLength": 500,
            "minLength": 1,
            "type": "string",
            "description": "Name of the company",
            "example": "ACME Inc"
          },
          "address": {
            "maxLength": 100,
            "type": "string",
            "description": "Street address",
            "nullable": true,
            "example": "17-17 Route 208 North"
          },
          "city": {
            "maxLength": 100,
            "type": "string",
            "description": "City",
            "nullable": true,
            "example": "Fair Lawn"
          },
          "countryId": {
            "maxLength": 5,
            "type": "string",
            "description": "Country Id.",
            "nullable": true,
            "example": "USA"
          },
          "stateId": {
            "maxLength": 100,
            "type": "string",
            "description": "State Id. Please see the State GET endpoints for the complete list.",
            "nullable": true,
            "example": "NJ"
          },
          "zip": {
            "maxLength": 50,
            "type": "string",
            "description": "Zip code.",
            "nullable": true,
            "example": "07410"
          },
          "phone": {
            "maxLength": 25,
            "type": "string",
            "description": "Phone number.",
            "nullable": true,
            "example": "(201) 652-2229"
          },
          "timezoneId": {
            "type": "string",
            "description": "Timezone Id.  Please see the Timezone GET endpoints for the complete list.",
            "nullable": true,
            "example": "US/Eastern"
          },
          "isActive": {
            "type": "boolean",
            "description": "Indicates if the record is active or archived.",
            "nullable": true,
            "example": true
          },
          "code": {
            "maxLength": 15,
            "minLength": 1,
            "type": "string",
            "description": "Affiliation Code. Unique Identifier of this record.",
            "nullable": true,
            "example": "AFF001"
          }
        },
        "additionalProperties": false
      },
      "UpdateClassYearCommand": {
        "required": [
          "classYearId",
          "code",
          "name"
        ],
        "type": "object",
        "properties": {
          "classYearId": {
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "integer",
            "description": "Class Year Id. Unique identifier of this record.",
            "format": "int32",
            "example": 1
          },
          "name": {
            "maxLength": 500,
            "minLength": 1,
            "type": "string",
            "description": "Name of the class year.",
            "example": "Class Year 2018"
          },
          "isActive": {
            "type": "boolean",
            "description": "Indicates if the record is active or archived.",
            "nullable": true,
            "example": true
          },
          "code": {
            "maxLength": 15,
            "minLength": 1,
            "type": "string",
            "description": "Class Year Code. Unique Identifier of this record.",
            "example": "CY001"
          }
        },
        "additionalProperties": false
      },
      "UpdateClientCommand": {
        "required": [
          "userId"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "description": "Unique Identifier of the user in CE Manager.",
            "format": "int32",
            "example": 252
          },
          "firstName": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "First Name.",
            "nullable": true,
            "example": "Jane"
          },
          "middleName": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Middle Name.",
            "nullable": true,
            "example": "Baker"
          },
          "lastName": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Last Name.",
            "nullable": true,
            "example": "Smith"
          },
          "nickname": {
            "maxLength": 100,
            "type": "string",
            "description": "Nick name.",
            "nullable": true,
            "example": "Jane"
          },
          "email": {
            "maxLength": 100,
            "type": "string",
            "description": "Email.",
            "nullable": true,
            "example": "j.smith@micronsystems.com"
          },
          "personnelId": {
            "maxLength": 128,
            "type": "string",
            "description": "Unique Identifier of the user.",
            "nullable": true,
            "example": "DBSP0023"
          },
          "genderId": {
            "type": "integer",
            "description": "Gender information. Please see the Gender GET endpoints for the complete list.",
            "format": "int32",
            "nullable": true
          },
          "inactiveDate": {
            "type": "string",
            "description": "Inactive date in YYYY-MM-DD format. Set to null to remove the date. Do not include in the request to keep the current value.",
            "format": "date-time",
            "nullable": true,
            "example": "2021-01-01"
          },
          "terminationDate": {
            "type": "string",
            "description": "Termination date in YYYY-MM-DD format. Set to null to remove the date. Do not include in the request to keep the current value.",
            "format": "date-time",
            "nullable": true,
            "example": "2021-01-01"
          },
          "street": {
            "maxLength": 100,
            "type": "string",
            "description": "Street Address",
            "nullable": true,
            "example": "17-17 Route 208 North"
          },
          "city": {
            "maxLength": 100,
            "type": "string",
            "description": "City",
            "nullable": true,
            "example": "Fair lawn"
          },
          "stateId": {
            "maxLength": 100,
            "type": "string",
            "description": "State Id. Please see the State GET endpoints for the complete list.",
            "nullable": true,
            "example": "NJ"
          },
          "countryId": {
            "maxLength": 5,
            "type": "string",
            "description": "Country Id. Please see the Country GET endpoints for the complete list.",
            "nullable": true,
            "example": "USA"
          },
          "zip": {
            "maxLength": 50,
            "type": "string",
            "description": "Zip Code.",
            "nullable": true,
            "example": "07601"
          },
          "phone": {
            "maxLength": 25,
            "type": "string",
            "description": "Phone Number.",
            "nullable": true,
            "example": "+12016522229"
          },
          "affiliationId": {
            "type": "integer",
            "description": "Affiliation Id. Please see the Affiliation GET endpoints for the complete list.",
            "format": "int32",
            "nullable": true
          },
          "position": {
            "maxLength": 500,
            "type": "string",
            "description": "Position.",
            "nullable": true,
            "example": "Senior Partner"
          },
          "userLicense": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserLicenseDto"
            },
            "description": "User License Information.",
            "nullable": true
          },
          "userRole": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserRoleDto"
            },
            "description": "Assigned role. This determines the permission of the user.",
            "nullable": true
          },
          "userGroup": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SecurityUserSecurityGroupInfo"
            },
            "description": "User security groups.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateCompetencyCommand": {
        "required": [
          "code",
          "competencyId",
          "name"
        ],
        "type": "object",
        "properties": {
          "competencyId": {
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "integer",
            "description": "Competency Id. Unique identifier of the record to update.",
            "format": "int32",
            "example": 1
          },
          "name": {
            "maxLength": 500,
            "minLength": 1,
            "type": "string",
            "description": "Name of the competency.",
            "example": "Competency 01"
          },
          "isActive": {
            "type": "boolean",
            "description": "Indicates if the record is active or archived.",
            "nullable": true,
            "example": true
          },
          "code": {
            "maxLength": 15,
            "minLength": 1,
            "type": "string",
            "description": "Competency Code. Unique Identifier of this record.",
            "example": "CO-01"
          }
        },
        "additionalProperties": false
      },
      "UpdateCourseCommand": {
        "required": [
          "courseId"
        ],
        "type": "object",
        "properties": {
          "courseId": {
            "type": "integer",
            "description": "Course Id. Unique identifier of the course.",
            "format": "int32",
            "example": 171
          },
          "title": {
            "maxLength": 1000,
            "type": "string",
            "description": "Course Title",
            "nullable": true,
            "example": "Electronic Information: Strategies and Challenges"
          },
          "courseCode": {
            "type": "string",
            "description": "Course Code.",
            "nullable": true,
            "example": "EASC"
          },
          "providerId": {
            "type": "integer",
            "description": "Provider Id. Please see the Provider GET endpoint for the complete list.",
            "format": "int32",
            "nullable": true,
            "example": 2
          },
          "description": {
            "maxLength": 8000,
            "type": "string",
            "description": "Course Description.",
            "nullable": true,
            "example": "Basic Strategies and Challenges"
          },
          "courseClassYear": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Course class years. Please see the Class Year GET endpoint for the the complete list.",
            "nullable": true,
            "example": [
              1,
              5
            ]
          },
          "courseCompetency": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Course competencies. Please see the Competency GET endpoint for the the complete list.",
            "nullable": true,
            "example": [
              3,
              9
            ]
          },
          "courseDepartment": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Course departments. Please see the Department GET endpoint for the the complete list.",
            "nullable": true,
            "example": [
              3,
              9
            ]
          },
          "courseLevel": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Course levels. Please see the Level GET endpoint for the the complete list.",
            "nullable": true,
            "example": [
              1,
              6
            ]
          },
          "coursePracticeArea": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Course practicea areas. Please see the Practice Area GET endpoint for the the complete list.",
            "nullable": true,
            "example": [
              2,
              3
            ]
          },
          "courseTag": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Course tags. Please see the TAG GET endpoint for the the complete list.",
            "nullable": true,
            "example": [
              1,
              2
            ]
          }
        },
        "additionalProperties": false
      },
      "UpdateDepartmentCommand": {
        "required": [
          "code",
          "departmentId",
          "name"
        ],
        "type": "object",
        "properties": {
          "departmentId": {
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "integer",
            "description": "Department Id. Unique identifier of the record to update.",
            "format": "int32",
            "example": 1
          },
          "name": {
            "maxLength": 500,
            "minLength": 1,
            "type": "string",
            "description": "Name of the department",
            "example": "Accounting"
          },
          "isActive": {
            "type": "boolean",
            "description": "Set the record as active or archived.",
            "nullable": true,
            "example": true
          },
          "code": {
            "maxLength": 15,
            "minLength": 1,
            "type": "string",
            "description": "Department Code. Unique Identifier of this record.",
            "example": "DEP001"
          }
        },
        "additionalProperties": false
      },
      "UpdateEmployeeCommand": {
        "required": [
          "userId"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "description": "Unique Identifier of the user in CE Manager.",
            "format": "int32",
            "example": 252
          },
          "firstName": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "First Name.",
            "nullable": true,
            "example": "Jane"
          },
          "middleName": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Middle Name.",
            "nullable": true,
            "example": "Baker"
          },
          "lastName": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Last Name.",
            "nullable": true,
            "example": "Smith"
          },
          "nickname": {
            "maxLength": 100,
            "type": "string",
            "description": "Nick name.",
            "nullable": true,
            "example": "Jane"
          },
          "email": {
            "maxLength": 100,
            "type": "string",
            "description": "Email.",
            "nullable": true,
            "example": "j.smith@micronsystems.com"
          },
          "personnelId": {
            "maxLength": 128,
            "type": "string",
            "description": "Unique Identifier of the user.",
            "nullable": true,
            "example": "DBSP0023"
          },
          "genderId": {
            "type": "integer",
            "description": "Gender information. Please see the Gender GET endpoints for the complete list.",
            "format": "int32",
            "nullable": true
          },
          "birthDate": {
            "type": "string",
            "description": "Birth date in YYYY-MM-DD format",
            "format": "date-time",
            "nullable": true,
            "example": "2021-01-01"
          },
          "graduationDate": {
            "type": "string",
            "description": "Graduation date in YYYY-MM-DD format",
            "format": "date-time",
            "nullable": true,
            "example": "2021-01-01"
          },
          "hireDate": {
            "type": "string",
            "description": "Hire date in YYYY-MM-DD format",
            "format": "date-time",
            "nullable": true,
            "example": "2021-01-01"
          },
          "inactiveDate": {
            "type": "string",
            "description": "Inactive date in YYYY-MM-DD format. Set to null to remove the date. Do not include in the request to keep the current value.",
            "format": "date-time",
            "nullable": true,
            "example": "2021-01-01"
          },
          "terminationDate": {
            "type": "string",
            "description": "Termination date in YYYY-MM-DD format. Set to null to remove the date. Do not include in the request to keep the current value.",
            "format": "date-time",
            "nullable": true,
            "example": "2021-01-01"
          },
          "locationId": {
            "type": "integer",
            "description": "Location Id. Please see the Location GET endpoints for the complete list.",
            "format": "int32",
            "nullable": true,
            "example": 1
          },
          "userRole": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserRoleDto"
            },
            "description": "Assigned role. This determines the permission of the user.",
            "nullable": true
          },
          "userPosition": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserPositionDto"
            },
            "description": "User position information.",
            "nullable": true
          },
          "userClassYear": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserClassYearDto"
            },
            "description": "User class year information.",
            "nullable": true
          },
          "userDepartment": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserDepartmentDto"
            },
            "description": "User department information.",
            "nullable": true
          },
          "userEthnicity": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserEthnicityDto"
            },
            "description": "User ethnicity information.",
            "nullable": true
          },
          "userGroup": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SecurityUserSecurityGroupInfo"
            },
            "description": "User security groups.",
            "nullable": true
          },
          "userLevel": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserLevelDto"
            },
            "description": "User level information.",
            "nullable": true
          },
          "userLicense": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserLicenseDto"
            },
            "description": "User License Information.",
            "nullable": true
          },
          "userPracticeArea": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserPracticeAreaDto"
            },
            "description": "User practice area information.",
            "nullable": true
          },
          "userRelationship": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserRelationshipDto"
            },
            "description": "Assigned administrative assistant or supervisor of the user.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateEthnicityCommand": {
        "required": [
          "code",
          "ethnicityId",
          "name"
        ],
        "type": "object",
        "properties": {
          "ethnicityId": {
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "integer",
            "description": "Ethnicity Id. Unique identifier of the record to update.",
            "format": "int32",
            "example": 1
          },
          "name": {
            "maxLength": 500,
            "minLength": 1,
            "type": "string",
            "description": "Name of the ethnicity.",
            "example": "American"
          },
          "isActive": {
            "type": "boolean",
            "description": "Set the record as active or archived.",
            "nullable": true,
            "example": true
          },
          "code": {
            "maxLength": 15,
            "minLength": 1,
            "type": "string",
            "description": "Ethnicity Code. Unique Identifier of this record.",
            "example": "ETH001"
          }
        },
        "additionalProperties": false
      },
      "UpdateGenderCommand": {
        "required": [
          "code",
          "genderId",
          "name"
        ],
        "type": "object",
        "properties": {
          "genderId": {
            "type": "integer",
            "description": "Gender Id. Unique identifier of the record to update.",
            "format": "int32",
            "example": 1
          },
          "name": {
            "maxLength": 500,
            "minLength": 1,
            "type": "string",
            "description": "Name of the gender",
            "example": "Female"
          },
          "isActive": {
            "type": "boolean",
            "description": "Set the record as active or archived.",
            "nullable": true,
            "example": true
          },
          "code": {
            "maxLength": 15,
            "minLength": 1,
            "type": "string",
            "description": "Gender Code. Unique Identifier of this record.",
            "example": "GEN001"
          }
        },
        "additionalProperties": false
      },
      "UpdateGroupCommand": {
        "required": [
          "groupId",
          "name"
        ],
        "type": "object",
        "properties": {
          "groupId": {
            "type": "integer",
            "description": "Security Group Id. Unique identifier of the record to update.",
            "format": "int32",
            "example": 1
          },
          "name": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Name of the security group.",
            "example": "Administrator - Limited Access"
          },
          "description": {
            "maxLength": 1000,
            "type": "string",
            "description": "Description of the security group.",
            "nullable": true,
            "example": "Administrator with no library access"
          },
          "isActive": {
            "type": "boolean",
            "description": "Indicates if the record is active or inactive.",
            "example": true
          }
        },
        "additionalProperties": false
      },
      "UpdateLearningPlanCommand": {
        "type": "object",
        "properties": {
          "learningPlanId": {
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "maxLength": 1000,
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "notes": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "integer",
            "format": "int32"
          },
          "timeframeOfCompletion": {
            "$ref": "#/components/schemas/LearningPlanTimeframeOfCompletionEnum"
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "duration": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "durationType": {
            "$ref": "#/components/schemas/DurationTypeEnum"
          },
          "archivedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "requiredCourses": {
            "type": "integer",
            "format": "int32"
          },
          "isSelfEnrolled": {
            "type": "boolean",
            "nullable": true
          },
          "addParticipantEmail": {
            "type": "boolean"
          },
          "deleteParticipantEmail": {
            "type": "boolean"
          },
          "updateParticipantStatusEmail": {
            "type": "boolean"
          },
          "retainAdjustedParticipants": {
            "type": "boolean"
          },
          "learningPlanCompetencies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LearningPlanCompetencyDto"
            },
            "nullable": true
          },
          "learningPlanTags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LearningPlanTagDto"
            },
            "nullable": true
          },
          "learningPlanMaterials": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LearningPlanMaterialDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateLearningPlanInfo": {
        "type": "object",
        "properties": {
          "learningPlanId": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "notes": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "integer",
            "format": "int32"
          },
          "timeframeOfCompletion": {
            "$ref": "#/components/schemas/LearningPlanTimeframeOfCompletionEnum"
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "duration": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "durationType": {
            "$ref": "#/components/schemas/DurationTypeEnum"
          },
          "requiredCourses": {
            "type": "integer",
            "format": "int32"
          },
          "isSelfEnrolled": {
            "type": "boolean",
            "nullable": true
          },
          "addParticipantEmail": {
            "type": "boolean"
          },
          "deleteParticipantEmail": {
            "type": "boolean"
          },
          "updateParticipantStatusEmail": {
            "type": "boolean"
          },
          "archivedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "learningPlanCompetencies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LearningPlanCompetencyDto"
            },
            "nullable": true
          },
          "learningPlanTags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LearningPlanTagDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateLevelCommand": {
        "required": [
          "code",
          "levelId",
          "name"
        ],
        "type": "object",
        "properties": {
          "levelId": {
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "integer",
            "description": "Level Id. Unique identifier of the record to update.",
            "format": "int32",
            "example": 1
          },
          "name": {
            "maxLength": 500,
            "minLength": 1,
            "type": "string",
            "description": "Name of the Level",
            "example": "Associate"
          },
          "isActive": {
            "type": "boolean",
            "description": "Set the record as active or archived.",
            "nullable": true,
            "example": true
          },
          "code": {
            "maxLength": 15,
            "minLength": 1,
            "type": "string",
            "description": "Level Code. Unique Identifier of this record.",
            "example": "LVL001"
          }
        },
        "additionalProperties": false
      },
      "UpdateLocationCommand": {
        "required": [
          "code",
          "locationId",
          "name",
          "timezoneId"
        ],
        "type": "object",
        "properties": {
          "locationId": {
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "integer",
            "description": "Location Id. Uniqure identifier of this record.",
            "format": "int32",
            "example": 1
          },
          "name": {
            "maxLength": 500,
            "minLength": 1,
            "type": "string",
            "description": "Name of the location.",
            "example": "Acme Corporation"
          },
          "address": {
            "maxLength": 100,
            "type": "string",
            "description": "Address of the Firm Office or Third Party Location.",
            "nullable": true,
            "example": "10 Broadway"
          },
          "code": {
            "maxLength": 15,
            "minLength": 1,
            "type": "string",
            "description": "Location Code. Unique identifier of this record.",
            "example": "L-01"
          },
          "city": {
            "maxLength": 100,
            "type": "string",
            "description": "The city where the location is based.",
            "nullable": true,
            "example": "New York"
          },
          "countryId": {
            "maxLength": 5,
            "type": "string",
            "description": "Id of the country.",
            "nullable": true,
            "example": "1"
          },
          "stateId": {
            "maxLength": 100,
            "type": "string",
            "description": "Id of the state.",
            "nullable": true,
            "example": "1"
          },
          "zip": {
            "maxLength": 50,
            "type": "string",
            "description": "Zip code of the location's address.",
            "nullable": true,
            "example": "10004"
          },
          "telephone": {
            "maxLength": 25,
            "type": "string",
            "description": "Telephone of the Firm Office or Third Party Location.",
            "nullable": true,
            "example": "555-666-7777"
          },
          "timezoneId": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Id of the time zone.",
            "example": "1"
          },
          "isActive": {
            "type": "boolean",
            "description": "Indicates if the record is active or archived.",
            "nullable": true,
            "example": true
          },
          "isFirmOffice": {
            "type": "boolean",
            "description": "Indicates if the record is a firm office location or not.",
            "nullable": true,
            "example": true
          },
          "countyId": {
            "maxLength": 100,
            "type": "string",
            "description": "Id of the county.",
            "nullable": true,
            "example": "1"
          }
        },
        "additionalProperties": false
      },
      "UpdateParticipantCommand": {
        "required": [
          "sessionId"
        ],
        "type": "object",
        "properties": {
          "sessionId": {
            "type": "integer",
            "description": "Session Id. Unique identifier of this session.",
            "format": "int32",
            "example": 1
          },
          "userId": {
            "type": "integer",
            "description": "Unique Identifier of the user in CE Manager.",
            "format": "int32",
            "nullable": true,
            "example": 252
          },
          "personnelId": {
            "type": "string",
            "description": "Alternative unique identifier of the user.",
            "nullable": true,
            "example": "DBSP0023"
          },
          "email": {
            "type": "string",
            "description": "Email.",
            "nullable": true,
            "example": "j.smith@micronsystems.com"
          },
          "isInstructor": {
            "type": "boolean",
            "description": "Flag to determine if the user is an attendee or instructor.",
            "nullable": true,
            "example": false
          },
          "isTentative": {
            "type": "boolean",
            "description": "Flag to determine if the attendee is tentatively registered to the session.",
            "nullable": true,
            "example": false
          },
          "registrationDate": {
            "type": "string",
            "description": "Date of registration in ISO8601 format (YYYY-MM-DDTHH:mm:ssZ)",
            "format": "date-time",
            "nullable": true,
            "example": "Smith"
          },
          "completionDate": {
            "type": "string",
            "description": "Date of completion in ISO8601 format (YYYY-MM-DDTHH:mm:ssZ)",
            "format": "date-time",
            "nullable": true,
            "example": "Smith"
          },
          "userLicenseCreditValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SessionParticipantsUserLicenseCreditValueDto"
            },
            "description": "User Credit Information.",
            "nullable": true
          },
          "userLicensePropertyValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SessionParticipantsUserLicensePropertyValueDto"
            },
            "description": "User License Property Information.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateParticipantEvaluationCommand": {
        "required": [
          "email",
          "evaluationDate",
          "sessionId"
        ],
        "type": "object",
        "properties": {
          "sessionId": {
            "type": "integer",
            "description": "Session Id. Unique identifier of the session.",
            "format": "int32",
            "example": 1
          },
          "email": {
            "minLength": 1,
            "type": "string",
            "description": "Email address of the participant.",
            "example": "j.smith@micronsystems.com"
          },
          "evaluationDate": {
            "minLength": 1,
            "type": "string",
            "description": "Date of evaluation in YYYY-MM-DD format.",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "UpdatePositionCommand": {
        "required": [
          "code",
          "name",
          "positionId"
        ],
        "type": "object",
        "properties": {
          "positionId": {
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "integer",
            "description": "Position Id. Unique identifier of the record to update.",
            "format": "int32",
            "example": 1
          },
          "name": {
            "maxLength": 500,
            "minLength": 1,
            "type": "string",
            "description": "Name of the position.",
            "example": "Associate"
          },
          "isActive": {
            "type": "boolean",
            "description": "Set the record as active or archived.",
            "nullable": true,
            "example": true
          },
          "code": {
            "maxLength": 15,
            "minLength": 1,
            "type": "string",
            "description": "Position Code. Unique Identifier of this record.",
            "example": "P001"
          }
        },
        "additionalProperties": false
      },
      "UpdatePracticeAreaCommand": {
        "required": [
          "code",
          "name",
          "practiceAreaId"
        ],
        "type": "object",
        "properties": {
          "practiceAreaId": {
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "integer",
            "description": "Practice Area Id. Unique identifier of the record to update.",
            "format": "int32",
            "example": 1
          },
          "name": {
            "maxLength": 500,
            "minLength": 1,
            "type": "string",
            "description": "Name of the practice area",
            "example": "Litigation"
          },
          "isActive": {
            "type": "boolean",
            "description": "Indicates if the record is active or archived.",
            "nullable": true,
            "example": true
          },
          "code": {
            "maxLength": 15,
            "minLength": 1,
            "type": "string",
            "description": "Practice Area Code. Unique Identifier of this record.",
            "example": "PA001"
          }
        },
        "additionalProperties": false
      },
      "UpdateProviderCommand": {
        "required": [
          "code",
          "name",
          "providerId"
        ],
        "type": "object",
        "properties": {
          "providerId": {
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "integer",
            "description": "Provider Id. Unique identifier of the record to update.",
            "format": "int32",
            "example": 1
          },
          "name": {
            "maxLength": 500,
            "minLength": 1,
            "type": "string",
            "description": "Name of the provider",
            "example": "Accounting"
          },
          "isInHouse": {
            "type": "boolean",
            "description": "Indicates if the record is an In-House provider. If this is false, the provider will be flagged as Third-Party.",
            "nullable": true,
            "example": true
          },
          "isActive": {
            "type": "boolean",
            "description": "Indicates if the record is active or archived.",
            "nullable": true,
            "example": true
          },
          "code": {
            "maxLength": 15,
            "minLength": 1,
            "type": "string",
            "description": "Provider Code. Unique Identifier of this record.",
            "example": "PROV001"
          },
          "url": {
            "maxLength": 100,
            "type": "string",
            "description": "An HTML link that opens a provider's site",
            "nullable": true,
            "example": "https://www.micronsystems.com/"
          }
        },
        "additionalProperties": false
      },
      "UpdateRoomCommand": {
        "required": [
          "code",
          "locationId",
          "name",
          "roomId"
        ],
        "type": "object",
        "properties": {
          "roomId": {
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "integer",
            "description": "Room Id. Unique Identifier of the record to update",
            "format": "int32",
            "example": 1
          },
          "locationId": {
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "integer",
            "description": "Location Id. Please see the Location GET endpoints for the complete list",
            "format": "int32",
            "example": 1
          },
          "name": {
            "maxLength": 500,
            "minLength": 1,
            "type": "string",
            "description": "Name of the room",
            "example": "Room 501"
          },
          "capacity": {
            "type": "integer",
            "description": "Number of person a room can handle",
            "format": "int32",
            "nullable": true,
            "example": 20
          },
          "isActive": {
            "type": "boolean",
            "description": "Name of the company",
            "nullable": true
          },
          "code": {
            "maxLength": 15,
            "minLength": 1,
            "type": "string",
            "description": "Room Code. Unique Identifier of this record.",
            "example": "ROOM001"
          }
        },
        "additionalProperties": false
      },
      "UpdateSessionAndLicensesCommand": {
        "required": [
          "sessionId"
        ],
        "type": "object",
        "properties": {
          "sessionId": {
            "type": "integer",
            "description": "Session Id. Unique identifier of this session.",
            "format": "int32",
            "example": 1
          },
          "title": {
            "maxLength": 1000,
            "type": "string",
            "description": "Session Title.",
            "nullable": true,
            "example": "Ethics 101: Part 1"
          },
          "code": {
            "type": "string",
            "description": "Session Code. Unique identifier of this session.",
            "nullable": true,
            "example": "S01001"
          },
          "courseFormatId": {
            "type": "integer",
            "description": "Course Format. Please use the CourseFormat GET endpoint for the complete list.",
            "format": "int32",
            "nullable": true,
            "example": 1
          },
          "startDate": {
            "type": "string",
            "description": "Session start date in YYYY-MM-DD format.",
            "format": "date-time",
            "nullable": true,
            "example": "2021-01-01"
          },
          "endDate": {
            "type": "string",
            "description": "Session end date in YYYY-MM-DD format.",
            "format": "date-time",
            "nullable": true,
            "example": "2021-01-02"
          },
          "startTime": {
            "type": "string",
            "description": "Session start time.",
            "nullable": true,
            "example": "09:00 AM"
          },
          "endTime": {
            "type": "string",
            "description": "Session end time.",
            "nullable": true,
            "example": "10:00 AM"
          },
          "locationId": {
            "type": "integer",
            "description": "Location Id. Please use the Location GET endpoint for the complete list.",
            "format": "int32",
            "nullable": true,
            "example": 1
          },
          "timezoneId": {
            "type": "string",
            "description": "Timezone Id. Please use the Timezone GET endpoint for the complete list.",
            "nullable": true,
            "example": "US/Eastern"
          },
          "roomId": {
            "type": "integer",
            "description": "Room Id. Please use the Room GET endpoint for the complete list.",
            "format": "int32",
            "nullable": true,
            "example": 1
          },
          "cost": {
            "type": "number",
            "description": "Cost.",
            "format": "float",
            "nullable": true,
            "example": 10
          },
          "areQuestionsAllowed": {
            "type": "boolean",
            "description": "Set to true if the session allows for questions. Default is false.",
            "nullable": true,
            "example": false
          },
          "url": {
            "maxLength": 500,
            "type": "string",
            "description": "URL.",
            "nullable": true,
            "example": "https://www.micronsystems.com"
          },
          "detail": {
            "type": "string",
            "description": "Session Detail.",
            "nullable": true,
            "example": "Ethics 101 offers an exciting look into the history of moral principles that dictate human behavior."
          },
          "isOpenToClient": {
            "type": "boolean",
            "description": "Set to true to open the session for client registration. Default is false.",
            "nullable": true,
            "example": true
          },
          "isIndividualSessionDateAllowed": {
            "type": "boolean",
            "description": "Set to true to allow individual attendance date. Default is false.",
            "nullable": true,
            "example": true
          },
          "isPublished": {
            "type": "boolean",
            "description": "Set to true to publish the session. This will make the session available in Portal.",
            "nullable": true,
            "example": true
          },
          "sessionLicenses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SessionLicenseDto"
            },
            "description": "Session License Information.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateTagCommand": {
        "required": [
          "code",
          "name",
          "tagId"
        ],
        "type": "object",
        "properties": {
          "tagId": {
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "integer",
            "description": "Tag Id. Unique identifier of the record to update.",
            "format": "int32",
            "example": 1
          },
          "name": {
            "maxLength": 500,
            "minLength": 1,
            "type": "string",
            "description": "Name of the tag",
            "example": "General"
          },
          "isActive": {
            "type": "boolean",
            "description": "Set the record as active or archived.",
            "nullable": true,
            "example": true
          },
          "code": {
            "maxLength": 15,
            "minLength": 1,
            "type": "string",
            "description": "Tag Code. Unique Identifier of this record.",
            "example": "TAG001"
          }
        },
        "additionalProperties": false
      },
      "UpdateUserLicenseCommand": {
        "required": [
          "licenseId",
          "userId"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "description": "Unique Identifier of the user in CE Manager.",
            "format": "int32",
            "example": 252
          },
          "licenseId": {
            "type": "integer",
            "description": "License Id. Please use the License GET endpoints for the complete list.",
            "format": "int32",
            "example": 381
          },
          "userLicenseProfileValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserLicenseProfileValueInfo"
            },
            "description": "License profile information.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserAvatarDto": {
        "type": "object",
        "properties": {
          "userAvatarId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "fileId": {
            "type": "integer",
            "format": "int32"
          },
          "userAvatarUrl": {
            "type": "string",
            "nullable": true
          },
          "userAvatarThumbnailURl": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserClassYearDto": {
        "type": "object",
        "properties": {
          "classYearId": {
            "type": "integer",
            "description": "Unique Identifier of the Class Year.",
            "format": "int32",
            "example": 1
          }
        },
        "additionalProperties": false
      },
      "UserClassYearInfo": {
        "type": "object",
        "properties": {
          "classYearId": {
            "type": "integer",
            "description": "Class Year Id. Unique Identifier of this record.",
            "format": "int32",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Class Year Name.",
            "nullable": true,
            "example": "CY2005"
          },
          "code": {
            "type": "string",
            "description": "Class Year Code. Unique Identifier of this record.",
            "nullable": true,
            "example": "CY05"
          }
        },
        "additionalProperties": false
      },
      "UserCourseHistoryDto": {
        "type": "object",
        "properties": {
          "sessionParticipantId": {
            "type": "integer",
            "format": "int32"
          },
          "sessionId": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "isInstructor": {
            "type": "boolean"
          },
          "isValidated": {
            "type": "boolean"
          },
          "completionDate": {
            "type": "string",
            "format": "date-time"
          },
          "courseId": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "courseTitle": {
            "type": "string",
            "nullable": true
          },
          "providerId": {
            "type": "integer",
            "format": "int32"
          },
          "providerName": {
            "type": "string",
            "nullable": true
          },
          "formatId": {
            "type": "integer",
            "format": "int32"
          },
          "format": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserCourseHistoryListDto": {
        "type": "object",
        "properties": {
          "userCourseHistory": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserCourseHistoryDto"
            },
            "nullable": true
          },
          "recordCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "UserDepartmentDto": {
        "type": "object",
        "properties": {
          "departmentId": {
            "type": "integer",
            "description": "Unique Identifier of the Department.",
            "format": "int32",
            "example": 1
          }
        },
        "additionalProperties": false
      },
      "UserDepartmentInfo": {
        "type": "object",
        "properties": {
          "departmentId": {
            "type": "integer",
            "description": "Department Id. Unique Identifier of this record.",
            "format": "int32",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Department Name.",
            "nullable": true,
            "example": "Accounting"
          },
          "code": {
            "type": "string",
            "description": "Department Code.",
            "nullable": true,
            "example": "ACTG"
          }
        },
        "additionalProperties": false
      },
      "UserEthnicityDto": {
        "type": "object",
        "properties": {
          "ethnicityId": {
            "type": "integer",
            "description": "Unique Identifier of the Ethnicity.",
            "format": "int32",
            "example": 1
          }
        },
        "additionalProperties": false
      },
      "UserEthnicityInfo": {
        "type": "object",
        "properties": {
          "ethnicityId": {
            "type": "integer",
            "description": "Ethnicity Id. Unique Identifier of this record.",
            "format": "int32",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Ethnicity Name.",
            "nullable": true,
            "example": "Hispanic"
          },
          "code": {
            "type": "string",
            "description": "Ethnicity Code.",
            "nullable": true,
            "example": "HISP"
          }
        },
        "additionalProperties": false
      },
      "UserGroupInfo": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "UserInfo": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "description": "Unique Identifier of the user in CE Manager.",
            "format": "int32",
            "example": 252
          },
          "type": {
            "type": "string",
            "description": "User Type. Administrator | Client | Employee;",
            "nullable": true,
            "example": "User"
          },
          "firstName": {
            "type": "string",
            "description": "First Name.",
            "nullable": true,
            "example": "Jane"
          },
          "middleName": {
            "type": "string",
            "description": "Middle Name.",
            "nullable": true,
            "example": "Baker"
          },
          "lastName": {
            "type": "string",
            "description": "Last Name.",
            "nullable": true,
            "example": "Smith"
          },
          "nickname": {
            "type": "string",
            "description": "Nick name.",
            "nullable": true,
            "example": "Jane"
          },
          "email": {
            "type": "string",
            "description": "Email.",
            "nullable": true,
            "example": "j.smith@micronsystems.com"
          },
          "userName": {
            "type": "string",
            "description": "Login Id.",
            "nullable": true,
            "example": "j.smith"
          },
          "personnelId": {
            "type": "string",
            "description": "Alternative unique identifier of the user.",
            "nullable": true,
            "example": "DBSP0023"
          },
          "gender": {
            "type": "string",
            "description": "Gender information. Please see the Gender GET endpoints for the complete list.",
            "nullable": true
          },
          "birthDate": {
            "type": "string",
            "description": "Birth date in ISO8601 format (YYYY-MM-DDTHH:mm:ssZ)",
            "format": "date-time",
            "nullable": true,
            "example": "2021-01-01T00:00:00"
          },
          "graduationDate": {
            "type": "string",
            "description": "Graduation date in ISO8601 format (YYYY-MM-DDTHH:mm:ssZ)",
            "format": "date-time",
            "nullable": true,
            "example": "2021-01-01T00:00:00"
          },
          "hireDate": {
            "type": "string",
            "description": "Hire date in ISO8601 format (YYYY-MM-DDTHH:mm:ssZ)",
            "format": "date-time",
            "nullable": true,
            "example": "2021-01-01T00:00:00"
          },
          "inactiveDate": {
            "type": "string",
            "description": "Inactive date in ISO8601 format (YYYY-MM-DDTHH:mm:ssZ)",
            "format": "date-time",
            "nullable": true,
            "example": "2021-01-01T00:00:00"
          },
          "terminationDate": {
            "type": "string",
            "description": "Termination date in ISO8601 format (YYYY-MM-DDTHH:mm:ssZ)",
            "format": "date-time",
            "nullable": true,
            "example": "2021-01-01T00:00:00"
          },
          "userRole": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserRoleInfo"
            },
            "description": "Assigned role. This determines the permission and restrictions.",
            "nullable": true
          },
          "location": {
            "$ref": "#/components/schemas/LocationInfo"
          },
          "userLicense": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserLicenseInfo"
            },
            "description": "User License Information.",
            "nullable": true
          },
          "userPosition": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserPositionInfo"
            },
            "description": "User position information.",
            "nullable": true
          },
          "userClassYear": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserClassYearInfo"
            },
            "description": "User class year information.",
            "nullable": true
          },
          "userDepartment": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserDepartmentInfo"
            },
            "description": "User department information.",
            "nullable": true
          },
          "userEthnicity": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserEthnicityInfo"
            },
            "description": "User ethnicity information.",
            "nullable": true
          },
          "userGroup": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SecurityUserSecurityGroupInfo"
            },
            "description": "User security groups.",
            "nullable": true
          },
          "userLevel": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserLevelInfo"
            },
            "description": "User level information.",
            "nullable": true
          },
          "userPracticeArea": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserPracticeAreaInfo"
            },
            "description": "User practice area information.",
            "nullable": true
          },
          "userRelationship": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserRelationshipInfo"
            },
            "description": "Assigned administrative assistant or supervisor to the user.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserInfoList": {
        "type": "object",
        "properties": {
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserInfo"
            },
            "nullable": true
          },
          "recordCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "UserLevelDto": {
        "type": "object",
        "properties": {
          "levelId": {
            "type": "integer",
            "description": "Unique Identifier of the Level.",
            "format": "int32",
            "example": 1
          }
        },
        "additionalProperties": false
      },
      "UserLevelInfo": {
        "type": "object",
        "properties": {
          "levelId": {
            "type": "integer",
            "description": "Level Id. Unique Identifier of this record.",
            "format": "int32",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Level Name.",
            "nullable": true,
            "example": "Associated III"
          },
          "code": {
            "type": "string",
            "description": "Level Code.",
            "nullable": true,
            "example": "A3"
          }
        },
        "additionalProperties": false
      },
      "UserLicenseComplianceInfo": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "description": "Unique Identifier of the user in CE Manager.",
            "format": "int32",
            "example": 252
          },
          "firstName": {
            "type": "string",
            "description": "First Name.",
            "nullable": true,
            "example": "Jane"
          },
          "middleName": {
            "type": "string",
            "description": "Middle Name.",
            "nullable": true,
            "example": "Baker"
          },
          "lastName": {
            "type": "string",
            "description": "Last Name.",
            "nullable": true,
            "example": "Smith"
          },
          "type": {
            "type": "string",
            "description": "User Type. 1 = Administrator; 2 = Client; 3 = User",
            "nullable": true,
            "example": "2"
          },
          "licenseId": {
            "type": "integer",
            "description": "License Id. Please use the License GET endpoints for the complete list.",
            "format": "int32",
            "example": 381
          },
          "licenseName": {
            "type": "string",
            "description": "License name",
            "nullable": true,
            "example": "Illinois Law"
          },
          "subLicenseId": {
            "type": "integer",
            "description": "Sub License Id. Please use the License GET endpoints for the complete list.",
            "format": "int32",
            "example": 381
          },
          "isSubLicenseRolling": {
            "type": "boolean",
            "description": "Indicates whether the sub license has rolling periods",
            "example": false
          },
          "complianceStatusId": {
            "type": "integer",
            "description": "License Compliance Status Id. Please use the Compliance GetStatuses endpoint for the complete list.",
            "format": "int32",
            "example": 1
          },
          "complianceStatus": {
            "type": "string",
            "description": "User License Compliance Status.",
            "nullable": true,
            "example": "In Compliance"
          },
          "isCarryOverAllowed": {
            "type": "boolean",
            "description": "Indicates whether the license allows carry over credits",
            "example": false
          },
          "isSubLicenseCarryOverAllowed": {
            "type": "boolean",
            "description": "Indicates whether the sub license allows carry over credits",
            "example": false
          },
          "isRetroAllowed": {
            "type": "boolean",
            "description": "Indicates whether the license allows retro credits",
            "example": false
          },
          "totalPeriodCount": {
            "type": "integer",
            "description": "The number of period count",
            "format": "int32",
            "example": false
          },
          "reportURL": {
            "type": "string",
            "description": "Compliance report URL",
            "nullable": true,
            "example": "false"
          },
          "userLicenseProfile": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserLicenseProfileInfo"
            },
            "description": "The list of user license profiles",
            "nullable": true
          },
          "compliancePeriods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompliancePeriodInfo"
            },
            "description": "The list of user license compliance periods",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserLicenseCreditValueInfo": {
        "type": "object",
        "properties": {
          "licenseId": {
            "type": "integer",
            "description": "License Id.",
            "format": "int32",
            "example": 14
          },
          "licenseName": {
            "type": "string",
            "description": "License Name.",
            "nullable": true,
            "example": "Alabama Law"
          },
          "creditId": {
            "type": "integer",
            "description": "Credit Id. Unique identifier of this credit type.",
            "format": "int32",
            "example": 4
          },
          "creditName": {
            "type": "string",
            "description": "Credit name.",
            "nullable": true,
            "example": "General"
          },
          "value": {
            "type": "number",
            "description": "Credit Value.",
            "format": "double",
            "example": 1
          }
        },
        "additionalProperties": false
      },
      "UserLicenseDto": {
        "type": "object",
        "properties": {
          "licenseId": {
            "type": "integer",
            "format": "int32"
          },
          "userLicenseProfileValue": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserLicenseProfileValueDto"
            },
            "description": "License Profile Information",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserLicenseInfo": {
        "type": "object",
        "properties": {
          "licenseId": {
            "type": "integer",
            "description": "License Id. Please use the License GET endpoints for the complete list.",
            "format": "int32",
            "example": 381
          },
          "name": {
            "type": "string",
            "description": "License name",
            "nullable": true,
            "example": "Illinois Law"
          },
          "userLicenseProfileValue": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserLicenseProfileValueInfo"
            },
            "description": "License Profile Information",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserLicenseProfileInfo": {
        "type": "object",
        "properties": {
          "profileId": {
            "type": "integer",
            "description": "Profile unique identifier.",
            "format": "int32",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Profile Name.",
            "nullable": true,
            "example": "Bar Number"
          },
          "value": {
            "type": "string",
            "description": "Profile Value.",
            "nullable": true,
            "example": "BAR001"
          }
        },
        "additionalProperties": false
      },
      "UserLicenseProfileValueDto": {
        "type": "object",
        "properties": {
          "profileId": {
            "type": "integer",
            "description": "Profile unique identifier. Please use the License GET endpoints for the complete list.",
            "format": "int32",
            "example": 1
          },
          "value": {
            "type": "string",
            "description": "Profile Value.",
            "nullable": true,
            "example": "BAR001"
          }
        },
        "additionalProperties": false
      },
      "UserLicenseProfileValueInfo": {
        "type": "object",
        "properties": {
          "profileId": {
            "type": "integer",
            "description": "Profile unique identifier.",
            "format": "int32",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Profile Name.",
            "nullable": true,
            "example": "Bar Number"
          },
          "value": {
            "type": "string",
            "description": "Profile Value.",
            "nullable": true,
            "example": "BAR001"
          }
        },
        "additionalProperties": false
      },
      "UserLicensePropertyValueInfo": {
        "type": "object",
        "properties": {
          "licenseId": {
            "type": "integer",
            "description": "License Id.",
            "format": "int32",
            "example": 14
          },
          "licenseName": {
            "type": "string",
            "description": "License Name.",
            "nullable": true,
            "example": "Alabama Law"
          },
          "propertyId": {
            "type": "integer",
            "description": "Property Id. Unique identifier of this license property.",
            "format": "int32",
            "example": 2
          },
          "propertyLabel": {
            "type": "string",
            "description": "Property Label.",
            "nullable": true,
            "example": "Bar Number"
          },
          "propertyValue": {
            "type": "string",
            "description": "Property Value.",
            "nullable": true,
            "example": "BAR0001"
          }
        },
        "additionalProperties": false
      },
      "UserPositionDto": {
        "type": "object",
        "properties": {
          "positionId": {
            "type": "integer",
            "description": "Unique Identifier of the Position.",
            "format": "int32",
            "example": 1
          }
        },
        "additionalProperties": false
      },
      "UserPositionInfo": {
        "type": "object",
        "properties": {
          "positionId": {
            "type": "integer",
            "description": "Position Id. Unique Identifier of this record.",
            "format": "int32",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Position Name.",
            "nullable": true,
            "example": "Senior Partner"
          },
          "code": {
            "type": "string",
            "description": "Position Code.Unique Identifier of this record.",
            "nullable": true,
            "example": "SNRPRTNR"
          }
        },
        "additionalProperties": false
      },
      "UserPracticeAreaDto": {
        "type": "object",
        "properties": {
          "practiceAreaId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "UserPracticeAreaInfo": {
        "type": "object",
        "properties": {
          "practiceAreaId": {
            "type": "integer",
            "description": "Practice Area Id. Unique Identifier of this record.",
            "format": "int32",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Practice Area Name.",
            "nullable": true,
            "example": "Immigration"
          },
          "code": {
            "type": "string",
            "description": "Practice Area Code.",
            "nullable": true,
            "example": "IMM"
          }
        },
        "additionalProperties": false
      },
      "UserRelationshipDto": {
        "type": "object",
        "properties": {
          "personnelId": {
            "type": "string",
            "description": "Unique Identifier of the user.",
            "nullable": true,
            "example": "DBSP0023"
          },
          "relationship": {
            "type": "string",
            "description": "Relationship. ```Administrative Assistant``` | ```Supervisor```.",
            "nullable": true,
            "example": "Administrative Assistant"
          }
        },
        "additionalProperties": false
      },
      "UserRelationshipInfo": {
        "type": "object",
        "properties": {
          "personnelId": {
            "type": "string",
            "description": "Unique Identifier of the user.",
            "nullable": true,
            "example": "DBSP0023"
          },
          "relationship": {
            "type": "string",
            "description": "Relationship to the user [```Administrative Assistant``` ```Supervisor```].",
            "nullable": true,
            "example": "Administrative Assistant"
          },
          "userId": {
            "type": "integer",
            "description": "Unique Identifier of the user in CE Manager.",
            "format": "int32",
            "example": 252
          },
          "fullName": {
            "type": "string",
            "description": "Full Name.",
            "nullable": true,
            "example": "Baker"
          },
          "email": {
            "type": "string",
            "description": "Email.",
            "nullable": true,
            "example": "j.smith@micronsystems.com"
          }
        },
        "additionalProperties": false
      },
      "UserRoleDto": {
        "type": "object",
        "properties": {
          "roleId": {
            "type": "integer",
            "description": "Unique Identifier of the Role.",
            "format": "int32",
            "example": 1
          }
        },
        "additionalProperties": false
      },
      "UserRoleInfo": {
        "type": "object",
        "properties": {
          "roleId": {
            "type": "integer",
            "description": "Unique Identifier of the Role.",
            "format": "int32",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Name.",
            "nullable": true,
            "example": "CLE Coordinator"
          }
        },
        "additionalProperties": false
      },
      "UserTypeEnum": {
        "enum": [
          1,
          2,
          3
        ],
        "type": "integer",
        "description": "```1=Administrator``` ```2=Client``` ```3=Employee``` ",
        "format": "int32",
        "x-enumNames": [
          "Administrator",
          "Client",
          "Employee"
        ]
      },
      "ValidationProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          },
          "errors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": {}
      }
    }
  },
  "tags": [
    {
      "name": "Affiliation",
      "description": "Affiliation refers to a company associated with a firm's client."
    },
    {
      "name": "ClassYear",
      "description": "Class year is the end user's date of graduation from an educational institution."
    },
    {
      "name": "Competency",
      "description": "Competency is used to identify areas of skill proficiency."
    },
    {
      "name": "Compliance",
      "description": "- In CEM, licenses held by end users have course and credit-based requirements that must be fulfilled in a recurring date range known as a reporting period. Compliance refers to the completion status of a licenses’ requirements per reporting period, and is tracked per user in a “Compliance Report.”"
    },
    {
      "name": "Country",
      "description": "Defines in which region a provider or firm is located."
    },
    {
      "name": "County",
      "description": "County is an administrative subdivision of a state wherein a provider or firm office resides."
    },
    {
      "name": "Course",
      "description": "A course refers to a session, or series of sessions, which a user is required to complete prior to earning credits."
    },
    {
      "name": "CourseFormat",
      "description": "Refers to the style or presentation method of a course. (e.g. online video, live classroom, etc.)"
    },
    {
      "name": "Department",
      "description": "Department is a specialized area within an organization. Department is used as an additional attribute for courses and users."
    },
    {
      "name": "Ethnicity",
      "description": "Ethnicity is a category that allows users to be sorted based on cultural background or country of origin."
    },
    {
      "name": "Gender",
      "description": "Allows users to be sorted based on preferred gender identity."
    },
    {
      "name": "Group",
      "description": "Group indicates what permission group a user belongs to."
    },
    {
      "name": "LearningPlan",
      "description": "A learning plan refers to a collection of courses and activities that can be assigned to a user for completion."
    },
    {
      "name": "Level",
      "description": "A level is a relative position in a graded group."
    },
    {
      "name": "License",
      "description": "A License is a set of continuing education rules tracked by CE Manager for a professional license, certification or customized specifications. License regulations are defined by state or national governing bodies."
    },
    {
      "name": "Location",
      "description": "Location is the physical space where a provider or firm's offices reside."
    },
    {
      "name": "Participant",
      "description": "A participant is an employee or client who attends and completes a session or course."
    },
    {
      "name": "Position",
      "description": "Position is a job title or description."
    },
    {
      "name": "PracticeArea",
      "description": "Practice Areas are different fields of specialization within accounting or law."
    },
    {
      "name": "Provider",
      "description": "Providers are Legal/Accounting organizations and associations that provide courses for CLE/CPE credit."
    },
    {
      "name": "Role",
      "description": "Roles determines the permission of users to the application"
    },
    {
      "name": "Room",
      "description": "Room identifies in which portion of a firm's office a course or session is being held. "
    },
    {
      "name": "Session",
      "description": "A course is comprised of one or more sessions (or instances) wherein participants are enrolled to gain license credits."
    },
    {
      "name": "State",
      "description": "State is a nation or territory wherein a provider or firm office resides."
    },
    {
      "name": "Tag",
      "description": "Tags can be used as labels to give additional information on courses."
    },
    {
      "name": "Timezone",
      "description": "A time zone is a region of the world that observes a uniform standard time."
    },
    {
      "name": "User",
      "description": "Manages registered users in the application."
    }
  ]
}